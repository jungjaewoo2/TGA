
  This section covers the aspects of the language that control which
  program statements get executed, and in what order. Control
  statements do not evalute to a numeric value. The available control
  statements are the <em>if-statement</>, the <em>while-statement</>,
  and the <em>for-statement</>.  A <em>break-statement</> and a
  <em>continue-statement</> offer program execution control from
  within the if, for, and while statements.

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<sect> If Statement
<p>

  The <em>if-statement</> performs a test on the expression in
  parenthesis, <em>expr</>, and executes the <em>statements</>
  enclosed within braces, if the expression is true (has a non-zero
  value). The expression must evaluate to a scalar-expression,
  otherwise a run-time error will result.

  <quote>
  if ( <em>expr</> )
  {
     <em>statements</>
  }
  </quote>

  The user is free to insert newlines for formatting
  purposes. <em>expr</> can be the simplest expression, a constant, or
  something more complex, like an assignment, function call, or
  relational test(s). Starting with a simple example:

<tscreen><verb>
> if ( 1 ) { "TRUE" }
TRUE
> if ( 0 ) { "TRUE" }
</verb></tscreen>

   An optional <em>else</> keyword is allowed to delineate statements
  that will be executed if the expression tests false:

<tscreen><verb>
> if ( 0 ) { "TRUE" else "FALSE" }
FALSE
</verb></tscreen>

  An explicit else-if keyword is not available, however, the else-if
  control flow can be reproduced with nested if-statments.

<tscreen><verb>
> if ( 0 )
  {
    "true-1"
  else if ( 0 ) {
    "true-2"
  else if ( 1 ) {
    "true-3"
  else
    "else-part"
  }}}
true-3  
</verb></tscreen>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<sect> While Statement
<p>

  The <em>while-statement</> executes the body of <em>statements</>
  until the scalar <em>expr</> is false (has a zero value).

  <quote>
  while ( <em>expr</> )
  {
    <em>statements</>
  }
  </quote>

  The while statement is useful when the loop termination conditions
  are not know a-priori. When the loop termination condition is know
  prior to execution, a for-loop is more efficient. An often used
  example is reading a data file, line by line until the end-of-file
  is reached:

<tscreen><verb>
> while (length (ans = getline ("file")))
  {
    # Operate on the file contents...
  }
</verb></tscreen>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<sect> For Statement
<p>

  The <em>for-statement</> executes the body of <em>statements</> for
  each element of <em>vector</>. The first time the loop-body is
  executed <em>var</> is set the value of the first element of
  <em>vector</>. The loop is re-executed for each element of
  <em>vector</> with <em>var</> set to each subsequent value of
  <em>vector</>. If <em>vector</> is empty, then the loop-body is not
  executed. 

  <quote>
  for ( <em>var</> in <em>vector</> )
  {
    <em>statements</>
  }
  </quote>

  The for-loop <em>vector</> can be any type of vector: numeric,
  either real or complex, or string. Quite often the for-loop vector
  is constructed on the fly using vector notation. Some simple
  examples: 

<tscreen><verb>
> n = 2;
> for ( i in 1:n ) { printf ("%i ", i); } printf("\n");
1 2 
> x = ["a", "sample", "string"];
> for ( i in x ) { printf ("%s ", i); } printf("\n");
a sample string 
</verb></tscreen>

  The first part of the previous example shows how a for-loop vector
  is often constructed on the fly. The second part demonstrates how a
  string vector can be used in a for-loop.

  
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<sect> Break Statement
<p>

  The <em>break</> statement allows program execution to be transfered
  out of a while or for statement. Consequently, break statements are
  only valid within for and while loops. When the break statement is
  executed, execution of the inner-most loop terminates.

<tscreen><verb>
> for ( i in 1:100 ) { if (i == 3) { break } } i
        3  
</verb></tscreen>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<sect> Continue Statement
<p>

  The <em>continue</> statement forces execution of the next iteration
  of the inner-most for or while loop to begin
  immediately. Consequently, continue statements are only valid within
  for or while loops.

<tscreen><verb>
> for ( i in 1:4 ) { if (i == 2) { continue } i }
        1  
        3  
        4  
</verb></tscreen>

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
