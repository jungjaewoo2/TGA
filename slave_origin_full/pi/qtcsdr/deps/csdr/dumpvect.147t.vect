
;; Function clipdetect_ff (clipdetect_ff, funcdef_no=47, decl_uid=10858, cgraph_uid=47, symbol_order=53)


Analyzing loop at csdr.c:130
csdr.c:130:28: note: ===== analyze_loop_nest =====
csdr.c:130:28: note: === vect_analyze_loop_form ===
csdr.c:130:28: note: not vectorized: control flow in loop.
csdr.c:130:28: note: bad loop form.
csdr.c:128:5: note: vectorized 0 loops in function.
clipdetect_ff (float * input, int input_size)
{
  int D.15826;
  int i;
  int _2;
  unsigned int i.1_4;
  unsigned int _5;
  float * _7;
  float _9;
  struct _IO_FILE * stderr.2_14;
  struct _IO_FILE * stderr.2_16;
  float _20;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  if (input_size_3(D) > 0)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  _20 = *input_6(D);
  if (_20 < -1.0e+0)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 4>:
  if (_20 > 1.0e+0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 5>:
  i.1_4 = (unsigned int) i_13;
  _5 = i.1_4 * 4;
  _7 = input_6(D) + _5;
  _9 = *_7;
  if (_9 < -1.0e+0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  stderr.2_14 = stderr;
  __builtin_fwrite ("csdr clipdetect_ff: Signal value below -1.0!\n", 1, 45, stderr.2_14);
  goto <bb 12>;

  <bb 7>:
  if (_9 > 1.0e+0)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 11>;

  <bb 9>:
  # DEBUG D#3 => input_6(D)
  # DEBUG D#4 => input_size_3(D)
  # DEBUG D#6 => D#3
  # DEBUG input => D#6
  # DEBUG D#5 => D#4
  # DEBUG input_size => D#5
  stderr.2_16 = stderr;
  __builtin_fwrite ("csdr clipdetect_ff: Signal value above 1.0!\n", 1, 44, stderr.2_16);
  # DEBUG i => NULL
  # DEBUG input => NULL
  # DEBUG input_size => NULL
  goto <bb 12>;

  <bb 10>:

  <bb 11>:
  # i_21 = PHI <0(10), i_13(8)>
  # DEBUG i => i_21
  i_13 = i_21 + 1;
  # DEBUG i => i_13
  # DEBUG i => i_13
  if (input_size_3(D) > i_13)
    goto <bb 5>;
  else
    goto <bb 12>;

  <bb 12>:
  # _2 = PHI <-1(6), 1(9), 0(11), 0(2)>
  return _2;

}



;; Function clone_ (clone_, funcdef_no=48, decl_uid=10865, cgraph_uid=48, symbol_order=54) (executed once)


Analyzing loop at csdr.c:144
csdr.c:144:4: note: ===== analyze_loop_nest =====
csdr.c:144:4: note: === vect_analyze_loop_form ===
csdr.c:144:4: note: not vectorized: multiple exits.
csdr.c:144:4: note: bad loop form.
csdr.c:138:5: note: vectorized 0 loops in function.
clone_ (int bufsize_param)
{
  unsigned char * clone_buffer;
  unsigned int bufsize_param.3_3;
  struct _IO_FILE * stdin.5_7;
  struct _IO_FILE * stdout.6_9;

  <bb 2>:
  bufsize_param.3_3 = (unsigned int) bufsize_param_2(D);
  clone_buffer_6 = malloc (bufsize_param.3_3);
  # DEBUG clone_buffer => clone_buffer_6

  <bb 3>:
  stdin.5_7 = stdin;
  fread (clone_buffer_6, 1, bufsize_param.3_3, stdin.5_7);
  stdout.6_9 = stdout;
  fwrite (clone_buffer_6, 1, bufsize_param.3_3, stdout.6_9);

  <bb 4>:
  goto <bb 3>;

}



;; Function read_fifo_ctl (read_fifo_ctl, funcdef_no=50, decl_uid=10886, cgraph_uid=50, symbol_order=56)


Analyzing loop at csdr.c:188
csdr.c:188:2: note: ===== analyze_loop_nest =====
csdr.c:188:2: note: === vect_analyze_loop_form ===
csdr.c:188:2: note: === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < buffer_index.14_46
  bounds on difference of bases: 0 ... 2147483646
Applying pattern match.pd:695, generic-match.c:64
Applying pattern match.pd:732, generic-match.c:10709
  result:
    # of iterations (unsigned int) buffer_index.14_46 + 4294967295, bounded by 2147483646
Applying pattern match.pd:1047, generic-match.c:4821
Applying pattern match.pd:83, generic-match.c:9008
csdr.c:188:2: note: Symbolic number of iterations is (unsigned int) buffer_index.14_46
Creating dr for buffer[i_49]
analyze_innermost: Applying pattern match.pd:148, generic-match.c:566
Applying pattern match.pd:83, generic-match.c:9008
success.
	base_address: &buffer
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 64
	base_object: buffer
	Access function 0: {0, +, 1}_1
csdr.c:188:2: note: === vect_analyze_data_refs ===
csdr.c:188:2: note: got vectype for stmt: _20 = buffer[i_49];
vector(16) char
csdr.c:188:2: note: === vect_analyze_scalar_cycles ===
csdr.c:188:2: note: Analyze phi: prev_newline_at_43 = PHI <0(6), prev_newline_at_1(8)>

csdr.c:188:2: note: Access function of PHI: prev_newline_at_43
csdr.c:188:2: note: Analyze phi: last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>

csdr.c:188:2: note: Access function of PHI: last_newline_at_44
csdr.c:188:2: note: Analyze phi: i_49 = PHI <0(6), prephitmp_31(8)>

csdr.c:188:2: note: Access function of PHI: {0, +, 1}_1
csdr.c:188:2: note: step: 1,  init: 0
csdr.c:188:2: note: Detected induction.
csdr.c:188:2: note: Analyze phi: last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>

csdr.c:188:2: note: reduction used in loop.
csdr.c:188:2: note: Unknown def-use cycle pattern.
csdr.c:188:2: note: Analyze phi: prev_newline_at_43 = PHI <0(6), prev_newline_at_1(8)>

csdr.c:188:2: note: reduction: multiple types: operation type: int, operands types: int,int,char,char
csdr.c:188:2: note: Unknown def-use cycle pattern.
csdr.c:188:2: note: === vect_pattern_recog ===
csdr.c:188:2: note: vect_is_simple_use: operand last_newline_at_44
csdr.c:188:2: note: def_stmt: last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>
csdr.c:188:2: note: type of def: unknown
csdr.c:188:2: note: Unsupported pattern.
csdr.c:188:2: note: vect_recog_mask_conversion_pattern: detected:
csdr.c:188:2: note: mask_conversion pattern recognized: patt_19 = patt_32 ? last_newline_at_44 : prev_newline_at_43;
csdr.c:188:2: note: vect_is_simple_use: operand last_newline_at_21
csdr.c:188:2: note: def_stmt: last_newline_at_21 = i_49 + 1;
csdr.c:188:2: note: type of def: internal
csdr.c:188:2: note: vect_recog_mask_conversion_pattern: detected:
csdr.c:188:2: note: mask_conversion pattern recognized: patt_4 = patt_2 ? last_newline_at_21 : last_newline_at_44;
csdr.c:188:2: note: === vect_analyze_data_ref_accesses ===
csdr.c:188:2: note: === vect_mark_stmts_to_be_vectorized ===
csdr.c:188:2: note: init: phi relevant? prev_newline_at_43 = PHI <0(6), prev_newline_at_1(8)>
csdr.c:188:2: note: init: phi relevant? last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>
csdr.c:188:2: note: init: phi relevant? i_49 = PHI <0(6), prephitmp_31(8)>
csdr.c:188:2: note: init: stmt relevant? # DEBUG i => NULL
csdr.c:188:2: note: init: stmt relevant? # DEBUG last_newline_at => NULL
csdr.c:188:2: note: init: stmt relevant? # DEBUG prev_newline_at => NULL
csdr.c:188:2: note: init: stmt relevant? _20 = buffer[i_49];
csdr.c:188:2: note: init: stmt relevant? # DEBUG prev_newline_at => NULL
csdr.c:188:2: note: init: stmt relevant? last_newline_at_21 = i_49 + 1;
csdr.c:188:2: note: init: stmt relevant? # DEBUG last_newline_at => NULL
csdr.c:188:2: note: init: stmt relevant? _45 = i_49 + 1;
csdr.c:188:2: note: init: stmt relevant? prev_newline_at_1 = _20 == 10 ? last_newline_at_44 : prev_newline_at_43;
csdr.c:188:2: note: vec_stmt_relevant_p: used out of loop.
csdr.c:188:2: note: mark relevant 0, live 1: prev_newline_at_1 = _20 == 10 ? last_newline_at_44 : prev_newline_at_43;
csdr.c:188:2: note: last stmt in pattern. don't mark relevant/live.
csdr.c:188:2: note: init: stmt relevant? last_newline_at_3 = _20 == 10 ? last_newline_at_21 : last_newline_at_44;
csdr.c:188:2: note: vec_stmt_relevant_p: used out of loop.
csdr.c:188:2: note: mark relevant 0, live 1: last_newline_at_3 = _20 == 10 ? last_newline_at_21 : last_newline_at_44;
csdr.c:188:2: note: last stmt in pattern. don't mark relevant/live.
csdr.c:188:2: note: init: stmt relevant? prephitmp_31 = _45;
csdr.c:188:2: note: init: stmt relevant? # DEBUG last_newline_at => last_newline_at_3
csdr.c:188:2: note: init: stmt relevant? # DEBUG prev_newline_at => prev_newline_at_1
csdr.c:188:2: note: init: stmt relevant? # DEBUG D#17 => i_49 + 1
csdr.c:188:2: note: init: stmt relevant? # DEBUG i => D#17
csdr.c:188:2: note: init: stmt relevant? # DEBUG i => D#17
csdr.c:188:2: note: init: stmt relevant? # DEBUG last_newline_at => last_newline_at_3
csdr.c:188:2: note: init: stmt relevant? # DEBUG prev_newline_at => prev_newline_at_1
csdr.c:188:2: note: init: stmt relevant? if (prephitmp_31 < buffer_index.14_46)
csdr.c:188:2: note: worklist: examine stmt: patt_4 = patt_2 ? last_newline_at_21 : last_newline_at_44;
csdr.c:188:2: note: vect_is_simple_use: operand patt_2
csdr.c:188:2: note: def_stmt: patt_2 = (<unnamed type>) patt_22;
csdr.c:188:2: note: type of def: internal
csdr.c:188:2: note: mark relevant 0, live 1: patt_2 = (<unnamed type>) patt_22;
csdr.c:188:2: note: vect_is_simple_use: operand last_newline_at_21
csdr.c:188:2: note: def_stmt: last_newline_at_21 = i_49 + 1;
csdr.c:188:2: note: type of def: internal
csdr.c:188:2: note: mark relevant 0, live 1: last_newline_at_21 = i_49 + 1;
csdr.c:188:2: note: vect_is_simple_use: operand last_newline_at_44
csdr.c:188:2: note: def_stmt: last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>
csdr.c:188:2: note: type of def: unknown
csdr.c:188:2: note: Unsupported pattern.
csdr.c:188:2: note: not vectorized: unsupported use in stmt.
csdr.c:188:2: note: unexpected pattern.
csdr.c:178:5: note: vectorized 0 loops in function.
read_fifo_ctl (int fd, char * format)
{
  struct va_list vl;
  int i;
  int last_newline_at;
  int prev_newline_at;
  int bytes_read;
  static int buffer_index = 0;
  static char buffer[1024];
  int _6;
  int buffer_index.9_10;
  sizetype buffer_index.10_11;
  void * _12;
  int _14;
  unsigned int _15;
  char _20;
  sizetype prev_newline_at.11_24;
  const char * _25;
  sizetype last_newline_at.12_29;
  const void * _30;
  int prephitmp_31;
  int _33;
  unsigned int _34;
  int buffer_index.13_36;
  int _45;
  int buffer_index.14_46;
  int buffer_index.9_47;

  <bb 2>:
  if (fd_8(D) == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 12>;

  <bb 4>:
  buffer_index.9_10 = buffer_index;
  buffer_index.10_11 = (sizetype) buffer_index.9_10;
  _12 = &buffer + buffer_index.10_11;
  _14 = 1024 - buffer_index.9_10;
  _15 = (unsigned int) _14;
  bytes_read_17 = read (fd_8(D), _12, _15);
  # DEBUG bytes_read => bytes_read_17
  if (bytes_read_17 <= 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  # DEBUG i => 0
  # DEBUG last_newline_at => 0
  # DEBUG prev_newline_at => 0
  buffer_index.9_47 = buffer_index;
  buffer_index.14_46 = bytes_read_17 + buffer_index.9_47;
  if (buffer_index.14_46 > 0)
    goto <bb 6>;
  else
    goto <bb 11>;

  <bb 6>:

  <bb 7>:
  # prev_newline_at_43 = PHI <0(6), prev_newline_at_1(8)>
  # last_newline_at_44 = PHI <0(6), last_newline_at_3(8)>
  # i_49 = PHI <0(6), prephitmp_31(8)>
  # DEBUG i => NULL
  # DEBUG last_newline_at => NULL
  # DEBUG prev_newline_at => NULL
  _20 = buffer[i_49];
  # DEBUG prev_newline_at => NULL
  last_newline_at_21 = i_49 + 1;
  # DEBUG last_newline_at => NULL
  _45 = i_49 + 1;
  prev_newline_at_1 = _20 == 10 ? last_newline_at_44 : prev_newline_at_43;
  last_newline_at_3 = _20 == 10 ? last_newline_at_21 : last_newline_at_44;
  prephitmp_31 = _45;
  # DEBUG last_newline_at => last_newline_at_3
  # DEBUG prev_newline_at => prev_newline_at_1
  # DEBUG D#17 => i_49 + 1
  # DEBUG i => D#17
  # DEBUG i => D#17
  # DEBUG last_newline_at => last_newline_at_3
  # DEBUG prev_newline_at => prev_newline_at_1
  if (prephitmp_31 < buffer_index.14_46)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 7>;

  <bb 9>:
  # prev_newline_at_18 = PHI <prev_newline_at_1(7)>
  # last_newline_at_48 = PHI <last_newline_at_3(7)>
  if (last_newline_at_48 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  __builtin_va_start (&vl, 0);
  prev_newline_at.11_24 = (sizetype) prev_newline_at_18;
  _25 = &buffer + prev_newline_at.11_24;
  vsscanf (_25, format_26(D), vl);
  __builtin_va_end (&vl);
  last_newline_at.12_29 = (sizetype) last_newline_at_48;
  _30 = &buffer + last_newline_at.12_29;
  _33 = buffer_index.14_46 - last_newline_at_48;
  _34 = (unsigned int) _33;
  memmove (&buffer, _30, _34);
  buffer_index.13_36 = bytes_read_17 - last_newline_at_48;
  buffer_index = buffer_index.13_36;
  vl ={v} {CLOBBER};
  goto <bb 12>;

  <bb 11>:
  buffer_index = buffer_index.14_46;

  <bb 12>:
  # _6 = PHI <0(3), 0(11), 1(10)>
  return _6;

}



;; Function main (main, funcdef_no=56, decl_uid=10922, cgraph_uid=56, symbol_order=69) (executed once)


Analyzing loop at csdr.c:330
csdr.c:330:4: note: ===== analyze_loop_nest =====
csdr.c:330:4: note: === vect_analyze_loop_form ===
csdr.c:330:4: note: not vectorized: latch block not empty.
csdr.c:330:4: note: bad loop form.

Analyzing loop at csdr.c:342
csdr.c:342:4: note: ===== analyze_loop_nest =====
csdr.c:342:4: note: === vect_analyze_loop_form ===
csdr.c:342:4: note: not vectorized: latch block not empty.
csdr.c:342:4: note: bad loop form.

Analyzing loop at csdr.c:378
csdr.c:378:4: note: ===== analyze_loop_nest =====
csdr.c:378:4: note: === vect_analyze_loop_form ===
csdr.c:378:4: note: not vectorized: control flow in loop.
csdr.c:378:4: note: bad loop form.

Analyzing loop at csdr.c:380
csdr.c:380:4: note: ===== analyze_loop_nest =====
csdr.c:380:4: note: === vect_analyze_loop_form ===
csdr.c:380:4: note: === get_loop_niters ===
Analyzing # of iterations of loop 69
  exit condition [1, + , 1](no_overflow) < the_bufsize.31_2757
  bounds on difference of bases: 0 ... 2147483646
Applying pattern match.pd:695, generic-match.c:64
Applying pattern match.pd:732, generic-match.c:10709
  result:
    # of iterations (unsigned int) the_bufsize.31_2757 + 4294967295, bounded by 2147483646
Applying pattern match.pd:1047, generic-match.c:4821
Applying pattern match.pd:83, generic-match.c:9008
csdr.c:380:4: note: Symbolic number of iterations is (unsigned int) the_bufsize.31_2757
Creating dr for *_377
analyze_innermost: success.
	base_address: pretmp_2633
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 64
	base_object: *pretmp_2633
	Access function 0: {0B, +, 8}_69
Creating dr for *_373
analyze_innermost: success.
	base_address: pretmp_2657
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 64
	base_object: *pretmp_2657
	Access function 0: {0B, +, 4}_69
csdr.c:380:4: note: === vect_analyze_data_refs ===
csdr.c:380:4: note: got vectype for stmt: _378 = *_377;
vector(4) float
csdr.c:380:4: note: got vectype for stmt: *_373 = _378;
vector(4) float
csdr.c:380:4: note: === vect_analyze_scalar_cycles ===
csdr.c:380:4: note: Analyze phi: i_2687 = PHI <0(62), i_380(65)>

csdr.c:380:4: note: Access function of PHI: {0, +, 1}_69
csdr.c:380:4: note: step: 1,  init: 0
csdr.c:380:4: note: Detected induction.
csdr.c:380:4: note: Analyze phi: .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>

csdr.c:380:4: note: === vect_pattern_recog ===
csdr.c:380:4: note: vect_is_simple_use: operand i.45_371
csdr.c:380:4: note: def_stmt: i.45_371 = (unsigned int) i_2687;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note: vect_is_simple_use: operand i_2687
csdr.c:380:4: note: def_stmt: i_2687 = PHI <0(62), i_380(65)>
csdr.c:380:4: note: type of def: induction
csdr.c:380:4: note: vect_is_simple_use: operand i.45_371
csdr.c:380:4: note: def_stmt: i.45_371 = (unsigned int) i_2687;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note: vect_is_simple_use: operand i_2687
csdr.c:380:4: note: def_stmt: i_2687 = PHI <0(62), i_380(65)>
csdr.c:380:4: note: type of def: induction
csdr.c:380:4: note: === vect_analyze_data_ref_accesses ===
csdr.c:380:4: note: Detected single element interleaving *_377 step 8
csdr.c:380:4: note: === vect_mark_stmts_to_be_vectorized ===
csdr.c:380:4: note: init: phi relevant? i_2687 = PHI <0(62), i_380(65)>
csdr.c:380:4: note: init: phi relevant? .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>
csdr.c:380:4: note: init: stmt relevant? # DEBUG i => i_2687
csdr.c:380:4: note: init: stmt relevant? i.45_371 = (unsigned int) i_2687;
csdr.c:380:4: note: init: stmt relevant? _372 = i.45_371 * 4;
csdr.c:380:4: note: init: stmt relevant? _373 = pretmp_2657 + _372;
csdr.c:380:4: note: init: stmt relevant? _376 = i.45_371 * 8;
csdr.c:380:4: note: init: stmt relevant? _377 = pretmp_2633 + _376;
csdr.c:380:4: note: init: stmt relevant? _378 = *_377;
csdr.c:380:4: note: init: stmt relevant? *_373 = _378;
csdr.c:380:4: note: vec_stmt_relevant_p: stmt has vdefs.
csdr.c:380:4: note: mark relevant 4, live 0: *_373 = _378;
csdr.c:380:4: note: init: stmt relevant? i_380 = i_2687 + 1;
csdr.c:380:4: note: init: stmt relevant? # DEBUG i => i_380
csdr.c:380:4: note: init: stmt relevant? # DEBUG i => i_380
csdr.c:380:4: note: init: stmt relevant? if (i_380 < the_bufsize.31_2757)
csdr.c:380:4: note: worklist: examine stmt: *_373 = _378;
csdr.c:380:4: note: vect_is_simple_use: operand _378
csdr.c:380:4: note: def_stmt: _378 = *_377;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note: mark relevant 4, live 0: _378 = *_377;
csdr.c:380:4: note: worklist: examine stmt: _378 = *_377;
csdr.c:380:4: note: === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _378 = *_377;
  stmt_b: *_373 = _378;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _378 = *_377;
  stmt_b: _378 = *_377;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 8}_69)
  (chrec_b = {0B, +, 8}_69)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_373 = _378;
  stmt_b: *_373 = _378;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_69)
  (chrec_b = {0B, +, 4}_69)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
csdr.c:380:4: note: versioning for alias required: can't determine dependence between *_377 and *_373
csdr.c:380:4: note: mark for run-time aliasing test between *_377 and *_373
csdr.c:380:4: note: === vect_determine_vectorization_factor ===
csdr.c:380:4: note: ==> examining phi: i_2687 = PHI <0(62), i_380(65)>

csdr.c:380:4: note: ==> examining phi: .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>

csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_2687

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: i.45_371 = (unsigned int) i_2687;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: _372 = i.45_371 * 4;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: _373 = pretmp_2657 + _372;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: _376 = i.45_371 * 8;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: _377 = pretmp_2633 + _376;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: _378 = *_377;

csdr.c:380:4: note: get vectype for scalar type:  float
csdr.c:380:4: note: vectype: vector(4) float
csdr.c:380:4: note: nunits = 4
csdr.c:380:4: note: ==> examining statement: *_373 = _378;

csdr.c:380:4: note: get vectype for scalar type:  float
csdr.c:380:4: note: vectype: vector(4) float
csdr.c:380:4: note: nunits = 4
csdr.c:380:4: note: ==> examining statement: i_380 = i_2687 + 1;

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_380

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_380

csdr.c:380:4: note: skip.
csdr.c:380:4: note: ==> examining statement: if (i_380 < the_bufsize.31_2757)

csdr.c:380:4: note: skip.
csdr.c:380:4: note: vectorization factor = 4
csdr.c:380:4: note: === vect_analyze_slp ===
csdr.c:380:4: note: === vect_make_slp_decision ===
csdr.c:380:4: note: === vect_analyze_data_refs_alignment ===
csdr.c:380:4: note: vect_compute_data_ref_alignment:
csdr.c:380:4: note: can't force alignment of ref: *_377
csdr.c:380:4: note: vect_compute_data_ref_alignment:
csdr.c:380:4: note: can't force alignment of ref: *_373
csdr.c:380:4: note: === vect_prune_runtime_alias_test_list ===
Applying pattern match.pd:1505, generic-match.c:7235
Applying pattern match.pd:1505, generic-match.c:7235
csdr.c:380:4: note: improved number of alias checks from 1 to 1
csdr.c:380:4: note: === vect_enhance_data_refs_alignment ===
csdr.c:380:4: note: vector alignment may not be reachable
csdr.c:380:4: note: vect_can_advance_ivs_p:
csdr.c:380:4: note: Analyze phi: i_2687 = PHI <0(62), i_380(65)>

csdr.c:380:4: note: Analyze phi: .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>

csdr.c:380:4: note: virtual phi. skip.
csdr.c:380:4: note: Vectorizing an unaligned access.
csdr.c:380:4: note: Vectorizing an unaligned access.
csdr.c:380:4: note: === vect_analyze_loop_operations ===
csdr.c:380:4: note: examining phi: i_2687 = PHI <0(62), i_380(65)>

csdr.c:380:4: note: examining phi: .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>

csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_2687
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: i.45_371 = (unsigned int) i_2687;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: _372 = i.45_371 * 4;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: _373 = pretmp_2657 + _372;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: _376 = i.45_371 * 8;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: _377 = pretmp_2633 + _376;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: _378 = *_377;
csdr.c:380:4: note: vect_is_simple_use: operand *_377
csdr.c:380:4: note: not ssa-name.
csdr.c:380:4: note: use not simple.
csdr.c:380:4: note: vect_is_simple_use: operand *_377
csdr.c:380:4: note: not ssa-name.
csdr.c:380:4: note: use not simple.
csdr.c:380:4: note: Data access with gaps requires scalar epilogue loop
csdr.c:380:4: note: can use vec_load_lanes<OI><V4SF>
csdr.c:380:4: note: vect_model_load_cost: unaligned supported by hardware.
csdr.c:380:4: note: vect_model_load_cost: inside_cost = 1, prologue_cost = 0 .
csdr.c:380:4: note: ==> examining statement: *_373 = _378;
csdr.c:380:4: note: vect_is_simple_use: operand _378
csdr.c:380:4: note: def_stmt: _378 = *_377;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note: vect_model_store_cost: unaligned supported by hardware.
csdr.c:380:4: note: vect_model_store_cost: inside_cost = 1, prologue_cost = 0 .
csdr.c:380:4: note: ==> examining statement: i_380 = i_2687 + 1;
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_380
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: # DEBUG i => i_380
csdr.c:380:4: note: irrelevant.
csdr.c:380:4: note: ==> examining statement: if (i_380 < the_bufsize.31_2757)
csdr.c:380:4: note: irrelevant.
cost model: Adding cost of checks for loop versioning aliasing.
csdr.c:380:4: note: cost model: epilogue peel iters set to vf/2 because loop iterations are unknown .
csdr.c:380:4: note: Cost model analysis: 
  Vector inside of loop cost: 2
  Vector prologue cost: 10
  Vector epilogue cost: 4
  Scalar iteration cost: 2
  Scalar outside cost: 1
  Vector outside cost: 14
  prologue iterations: 0
  epilogue iterations: 2
  Calculated minimum iters for profitability: 9
csdr.c:380:4: note:   Runtime profitability threshold = 8
csdr.c:380:4: note:   Static estimate profitability threshold = 8
csdr.c:380:4: note: epilog loop required
csdr.c:380:4: note: vect_can_advance_ivs_p:
csdr.c:380:4: note: Analyze phi: i_2687 = PHI <0(62), i_380(65)>

csdr.c:380:4: note: Analyze phi: .MEM_2134 = PHI <.MEM_368(62), .MEM_379(65)>

csdr.c:380:4: note: virtual phi. skip.
csdr.c:380:4: note: loop vectorized
csdr.c:380:4: note: === vec_transform_loop ===
csdr.c:380:4: note: Profitability threshold is 8 loop iterations.
Applying pattern match.pd:83, generic-match.c:9904
Applying pattern match.pd:83, generic-match.c:9904
csdr.c:380:4: note: create runtime check for data references *_377 and *_373
csdr.c:380:4: note: created 1 versioning for alias checks.
Applying pattern match.pd:797, gimple-match.c:164
csdr.c:380:4: note: loop versioned for vectorization because of possible aliasing

Updating SSA:
Registering new PHI nodes in block #699
Registering new PHI nodes in block #700
Registering new PHI nodes in block #63
Updating SSA information for statement # DEBUG i => i_2687
Updating SSA information for statement i.45_371 = (unsigned int) i_2687;
Updating SSA information for statement _372 = i.45_371 * 4;
Updating SSA information for statement _373 = pretmp_2657 + _372;
Updating SSA information for statement _376 = i.45_371 * 8;
Updating SSA information for statement _377 = pretmp_2633 + _376;
Updating SSA information for statement _378 = *_377;
Updating SSA information for statement *_373 = _378;
Updating SSA information for statement i_380 = i_2687 + 1;
Updating SSA information for statement # DEBUG i => i_380
Updating SSA information for statement # DEBUG i => i_380
Updating SSA information for statement if (i_380 < the_bufsize.31_2757)
Registering new PHI nodes in block #65
Registering new PHI nodes in block #702
Registering new PHI nodes in block #701
Registering new PHI nodes in block #697
Updating SSA information for statement # DEBUG i => i_2687
Updating SSA information for statement i.45_2720 = (unsigned int) i_2687;
Updating SSA information for statement _2729 = i.45_371 * 4;
Updating SSA information for statement _2730 = pretmp_2657 + _372;
Updating SSA information for statement _2744 = i.45_371 * 8;
Updating SSA information for statement _2745 = pretmp_2633 + _376;
Updating SSA information for statement _2746 = *_377;
Updating SSA information for statement *_373 = _378;
Updating SSA information for statement i_2753 = i_2687 + 1;
Updating SSA information for statement # DEBUG i => i_380
Updating SSA information for statement # DEBUG i => i_380
Updating SSA information for statement if (i_380 < the_bufsize.31_2757)
Registering new PHI nodes in block #698
Registering new PHI nodes in block #64

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_2691 -> { i_2687 }
.MEM_2709 -> { .MEM_2134 }
i.45_2720 -> { i.45_371 }
_2729 -> { _372 }
_2730 -> { _373 }
_2744 -> { _376 }
_2745 -> { _377 }
_2746 -> { _378 }
.MEM_2748 -> { .MEM_379 }
i_2753 -> { i_380 }
Incremental SSA update started at block: 699
Number of blocks in CFG: 703
Number of blocks to update: 8 (  1%)
Affected blocks: 63 64 65 697 698 700 701 702


Applying pattern match.pd:695, generic-match.c:64
Applying pattern match.pd:732, generic-match.c:10709
Applying pattern match.pd:695, generic-match.c:64
Applying pattern match.pd:732, generic-match.c:10709
csdr.c:380:4: note: === vect_do_peeling_for_loop_bound ===
Removing basic block 703
basic block 703, loop depth 1
 pred:       700
 succ:      


Applying pattern match.pd:1771, generic-match.c:1258
;; Scaling loop 69 with scale 0.666600, bounding iterations to 0 from guessed 16
;; guessed iterations are now 11
;; Scaling loop 75 with scale 0.777800, bounding iterations to 4 from guessed 14
;; guessed iterations are now 4
csdr.c:380:4: note: vect_update_ivs_after_vectorizer: phi: i_2687 = PHI <0(707), i_380(65)>

Applying pattern match.pd:148, generic-match.c:566
Applying pattern match.pd:83, generic-match.c:9008
csdr.c:380:4: note: vect_update_ivs_after_vectorizer: phi: .MEM_2134 = PHI <.MEM_368(707), .MEM_379(65)>

csdr.c:380:4: note: virtual phi. skip.
Setting upper bound of nb iterations for epilogue loop to 6
csdr.c:380:4: note: ------>vectorizing phi: i_2687 = PHI <0(711), i_380(65)>

csdr.c:380:4: note: ------>vectorizing phi: .MEM_2134 = PHI <.MEM_368(711), .MEM_379(65)>

csdr.c:380:4: note: ------>vectorizing statement: # DEBUG i => i_2687

csdr.c:380:4: note: ------>vectorizing statement: i.45_371 = (unsigned int) i_2687;

csdr.c:380:4: note: ------>vectorizing statement: _372 = i.45_371 * 4;

csdr.c:380:4: note: ------>vectorizing statement: _373 = pretmp_2657 + _372;

csdr.c:380:4: note: ------>vectorizing statement: _376 = i.45_371 * 8;

csdr.c:380:4: note: ------>vectorizing statement: _377 = pretmp_2633 + _376;

csdr.c:380:4: note: ------>vectorizing statement: _378 = *_377;

csdr.c:380:4: note: transform statement.
csdr.c:380:4: note: Data access with gaps requires scalar epilogue loop
csdr.c:380:4: note: can use vec_load_lanes<OI><V4SF>
csdr.c:380:4: note: transform load. ncopies = 1
csdr.c:380:4: note: create array_type-pointer variable to type: float[8]  vectorizing a pointer ref: *pretmp_2633
Applying pattern match.pd:83, generic-match.c:9904
csdr.c:380:4: note: created pretmp_2633
csdr.c:380:4: note: add new stmt: vect_array.285 = LOAD_LANES (MEM[(float *)vectp_pretmp.283_2566]);
csdr.c:380:4: note: add new stmt: vect__378.286_2685 = vect_array.285[0];
csdr.c:380:4: note: add new stmt: vect__378.287_2689 = vect_array.285[1];
csdr.c:380:4: note: ------>vectorizing statement: *_373 = _378;

csdr.c:380:4: note: transform statement.
csdr.c:380:4: note: vect_is_simple_use: operand _378
csdr.c:380:4: note: def_stmt: _378 = *_377;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note: transform store. ncopies = 1
csdr.c:380:4: note: vect_get_vec_def_for_operand: _378
csdr.c:380:4: note: vect_is_simple_use: operand _378
csdr.c:380:4: note: def_stmt: _378 = *_377;
csdr.c:380:4: note: type of def: internal
csdr.c:380:4: note:   def_stmt =  _378 = *_377;
csdr.c:380:4: note: create vector_type-pointer variable to type: vector(4) float  vectorizing a pointer ref: *pretmp_2657
Applying pattern match.pd:83, generic-match.c:9904
csdr.c:380:4: note: created pretmp_2657
csdr.c:380:4: note: add new stmt: MEM[(float *)vectp_pretmp.288_2699] = vect__378.286_2685;
csdr.c:380:4: note: ------>vectorizing statement: i_380 = i_2687 + 1;

csdr.c:380:4: note: ------>vectorizing statement: # DEBUG i => i_380

csdr.c:380:4: note: ------>vectorizing statement: # DEBUG i => i_380

csdr.c:380:4: note: ------>vectorizing statement: vectp_pretmp.283_2676 = vectp_pretmp.283_2566 + 32;

csdr.c:380:4: note: ------>vectorizing statement: vectp_pretmp.288_2708 = vectp_pretmp.288_2699 + 16;

csdr.c:380:4: note: ------>vectorizing statement: if (i_380 < the_bufsize.31_2757)


loop at csdr.c:380: if (ivtmp_2747 < bnd.280_2762)

;; Scaling loop 69 with scale 0.250000, bounding iterations to 2 from guessed 11
;; guessed iterations are now 1
csdr.c:380:4: note: LOOP VECTORIZED

csdr.c:299:5: note: vectorized 1 loops in function.

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement parse_env ();
Updating SSA information for statement argv_global = argv_259(D);
Registering new PHI nodes in block #4
Updating SSA information for statement _262 = MEM[(char * *)argv_259(D) + 4B];
Updating SSA information for statement iftmp.29_263 = __builtin_strcmp (_262, "--help");
Registering new PHI nodes in block #5
Updating SSA information for statement fcntl (0, 1031, 2097152);
Updating SSA information for statement fcntl (1, 1031, 2097152);
Updating SSA information for statement _266 = MEM[(char * *)argv_259(D) + 4B];
Updating SSA information for statement iftmp.30_267 = __builtin_strcmp (_266, "setbuf");
Registering new PHI nodes in block #13
Updating SSA information for statement iftmp.32_273 = __builtin_strcmp (_266, "clone");
Registering new PHI nodes in block #20
Updating SSA information for statement iftmp.33_278 = __builtin_strcmp (_266, "convert_u8_f");
Registering new PHI nodes in block #29
Updating SSA information for statement iftmp.39_298 = __builtin_strcmp (_266, "convert_f_u8");
Registering new PHI nodes in block #37
Updating SSA information for statement iftmp.41_318 = __builtin_strcmp (_266, "convert_f_i16");
Registering new PHI nodes in block #45
Updating SSA information for statement iftmp.43_338 = __builtin_strcmp (_266, "convert_i16_f");
Registering new PHI nodes in block #53
Updating SSA information for statement iftmp.44_358 = __builtin_strcmp (_266, "realpart_cf");
Registering new PHI nodes in block #66
Updating SSA information for statement iftmp.46_386 = __builtin_strcmp (_266, "clipdetect_ff");
Registering new PHI nodes in block #74
Updating SSA information for statement iftmp.47_405 = __builtin_strcmp (_266, "gain_ff");
Registering new PHI nodes in block #85
Updating SSA information for statement iftmp.49_429 = __builtin_strcmp (_266, "limit_ff");
Registering new PHI nodes in block #96
Updating SSA information for statement iftmp.51_455 = __builtin_strcmp (_266, "yes_f");
Registering new PHI nodes in block #112
Updating SSA information for statement iftmp.55_480 = __builtin_strcmp (_266, "shift_math_cc");
Registering new PHI nodes in block #125
Updating SSA information for statement iftmp.56_500 = __builtin_strcmp (_266, "shift_table_cc");
Registering new PHI nodes in block #140
Updating SSA information for statement iftmp.60_537 = __builtin_strcmp (_266, "decimating_shift_addition_cc");
Registering new PHI nodes in block #154
Updating SSA information for statement iftmp.63_578 = __builtin_strcmp (_266, "shift_addition_cc");
Registering new PHI nodes in block #180
Updating SSA information for statement iftmp.66_625 = __builtin_strcmp (_266, "shift_addition_cc_test");
Registering new PHI nodes in block #185
Updating SSA information for statement iftmp.68_634 = __builtin_strcmp (_266, "dcblock_ff");
Registering new PHI nodes in block #193
Updating SSA information for statement iftmp.69_654 = __builtin_strcmp (_266, "fastdcblock_ff");
Registering new PHI nodes in block #202
Updating SSA information for statement iftmp.75_682 = __builtin_strcmp (_266, "fmdemod_atan_cf");
Registering new PHI nodes in block #211
Updating SSA information for statement iftmp.76_706 = __builtin_strcmp (_266, "fmdemod_quadri_cf");
Registering new PHI nodes in block #220
Updating SSA information for statement iftmp.78_731 = __builtin_strcmp (_266, "fmdemod_quadri_novect_cf");
Registering new PHI nodes in block #229
Updating SSA information for statement iftmp.79_755 = __builtin_strcmp (_266, "deemphasis_wfm_ff");
Registering new PHI nodes in block #240
Updating SSA information for statement iftmp.82_790 = __builtin_strcmp (_266, "detect_nan_ff");
Registering new PHI nodes in block #252
Updating SSA information for statement iftmp.84_818 = __builtin_strcmp (_266, "floatdump_f");
Registering new PHI nodes in block #263
Updating SSA information for statement iftmp.86_840 = __builtin_strcmp (_266, "deemphasis_nfm_ff");
Registering new PHI nodes in block #264
Registering new PHI nodes in block #265
Updating SSA information for statement stderr.0_2286 = stderr;
Updating SSA information for statement fprintf (stderr.0_2286, "csdr: %s\n\n", "need required parameter (sample rate)");
Registering new PHI nodes in block #266
Updating SSA information for statement _841 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_841, "%d", &sample_rate);
Updating SSA information for statement _844 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2287 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #267
Updating SSA information for statement _2288 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #268
Updating SSA information for statement _2289 = sendbufsize.part.5 (_844);
Registering new PHI nodes in block #269
Registering new PHI nodes in block #270
Registering new PHI nodes in block #271
Updating SSA information for statement stdin.34_845 = stdin;
Updating SSA information for statement _847 = feof (stdin.34_845);
Registering new PHI nodes in block #272
Updating SSA information for statement input_buffer.40_848 = input_buffer;
Updating SSA information for statement the_bufsize.31_849 = the_bufsize;
Updating SSA information for statement stdin.34_856 = stdin;
Updating SSA information for statement fread (_854, 4, processed.88_851, stdin.34_856);
Updating SSA information for statement input_buffer.40_858 = input_buffer;
Updating SSA information for statement output_buffer.37_859 = output_buffer;
Updating SSA information for statement the_bufsize.31_860 = the_bufsize;
Updating SSA information for statement sample_rate.90_861 = sample_rate;
Updating SSA information for statement processed_863 = deemphasis_nfm_ff (input_buffer.40_858, output_buffer.37_859, the_bufsize.31_860, sample_rate.90_861);
Registering new PHI nodes in block #274
Updating SSA information for statement input_buffer.40_864 = input_buffer;
Updating SSA information for statement the_bufsize.31_868 = the_bufsize;
Updating SSA information for statement memmove (input_buffer.40_864, _867, _871);
Updating SSA information for statement output_buffer.37_873 = output_buffer;
Updating SSA information for statement stdout.38_875 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_873, 4, processed.91_865, stdout.38_875);
Registering new PHI nodes in block #273
Updating SSA information for statement stderr.0_2291 = stderr;
Updating SSA information for statement fprintf (stderr.0_2291, "csdr: %s\n\n", "deemphasis_nfm_ff: invalid sample rate (this function works only with specific sample rates).");
Registering new PHI nodes in block #275
Updating SSA information for statement sample_rate ={v} {CLOBBER};
Registering new PHI nodes in block #276
Updating SSA information for statement iftmp.92_879 = __builtin_strcmp (_266, "amdemod_cf");
Registering new PHI nodes in block #277
Updating SSA information for statement _881 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2292 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #278
Updating SSA information for statement _2293 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #279
Updating SSA information for statement _2294 = sendbufsize.part.5 (_881);
Registering new PHI nodes in block #280
Registering new PHI nodes in block #281
Registering new PHI nodes in block #282
Updating SSA information for statement stdin.34_882 = stdin;
Updating SSA information for statement _884 = feof (stdin.34_882);
Registering new PHI nodes in block #283
Updating SSA information for statement input_buffer.40_885 = input_buffer;
Updating SSA information for statement the_bufsize.31_886 = the_bufsize;
Updating SSA information for statement stdin.34_888 = stdin;
Updating SSA information for statement fread (input_buffer.40_885, 8, the_bufsize.36_887, stdin.34_888);
Updating SSA information for statement input_buffer.40_890 = input_buffer;
Updating SSA information for statement output_buffer.37_891 = output_buffer;
Updating SSA information for statement the_bufsize.31_892 = the_bufsize;
Updating SSA information for statement amdemod_cf (input_buffer.40_890, output_buffer.37_891, the_bufsize.31_892);
Updating SSA information for statement output_buffer.37_894 = output_buffer;
Updating SSA information for statement the_bufsize.31_895 = the_bufsize;
Updating SSA information for statement stdout.38_897 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_894, 4, the_bufsize.36_896, stdout.38_897);
Registering new PHI nodes in block #284
Updating SSA information for statement iftmp.93_900 = __builtin_strcmp (_266, "amdemod_estimator_cf");
Registering new PHI nodes in block #285
Updating SSA information for statement _902 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2296 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #286
Updating SSA information for statement _2297 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #287
Updating SSA information for statement _2298 = sendbufsize.part.5 (_902);
Registering new PHI nodes in block #288
Registering new PHI nodes in block #289
Registering new PHI nodes in block #290
Updating SSA information for statement stdin.34_903 = stdin;
Updating SSA information for statement _905 = feof (stdin.34_903);
Registering new PHI nodes in block #291
Updating SSA information for statement input_buffer.40_906 = input_buffer;
Updating SSA information for statement the_bufsize.31_907 = the_bufsize;
Updating SSA information for statement stdin.34_909 = stdin;
Updating SSA information for statement fread (input_buffer.40_906, 8, the_bufsize.36_908, stdin.34_909);
Updating SSA information for statement input_buffer.40_911 = input_buffer;
Updating SSA information for statement output_buffer.37_912 = output_buffer;
Updating SSA information for statement the_bufsize.31_913 = the_bufsize;
Updating SSA information for statement amdemod_estimator_cf (input_buffer.40_911, output_buffer.37_912, the_bufsize.31_913, 0.0, 0.0);
Updating SSA information for statement output_buffer.37_915 = output_buffer;
Updating SSA information for statement the_bufsize.31_916 = the_bufsize;
Updating SSA information for statement stdout.38_918 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_915, 4, the_bufsize.36_917, stdout.38_918);
Registering new PHI nodes in block #292
Updating SSA information for statement iftmp.94_921 = __builtin_strcmp (_266, "fir_decimate_cc");
Registering new PHI nodes in block #309
Updating SSA information for statement iftmp.101_1020 = __builtin_strcmp (_266, "firdes_lowpass_f");
Registering new PHI nodes in block #324
Updating SSA information for statement iftmp.109_1061 = __builtin_strcmp (_266, "firdes_bandpass_c");
Registering new PHI nodes in block #342
Updating SSA information for statement iftmp.118_1116 = __builtin_strcmp (_266, "agc_ff");
Registering new PHI nodes in block #359
Updating SSA information for statement iftmp.126_1173 = __builtin_strcmp (_266, "fastagc_ff");
Registering new PHI nodes in block #368
Updating SSA information for statement iftmp.127_1216 = __builtin_strcmp (_266, "suboptimal_rational_resampler_ff");
Registering new PHI nodes in block #369
Updating SSA information for statement iftmp.128_1217 = __builtin_strcmp (_266, "rational_resampler_ff");
Registering new PHI nodes in block #393
Updating SSA information for statement iftmp.137_1218 = __builtin_strcmp (_266, "fractional_decimator_ff");
Registering new PHI nodes in block #412
Updating SSA information for statement iftmp.141_1294 = __builtin_strcmp (_266, "fft_cc");
Registering new PHI nodes in block #449
Updating SSA information for statement iftmp.156_1422 = __builtin_strcmp (_266, "logpower_cf");
Registering new PHI nodes in block #460
Updating SSA information for statement iftmp.158_1447 = __builtin_strcmp (_266, "fft_exchange_sides_ff");
Registering new PHI nodes in block #470
Updating SSA information for statement iftmp.161_1485 = __builtin_strcmp (_266, "compress_fft_adpcm_f_u8");
Registering new PHI nodes in block #486
Updating SSA information for statement iftmp.167_1533 = __builtin_strcmp (_266, "fft_benchmark");
Registering new PHI nodes in block #500
Updating SSA information for statement iftmp.174_1620 = __builtin_strcmp (_266, "bandpass_fir_fft_cc");
Registering new PHI nodes in block #536
Updating SSA information for statement iftmp.186_1725 = __builtin_strcmp (_266, "encode_ima_adpcm_i16_u8");
Registering new PHI nodes in block #545
Updating SSA information for statement iftmp.187_1749 = __builtin_strcmp (_266, "decode_ima_adpcm_u8_i16");
Registering new PHI nodes in block #554
Updating SSA information for statement iftmp.188_1773 = __builtin_strcmp (_266, "flowcontrol");
Registering new PHI nodes in block #600
Updating SSA information for statement iftmp.205_1889 = __builtin_strcmp (_266, "through");
Registering new PHI nodes in block #613
Updating SSA information for statement iftmp.206_1935 = __builtin_strcmp (_266, "dsb_fc");
Registering new PHI nodes in block #627
Updating SSA information for statement iftmp.209_1971 = __builtin_strcmp (_266, "convert_f_samplerf");
Registering new PHI nodes in block #641
Updating SSA information for statement iftmp.212_2013 = __builtin_strcmp (_266, "add_dcoffset_cc");
Registering new PHI nodes in block #642
Updating SSA information for statement _2015 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2362 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #643
Updating SSA information for statement _2363 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #644
Updating SSA information for statement _2364 = sendbufsize.part.5 (_2015);
Registering new PHI nodes in block #645
Registering new PHI nodes in block #646
Registering new PHI nodes in block #647
Updating SSA information for statement stdin.34_2016 = stdin;
Updating SSA information for statement _2018 = feof (stdin.34_2016);
Registering new PHI nodes in block #648
Updating SSA information for statement input_buffer.40_2019 = input_buffer;
Updating SSA information for statement the_bufsize.31_2020 = the_bufsize;
Updating SSA information for statement stdin.34_2022 = stdin;
Updating SSA information for statement fread (input_buffer.40_2019, 8, the_bufsize.36_2021, stdin.34_2022);
Updating SSA information for statement input_buffer.40_2024 = input_buffer;
Updating SSA information for statement output_buffer.37_2025 = output_buffer;
Updating SSA information for statement the_bufsize.31_2026 = the_bufsize;
Updating SSA information for statement add_dcoffset_cc (input_buffer.40_2024, output_buffer.37_2025, the_bufsize.31_2026);
Updating SSA information for statement output_buffer.37_2028 = output_buffer;
Updating SSA information for statement the_bufsize.31_2029 = the_bufsize;
Updating SSA information for statement stdout.38_2031 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_2028, 8, the_bufsize.36_2030, stdout.38_2031);
Registering new PHI nodes in block #649
Updating SSA information for statement iftmp.213_2033 = __builtin_strcmp (_266, "fmmod_fc");
Registering new PHI nodes in block #650
Updating SSA information for statement _2035 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2366 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #651
Updating SSA information for statement _2367 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #652
Updating SSA information for statement _2368 = sendbufsize.part.5 (_2035);
Registering new PHI nodes in block #653
Registering new PHI nodes in block #654
Registering new PHI nodes in block #655
Updating SSA information for statement stdin.34_2036 = stdin;
Updating SSA information for statement _2038 = feof (stdin.34_2036);
Registering new PHI nodes in block #656
Updating SSA information for statement input_buffer.40_2039 = input_buffer;
Updating SSA information for statement the_bufsize.31_2040 = the_bufsize;
Updating SSA information for statement stdin.34_2042 = stdin;
Updating SSA information for statement fread (input_buffer.40_2039, 4, the_bufsize.36_2041, stdin.34_2042);
Updating SSA information for statement input_buffer.40_2044 = input_buffer;
Updating SSA information for statement output_buffer.37_2045 = output_buffer;
Updating SSA information for statement the_bufsize.31_2046 = the_bufsize;
Updating SSA information for statement last_phase_2048 = fmmod_fc (input_buffer.40_2044, output_buffer.37_2045, the_bufsize.31_2046, last_phase_63);
Updating SSA information for statement output_buffer.37_2049 = output_buffer;
Updating SSA information for statement the_bufsize.31_2050 = the_bufsize;
Updating SSA information for statement stdout.38_2052 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_2049, 8, the_bufsize.36_2051, stdout.38_2052);
Registering new PHI nodes in block #657
Updating SSA information for statement iftmp.214_2055 = __builtin_strcmp (_266, "fixed_amplitude_cc");
Registering new PHI nodes in block #668
Updating SSA information for statement iftmp.216_2080 = __builtin_strcmp (_266, "mono2stereo_i16");
Registering new PHI nodes in block #669
Updating SSA information for statement _2082 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2375 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #670
Updating SSA information for statement _2376 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #671
Updating SSA information for statement _2377 = sendbufsize.part.5 (_2082);
Registering new PHI nodes in block #672
Registering new PHI nodes in block #673
Registering new PHI nodes in block #674
Updating SSA information for statement stdin.34_2083 = stdin;
Updating SSA information for statement _2085 = feof (stdin.34_2083);
Registering new PHI nodes in block #675
Updating SSA information for statement input_buffer.40_2086 = input_buffer;
Updating SSA information for statement the_bufsize.31_2087 = the_bufsize;
Updating SSA information for statement stdin.34_2089 = stdin;
Updating SSA information for statement fread (input_buffer.40_2086, 2, the_bufsize.36_2088, stdin.34_2089);
Updating SSA information for statement the_bufsize.31_2091 = the_bufsize;
Updating SSA information for statement output_buffer.37_2092 = output_buffer;
Updating SSA information for statement input_buffer.40_2096 = input_buffer;
Registering new PHI nodes in block #677
Registering new PHI nodes in block #676
Updating SSA information for statement _2099 = *_2098;
Updating SSA information for statement *_2095 = _2099;
Updating SSA information for statement _2103 = *_2098;
Updating SSA information for statement *_2102 = _2103;
Registering new PHI nodes in block #678
Updating SSA information for statement output_buffer.37_2106 = output_buffer;
Updating SSA information for statement stdout.38_2108 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_2106, 4, the_bufsize.36_2107, stdout.38_2108);
Registering new PHI nodes in block #679
Updating SSA information for statement iftmp.218_2111 = __builtin_strcmp (_266, "none");
Registering new PHI nodes in block #680
Updating SSA information for statement stderr.0_2379 = stderr;
Updating SSA information for statement fprintf (stderr.0_2379, "csdr: %s\n\n", "function name given in argument 1 does not exist. Possible causes:\n- You mistyped the commandline.\n- You need to update csdr to a newer version (if available).");
Registering new PHI nodes in block #658
Registering new PHI nodes in block #659
Updating SSA information for statement stderr.0_2370 = stderr;
Updating SSA information for statement fprintf (stderr.0_2370, "csdr: %s\n\n", "need required parameter (new_amplitude)");
Registering new PHI nodes in block #660
Updating SSA information for statement _2056 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_2056, "%g", &new_amplitude);
Updating SSA information for statement _2059 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2371 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #661
Updating SSA information for statement _2372 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #662
Updating SSA information for statement _2373 = sendbufsize.part.5 (_2059);
Registering new PHI nodes in block #663
Registering new PHI nodes in block #664
Registering new PHI nodes in block #665
Updating SSA information for statement stdin.34_2060 = stdin;
Updating SSA information for statement _2062 = feof (stdin.34_2060);
Registering new PHI nodes in block #666
Updating SSA information for statement input_buffer.40_2063 = input_buffer;
Updating SSA information for statement the_bufsize.31_2064 = the_bufsize;
Updating SSA information for statement stdin.34_2066 = stdin;
Updating SSA information for statement fread (input_buffer.40_2063, 8, the_bufsize.36_2065, stdin.34_2066);
Updating SSA information for statement input_buffer.40_2068 = input_buffer;
Updating SSA information for statement output_buffer.37_2069 = output_buffer;
Updating SSA information for statement the_bufsize.31_2070 = the_bufsize;
Updating SSA information for statement new_amplitude.215_2071 = new_amplitude;
Updating SSA information for statement fixed_amplitude_cc (input_buffer.40_2068, output_buffer.37_2069, the_bufsize.31_2070, new_amplitude.215_2071);
Updating SSA information for statement output_buffer.37_2073 = output_buffer;
Updating SSA information for statement the_bufsize.31_2074 = the_bufsize;
Updating SSA information for statement stdout.38_2076 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_2073, 8, the_bufsize.36_2075, stdout.38_2076);
Registering new PHI nodes in block #667
Updating SSA information for statement new_amplitude ={v} {CLOBBER};
Registering new PHI nodes in block #628
Registering new PHI nodes in block #629
Updating SSA information for statement stderr.0_2357 = stderr;
Updating SSA information for statement fprintf (stderr.0_2357, "csdr: %s\n\n", "need required parameter (wait_for_this_sample)");
Registering new PHI nodes in block #630
Updating SSA information for statement _1973 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1973, "%u", &wait_for_this_sample);
Updating SSA information for statement _1976 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2358 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #631
Updating SSA information for statement _2359 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #632
Updating SSA information for statement _2360 = sendbufsize.part.5 (_1976);
Registering new PHI nodes in block #633
Registering new PHI nodes in block #634
Updating SSA information for statement the_bufsize.31_1977 = the_bufsize;
Updating SSA information for statement samplerf_buf_1981 = malloc (_1979);
Registering new PHI nodes in block #635
Updating SSA information for statement stdin.34_1982 = stdin;
Updating SSA information for statement _1984 = feof (stdin.34_1982);
Registering new PHI nodes in block #636
Updating SSA information for statement input_buffer.40_1985 = input_buffer;
Updating SSA information for statement the_bufsize.31_1986 = the_bufsize;
Updating SSA information for statement stdin.34_1988 = stdin;
Updating SSA information for statement fread (input_buffer.40_1985, 4, the_bufsize.36_1987, stdin.34_1988);
Updating SSA information for statement the_bufsize.31_1990 = the_bufsize;
Updating SSA information for statement input_buffer.40_1994 = input_buffer;
Updating SSA information for statement wait_for_this_sample.211_2003 = wait_for_this_sample;
Registering new PHI nodes in block #638
Registering new PHI nodes in block #637
Updating SSA information for statement _1998 = *_1997;
Updating SSA information for statement MEM[(double *)_1993] = _1999;
Updating SSA information for statement MEM[(unsigned int *)_2002] = wait_for_this_sample.211_2003;
Updating SSA information for statement MEM[(unsigned int *)_2006] = 0;
Registering new PHI nodes in block #639
Updating SSA information for statement stdout.38_2010 = stdout;
Updating SSA information for statement fwrite (samplerf_buf_1981, 16, the_bufsize.36_2009, stdout.38_2010);
Registering new PHI nodes in block #640
Updating SSA information for statement wait_for_this_sample ={v} {CLOBBER};
Registering new PHI nodes in block #614
Updating SSA information for statement q_value = 0.0;
Registering new PHI nodes in block #615
Updating SSA information for statement _1938 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1938, "%g", &q_value);
Registering new PHI nodes in block #616
Updating SSA information for statement _1941 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2353 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #617
Updating SSA information for statement _2354 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #618
Updating SSA information for statement _2355 = sendbufsize.part.5 (_1941);
Registering new PHI nodes in block #619
Registering new PHI nodes in block #620
Registering new PHI nodes in block #621
Updating SSA information for statement stdin.34_1942 = stdin;
Updating SSA information for statement _1944 = feof (stdin.34_1942);
Registering new PHI nodes in block #622
Updating SSA information for statement input_buffer.40_1945 = input_buffer;
Updating SSA information for statement the_bufsize.31_1946 = the_bufsize;
Updating SSA information for statement stdin.34_1948 = stdin;
Updating SSA information for statement fread (input_buffer.40_1945, 4, the_bufsize.36_1947, stdin.34_1948);
Updating SSA information for statement the_bufsize.31_1950 = the_bufsize;
Updating SSA information for statement output_buffer.37_1951 = output_buffer;
Updating SSA information for statement input_buffer.40_1955 = input_buffer;
Registering new PHI nodes in block #624
Registering new PHI nodes in block #623
Updating SSA information for statement _1958 = *_1957;
Updating SSA information for statement *_1954 = _1958;
Updating SSA information for statement q_value.208_1962 = q_value;
Updating SSA information for statement *_1961 = q_value.208_1962;
Registering new PHI nodes in block #625
Updating SSA information for statement output_buffer.37_1965 = output_buffer;
Updating SSA information for statement stdout.38_1967 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_1965, 8, the_bufsize.36_1966, stdout.38_1967);
Registering new PHI nodes in block #626
Updating SSA information for statement q_value ={v} {CLOBBER};
Registering new PHI nodes in block #601
Updating SSA information for statement _1891 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2349 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #602
Updating SSA information for statement _2350 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #603
Updating SSA information for statement _2351 = sendbufsize.part.5 (_1891);
Registering new PHI nodes in block #604
Registering new PHI nodes in block #605
Updating SSA information for statement the_bufsize.31_1892 = the_bufsize;
Updating SSA information for statement through_buffer_1896 = malloc (_1894);
Registering new PHI nodes in block #606
Updating SSA information for statement stdin.34_1897 = stdin;
Updating SSA information for statement _1899 = feof (stdin.34_1897);
Registering new PHI nodes in block #607
Updating SSA information for statement the_bufsize.31_1900 = the_bufsize;
Updating SSA information for statement stdin.34_1902 = stdin;
Updating SSA information for statement fread (through_buffer_1896, 4, the_bufsize.36_1901, stdin.34_1902);
Registering new PHI nodes in block #608
Updating SSA information for statement clock_gettime (4, &start_time);
Registering new PHI nodes in block #609
Updating SSA information for statement clock_gettime (4, &end_time);
Updating SSA information for statement _1907 = end_time.tv_sec;
Updating SSA information for statement _1908 = start_time.tv_sec;
Updating SSA information for statement _1911 = end_time.tv_nsec;
Updating SSA information for statement _1912 = start_time.tv_nsec;
Registering new PHI nodes in block #610
Updating SSA information for statement stderr.58_1918 = stderr;
Updating SSA information for statement the_bufsize.31_1920 = the_bufsize;
Updating SSA information for statement fprintf (stderr.58_1918, "through: %lu bytes/s %d\n", _1925, buffer_count_60);
Registering new PHI nodes in block #611
Updating SSA information for statement the_bufsize.31_1928 = the_bufsize;
Updating SSA information for statement stdout.38_1930 = stdout;
Updating SSA information for statement fwrite (through_buffer_1896, 4, the_bufsize.36_1929, stdout.38_1930);
Registering new PHI nodes in block #612
Updating SSA information for statement start_time ={v} {CLOBBER};
Updating SSA information for statement end_time ={v} {CLOBBER};
Registering new PHI nodes in block #555
Registering new PHI nodes in block #556
Updating SSA information for statement stderr.0_2346 = stderr;
Updating SSA information for statement fprintf (stderr.0_2346, "csdr: %s\n\n", "need required parameters (data_rate, reads_per_seconds)");
Registering new PHI nodes in block #557
Updating SSA information for statement _1774 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1774, "%d", &data_rate);
Updating SSA information for statement reads_per_second = 0;
Updating SSA information for statement _1777 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement iftmp.189_1778 = __builtin_strcmp (_1777, "auto");
Registering new PHI nodes in block #558
Updating SSA information for statement sscanf (_1777, "%d", &reads_per_second);
Registering new PHI nodes in block #559
Updating SSA information for statement prebuffer = 2.0e+0;
Registering new PHI nodes in block #560
Updating SSA information for statement _1782 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement sscanf (_1782, "%g", &prebuffer);
Updating SSA information for statement thrust = 10;
Registering new PHI nodes in block #561
Updating SSA information for statement _1786 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement sscanf (_1786, "%d", &thrust);
Registering new PHI nodes in block #694
Updating SSA information for statement thrust = 10;
Registering new PHI nodes in block #562
Updating SSA information for statement got_bufsize_1789 = getbufsize ();
Registering new PHI nodes in block #563
Updating SSA information for statement reads_per_second.190_1790 = reads_per_second;
Registering new PHI nodes in block #564
Updating SSA information for statement data_rate.191_1791 = data_rate;
Registering new PHI nodes in block #565
Updating SSA information for statement data_rate.191_1796 = data_rate;
Updating SSA information for statement reads_per_second = reads_per_second.192_1797;
Registering new PHI nodes in block #566
Updating SSA information for statement reads_per_second.190_1800 = reads_per_second;
Updating SSA information for statement prebuffer.193_1802 = prebuffer;
Updating SSA information for statement flowcontrol_buffer_1809 = malloc (flowcontrol_bufsize.194_1807);
Updating SSA information for statement _1814 = fcntl (0, 3, 0);
Updating SSA information for statement fcntl (0, 4, _1815);
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2347 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #567
Updating SSA information for statement sendbufsize.part.5 (flowcontrol_readsize_46);
Registering new PHI nodes in block #568
Updating SSA information for statement stdout.38_1817 = stdout;
Updating SSA information for statement fflush (stdout.38_1817);
Updating SSA information for statement stderr.58_1819 = stderr;
Updating SSA information for statement fprintf (stderr.58_1819, "flowcontrol: flowcontrol_readsize = %d, flowcontrol_bufsize = %d, flowcontrol_sleep = %d\n", flowcontrol_readsize_46, flowcontrol_bufsize_1806, flowcontrol_sleep_1812);
Registering new PHI nodes in block #570
Updating SSA information for statement stdin.34_1821 = stdin;
Updating SSA information for statement _1823 = feof (stdin.34_1821);
Registering new PHI nodes in block #571
Updating SSA information for statement stderr.58_1824 = stderr;
Updating SSA information for statement __builtin_fputc (114, stderr.58_1824);
Updating SSA information for statement read_return_1831 = read (0, _1827, _1829);
Updating SSA information for statement stderr.58_1832 = stderr;
Updating SSA information for statement __builtin_fputc (116, stderr.58_1832);
Registering new PHI nodes in block #572
Registering new PHI nodes in block #573
Registering new PHI nodes in block #574
Updating SSA information for statement stderr.58_1835 = stderr;
Updating SSA information for statement fprintf (stderr.58_1835, "flowcontrol: buffering, flowcontrol_bufindex = %d\n", flowcontrol_bufindex_48);
Registering new PHI nodes in block #576
Registering new PHI nodes in block #575
Updating SSA information for statement clock_gettime (4, &start_time);
Registering new PHI nodes in block #577
Updating SSA information for statement clock_gettime (4, &end_time);
Updating SSA information for statement _1844 = end_time.tv_sec;
Updating SSA information for statement _1845 = start_time.tv_sec;
Updating SSA information for statement _1848 = end_time.tv_nsec;
Updating SSA information for statement _1849 = start_time.tv_nsec;
Updating SSA information for statement data_rate.191_1855 = data_rate;
Updating SSA information for statement thrust_lsm.276_2598 = thrust;
Registering new PHI nodes in block #579
Registering new PHI nodes in block #578
Registering new PHI nodes in block #580
Registering new PHI nodes in block #581
Updating SSA information for statement thrust = thrust_lsm.276_2562;
Registering new PHI nodes in block #582
Updating SSA information for statement start_time_tv_sec_lsm.274_2569 = start_time.tv_sec;
Registering new PHI nodes in block #584
Registering new PHI nodes in block #588
Registering new PHI nodes in block #583
Registering new PHI nodes in block #589
Registering new PHI nodes in block #590
Updating SSA information for statement start_time.tv_sec = start_time_tv_sec_lsm.274_2558;
Registering new PHI nodes in block #591
Registering new PHI nodes in block #585
Registering new PHI nodes in block #586
Updating SSA information for statement start_time.tv_sec = start_time_tv_sec_lsm.274_2559;
Registering new PHI nodes in block #587
Registering new PHI nodes in block #592
Registering new PHI nodes in block #593
Updating SSA information for statement write (1, flowcontrol_buffer_1809, flowcontrol_readsize.200_1867);
Updating SSA information for statement stdout.38_1869 = stdout;
Updating SSA information for statement fflush (stdout.38_1869);
Updating SSA information for statement memmove (flowcontrol_buffer_1809, _1871, _1873);
Updating SSA information for statement thrust.196_1877 = thrust;
Registering new PHI nodes in block #595
Updating SSA information for statement thrust = thrust.203_1878;
Registering new PHI nodes in block #597
Registering new PHI nodes in block #596
Registering new PHI nodes in block #594
Registering new PHI nodes in block #598
Updating SSA information for statement usleep (flowcontrol_sleep.204_1880);
Registering new PHI nodes in block #569
Registering new PHI nodes in block #599
Updating SSA information for statement data_rate ={v} {CLOBBER};
Updating SSA information for statement reads_per_second ={v} {CLOBBER};
Updating SSA information for statement prebuffer ={v} {CLOBBER};
Updating SSA information for statement thrust ={v} {CLOBBER};
Updating SSA information for statement start_time ={v} {CLOBBER};
Updating SSA information for statement end_time ={v} {CLOBBER};
Registering new PHI nodes in block #546
Updating SSA information for statement d.index = 0;
Updating SSA information for statement _1752 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2342 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #547
Updating SSA information for statement _2343 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #548
Updating SSA information for statement _2344 = sendbufsize.part.5 (_1753);
Registering new PHI nodes in block #549
Registering new PHI nodes in block #550
Registering new PHI nodes in block #551
Updating SSA information for statement stdin.34_1754 = stdin;
Updating SSA information for statement _1756 = feof (stdin.34_1754);
Registering new PHI nodes in block #552
Updating SSA information for statement buffer_u8.35_1757 = buffer_u8;
Updating SSA information for statement the_bufsize.31_1758 = the_bufsize;
Updating SSA information for statement stdin.34_1760 = stdin;
Updating SSA information for statement fread (buffer_u8.35_1757, 1, the_bufsize.36_1759, stdin.34_1760);
Updating SSA information for statement buffer_u8.35_1762 = buffer_u8;
Updating SSA information for statement buffer_i16.42_1763 = buffer_i16;
Updating SSA information for statement the_bufsize.31_1764 = the_bufsize;
Updating SSA information for statement MEM[(struct ImaState *)&d + 4B] = d$previousValue_2079;
Updating SSA information for statement d = decode_ima_adpcm_u8_i16 (buffer_u8.35_1762, buffer_i16.42_1763, the_bufsize.31_1764, d); [return slot optimization]
Updating SSA information for statement d$4_1097 = MEM[(struct ImaState *)&d + 4B];
Updating SSA information for statement buffer_i16.42_1766 = buffer_i16;
Updating SSA information for statement the_bufsize.31_1767 = the_bufsize;
Updating SSA information for statement stdout.38_1770 = stdout;
Updating SSA information for statement fwrite (buffer_i16.42_1766, 2, _1769, stdout.38_1770);
Registering new PHI nodes in block #553
Updating SSA information for statement d ={v} {CLOBBER};
Registering new PHI nodes in block #537
Updating SSA information for statement _1727 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2338 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #538
Updating SSA information for statement _2339 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #539
Updating SSA information for statement _2340 = sendbufsize.part.5 (_1728);
Registering new PHI nodes in block #540
Registering new PHI nodes in block #541
Updating SSA information for statement d.index = 0;
Registering new PHI nodes in block #542
Updating SSA information for statement stdin.34_1730 = stdin;
Updating SSA information for statement _1732 = feof (stdin.34_1730);
Registering new PHI nodes in block #543
Updating SSA information for statement buffer_i16.42_1733 = buffer_i16;
Updating SSA information for statement the_bufsize.31_1734 = the_bufsize;
Updating SSA information for statement stdin.34_1736 = stdin;
Updating SSA information for statement fread (buffer_i16.42_1733, 2, the_bufsize.36_1735, stdin.34_1736);
Updating SSA information for statement buffer_i16.42_1738 = buffer_i16;
Updating SSA information for statement buffer_u8.35_1739 = buffer_u8;
Updating SSA information for statement the_bufsize.31_1740 = the_bufsize;
Updating SSA information for statement MEM[(struct ImaState *)&d + 4B] = d$previousValue_2110;
Updating SSA information for statement d = encode_ima_adpcm_i16_u8 (buffer_i16.42_1738, buffer_u8.35_1739, the_bufsize.31_1740, d); [return slot optimization]
Updating SSA information for statement d$4_2758 = MEM[(struct ImaState *)&d + 4B];
Updating SSA information for statement buffer_u8.35_1742 = buffer_u8;
Updating SSA information for statement the_bufsize.31_1743 = the_bufsize;
Updating SSA information for statement stdout.38_1746 = stdout;
Updating SSA information for statement fwrite (buffer_u8.35_1742, 1, _1745, stdout.38_1746);
Registering new PHI nodes in block #544
Updating SSA information for statement d ={v} {CLOBBER};
Registering new PHI nodes in block #501
Updating SSA information for statement fd_1622 = init_fifo (argc_261(D), argv_259(D));
Registering new PHI nodes in block #502
Registering new PHI nodes in block #504
Updating SSA information for statement _1624 = read_fifo_ctl (fd_1622, "%g %g\n", &low_cut, &high_cut);
Registering new PHI nodes in block #503
Updating SSA information for statement usleep (10000);
Registering new PHI nodes in block #505
Registering new PHI nodes in block #506
Updating SSA information for statement stderr.0_2331 = stderr;
Updating SSA information for statement fprintf (stderr.0_2331, "csdr: %s\n\n", "need more required parameters (transition_bw)");
Registering new PHI nodes in block #507
Registering new PHI nodes in block #508
Updating SSA information for statement stderr.0_2332 = stderr;
Updating SSA information for statement fprintf (stderr.0_2332, "csdr: %s\n\n", "need required parameters (low_cut, high_cut, transition_bw)");
Registering new PHI nodes in block #509
Updating SSA information for statement _1626 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1626, "%g", &low_cut);
Updating SSA information for statement _1628 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1628, "%g", &high_cut);
Registering new PHI nodes in block #510
Updating SSA information for statement _1630 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement sscanf (_1630, "%g", &transition_bw);
Registering new PHI nodes in block #511
Updating SSA information for statement _1632 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement window_1634 = firdes_get_window_from_string (_1632);
Registering new PHI nodes in block #512
Updating SSA information for statement stderr.58_1635 = stderr;
Updating SSA information for statement _1637 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_1635, "bandpass_fir_fft_cc: window = %s\n", _1637);
Registering new PHI nodes in block #513
Updating SSA information for statement transition_bw.175_1639 = transition_bw;
Updating SSA information for statement taps_length_1641 = firdes_filter_len (transition_bw.175_1639);
Updating SSA information for statement fft_size_1643 = next_pow2 (taps_length_1641);
Registering new PHI nodes in block #514
Registering new PHI nodes in block #515
Updating SSA information for statement stderr.58_1649 = stderr;
Updating SSA information for statement fprintf (stderr.58_1649, "bandpass_fir_fft_cc: (fft_size = %d) = (taps_length = %d) + (input_size = %d) - 1\n(overlap_length = %d) = taps_length - 1\n", fft_size_42, taps_length_1641, input_size_1647, overlap_length_1648);
Registering new PHI nodes in block #516
Updating SSA information for statement stderr.0_2333 = stderr;
Updating SSA information for statement fprintf (stderr.0_2333, "csdr: %s\n\n", "FFT size error.");
Registering new PHI nodes in block #517
Updating SSA information for statement _1652 = getbufsize ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2334 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #518
Updating SSA information for statement _2335 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #519
Updating SSA information for statement _2336 = sendbufsize.part.5 (_1652);
Registering new PHI nodes in block #520
Registering new PHI nodes in block #521
Updating SSA information for statement taps_1655 = calloc (8, fft_size.176_1653);
Updating SSA information for statement taps_fft_1658 = malloc (_1656);
Updating SSA information for statement plan_taps_1660 = make_fft_c2c (fft_size_42, taps_1655, taps_fft_1658, 1, 0);
Updating SSA information for statement input_1662 = fftwf_malloc (_1656);
Updating SSA information for statement input_fourier_1664 = fftwf_malloc (_1656);
Updating SSA information for statement plan_forward_1666 = make_fft_c2c (fft_size_42, input_1662, input_fourier_1664, 1, 1);
Updating SSA information for statement output_fourier_1668 = fftwf_malloc (_1656);
Updating SSA information for statement output_1_1670 = fftwf_malloc (_1656);
Updating SSA information for statement output_2_1672 = fftwf_malloc (_1656);
Updating SSA information for statement plan_inverse_1_1674 = make_fft_c2c (fft_size_42, output_fourier_1668, output_1_1670, 0, 1);
Updating SSA information for statement plan_inverse_2_1676 = make_fft_c2c (fft_size_42, output_fourier_1668, output_2_1672, 0, 1);
Updating SSA information for statement _1677 = plan_inverse_2_1676->output;
Registering new PHI nodes in block #522
Updating SSA information for statement *_1682 = 0.0;
Updating SSA information for statement *_1680 = 0.0;
Registering new PHI nodes in block #523
Registering new PHI nodes in block #524
Registering new PHI nodes in block #526
Registering new PHI nodes in block #525
Updating SSA information for statement *_1690 = 0.0;
Updating SSA information for statement *_1688 = 0.0;
Registering new PHI nodes in block #527
Registering new PHI nodes in block #528
Updating SSA information for statement stderr.58_1694 = stderr;
Updating SSA information for statement low_cut.180_1695 = low_cut;
Updating SSA information for statement high_cut.181_1697 = high_cut;
Updating SSA information for statement fprintf (stderr.58_1694, "bandpass_fir_fft_cc: filter initialized, low_cut = %g, high_cut = %g\n", _1696, _1698);
Updating SSA information for statement low_cut.180_1700 = low_cut;
Updating SSA information for statement high_cut.181_1701 = high_cut;
Updating SSA information for statement firdes_bandpass_c (taps_1655, taps_length_1641, low_cut.180_1700, high_cut.181_1701, window_41);
Updating SSA information for statement fft_execute (plan_taps_1660);
Registering new PHI nodes in block #529
Updating SSA information for statement stdin.34_1704 = stdin;
Updating SSA information for statement _1706 = feof (stdin.34_1704);
Registering new PHI nodes in block #530
Updating SSA information for statement stdin.34_1708 = stdin;
Updating SSA information for statement fread (input_1662, 8, input_size.182_1707, stdin.34_1708);
Registering new PHI nodes in block #531
Registering new PHI nodes in block #532
Updating SSA information for statement _1710 = iftmp.184_102->output;
Updating SSA information for statement apply_fir_fft_cc (plan_forward_1666, iftmp.183_2773, taps_fft_1658, last_overlap_1712, overlap_length_1648);
Updating SSA information for statement _1714 = iftmp.183_2773->output;
Updating SSA information for statement stdout.38_1715 = stdout;
Updating SSA information for statement fwrite (_1714, 8, input_size.182_1707, stdout.38_1715);
Updating SSA information for statement _1718 = read_fifo_ctl (fd_1622, "%g %g\n", &low_cut, &high_cut);
Registering new PHI nodes in block #533
Registering new PHI nodes in block #534
Registering new PHI nodes in block #535
Updating SSA information for statement low_cut ={v} {CLOBBER};
Updating SSA information for statement high_cut ={v} {CLOBBER};
Updating SSA information for statement transition_bw ={v} {CLOBBER};
Registering new PHI nodes in block #487
Registering new PHI nodes in block #488
Updating SSA information for statement stderr.0_2330 = stderr;
Updating SSA information for statement fprintf (stderr.0_2330, "csdr: %s\n\n", "need required parameters (fft_size, fft_cycles)");
Registering new PHI nodes in block #489
Updating SSA information for statement _1534 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1534, "%d", &fft_size);
Updating SSA information for statement _1536 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1536, "%d", &fft_cycles);
Registering new PHI nodes in block #490
Updating SSA information for statement _1538 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement iftmp.169_1539 = __builtin_strcmp (_1538, "--benchmark");
Registering new PHI nodes in block #491
Registering new PHI nodes in block #492
Updating SSA information for statement stderr.58_1540 = stderr;
Updating SSA information for statement fprintf (stderr.58_1540, "fft_benchmark: FFT library used: %s\n", "fftw3");
Updating SSA information for statement fft_size.170_1542 = fft_size;
Updating SSA information for statement input_1546 = fftwf_malloc (_1544);
Updating SSA information for statement fft_size.170_1547 = fft_size;
Updating SSA information for statement output_1551 = fftwf_malloc (_1549);
Updating SSA information for statement _1553 = time (0B);
Updating SSA information for statement srand (_1554);
Registering new PHI nodes in block #494
Updating SSA information for statement fft_size.170_1556 = fft_size;
Registering new PHI nodes in block #493
Updating SSA information for statement _1561 = rand ();
Updating SSA information for statement *_1559 = _1563;
Updating SSA information for statement _1568 = rand ();
Updating SSA information for statement *_1566 = _1570;
Registering new PHI nodes in block #495
Updating SSA information for statement stderr.58_1573 = stderr;
Updating SSA information for statement __builtin_fwrite ("fft_benchmark: initializing... ", 1, 31, stderr.58_1573);
Updating SSA information for statement clock_gettime (4, &start_time);
Updating SSA information for statement fft_size.170_1576 = fft_size;
Updating SSA information for statement plan_1578 = make_fft_c2c (fft_size.170_1576, input_1546, output_1551, 1, iftmp.168_100);
Updating SSA information for statement clock_gettime (4, &end_time);
Updating SSA information for statement stderr.58_1580 = stderr;
Updating SSA information for statement _1581 = end_time.tv_sec;
Updating SSA information for statement _1582 = start_time.tv_sec;
Updating SSA information for statement _1585 = end_time.tv_nsec;
Updating SSA information for statement _1586 = start_time.tv_nsec;
Updating SSA information for statement fprintf (stderr.58_1580, "done in %g seconds.\n", _1590);
Updating SSA information for statement clock_gettime (4, &start_time);
Registering new PHI nodes in block #497
Updating SSA information for statement fft_cycles.173_1593 = fft_cycles;
Registering new PHI nodes in block #496
Updating SSA information for statement fft_execute (plan_1578);
Registering new PHI nodes in block #498
Updating SSA information for statement clock_gettime (4, &end_time);
Updating SSA information for statement _1597 = end_time.tv_sec;
Updating SSA information for statement _1598 = start_time.tv_sec;
Updating SSA information for statement _1601 = end_time.tv_nsec;
Updating SSA information for statement _1602 = start_time.tv_nsec;
Updating SSA information for statement stderr.58_1608 = stderr;
Updating SSA information for statement fft_cycles.173_1609 = fft_cycles;
Updating SSA information for statement fft_size.170_1610 = fft_size;
Updating SSA information for statement fprintf (stderr.58_1608, "fft_benchmark: %d transforms of %d processed in %g seconds, %g seconds each.\n", fft_cycles.173_1609, fft_size.170_1610, _1611, _1614);
Registering new PHI nodes in block #499
Updating SSA information for statement fft_size ={v} {CLOBBER};
Updating SSA information for statement fft_cycles ={v} {CLOBBER};
Updating SSA information for statement start_time ={v} {CLOBBER};
Updating SSA information for statement end_time ={v} {CLOBBER};
Registering new PHI nodes in block #471
Registering new PHI nodes in block #472
Updating SSA information for statement stderr.0_2327 = stderr;
Updating SSA information for statement fprintf (stderr.0_2327, "csdr: %s\n\n", "need required parameters (fft_size)");
Registering new PHI nodes in block #473
Updating SSA information for statement _1486 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1486, "%d", &fft_size);
Updating SSA information for statement fft_size.162_1488 = fft_size;
Updating SSA information for statement _1491 = getbufsize ();
Registering new PHI nodes in block #474
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2328 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #475
Updating SSA information for statement sendbufsize.part.5 (real_data_size_1489);
Registering new PHI nodes in block #476
Updating SSA information for statement input_buffer_cwa_1495 = malloc (_1493);
Updating SSA information for statement temp_buffer_cwa_1498 = malloc (_1496);
Updating SSA information for statement output_buffer_cwa_1502 = malloc (_1500);
Updating SSA information for statement d.index = 0;
Registering new PHI nodes in block #477
Updating SSA information for statement stdin.34_1504 = stdin;
Updating SSA information for statement _1506 = feof (stdin.34_1504);
Registering new PHI nodes in block #478
Updating SSA information for statement fft_size.162_1508 = fft_size;
Updating SSA information for statement stdin.34_1510 = stdin;
Updating SSA information for statement fread (_1507, 4, fft_size.164_1509, stdin.34_1510);
Registering new PHI nodes in block #479
Updating SSA information for statement _1515 = MEM[(float *)input_buffer_cwa_1495 + 40B];
Updating SSA information for statement *_1514 = _1515;
Registering new PHI nodes in block #480
Registering new PHI nodes in block #481
Registering new PHI nodes in block #483
Registering new PHI nodes in block #482
Updating SSA information for statement _1523 = *_1522;
Updating SSA information for statement *_1520 = _1525;
Registering new PHI nodes in block #484
Updating SSA information for statement MEM[(struct ImaState *)&d + 4B] = 0;
Updating SSA information for statement encode_ima_adpcm_i16_u8 (temp_buffer_cwa_1498, output_buffer_cwa_1502, real_data_size_1489, d);
Updating SSA information for statement stdout.38_1529 = stdout;
Updating SSA information for statement fwrite (output_buffer_cwa_1502, 1, _1500, stdout.38_1529);
Registering new PHI nodes in block #485
Updating SSA information for statement fft_size ={v} {CLOBBER};
Updating SSA information for statement d ={v} {CLOBBER};
Registering new PHI nodes in block #461
Registering new PHI nodes in block #462
Updating SSA information for statement stderr.0_2324 = stderr;
Updating SSA information for statement fprintf (stderr.0_2324, "csdr: %s\n\n", "need required parameters (fft_size)");
Registering new PHI nodes in block #463
Updating SSA information for statement _1448 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1448, "%d", &fft_size);
Updating SSA information for statement _1451 = getbufsize ();
Registering new PHI nodes in block #464
Updating SSA information for statement fft_size.159_1452 = fft_size;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2325 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #465
Updating SSA information for statement sendbufsize.part.5 (fft_size.159_1452);
Registering new PHI nodes in block #466
Updating SSA information for statement fft_size.159_1453 = fft_size;
Updating SSA information for statement input_buffer_s1_1458 = malloc (_1456);
Updating SSA information for statement input_buffer_s2_1460 = malloc (_1456);
Registering new PHI nodes in block #467
Updating SSA information for statement stdin.34_1461 = stdin;
Updating SSA information for statement _1463 = feof (stdin.34_1461);
Registering new PHI nodes in block #468
Updating SSA information for statement fft_size.159_1464 = fft_size;
Updating SSA information for statement stdin.34_1467 = stdin;
Updating SSA information for statement fread (input_buffer_s1_1458, 4, _1466, stdin.34_1467);
Updating SSA information for statement fft_size.159_1469 = fft_size;
Updating SSA information for statement stdin.34_1472 = stdin;
Updating SSA information for statement fread (input_buffer_s2_1460, 4, _1471, stdin.34_1472);
Updating SSA information for statement fft_size.159_1474 = fft_size;
Updating SSA information for statement stdout.38_1477 = stdout;
Updating SSA information for statement fwrite (input_buffer_s2_1460, 4, _1476, stdout.38_1477);
Updating SSA information for statement fft_size.159_1479 = fft_size;
Updating SSA information for statement stdout.38_1482 = stdout;
Updating SSA information for statement fwrite (input_buffer_s1_1458, 4, _1481, stdout.38_1482);
Registering new PHI nodes in block #469
Updating SSA information for statement fft_size ={v} {CLOBBER};
Registering new PHI nodes in block #450
Updating SSA information for statement add_db = 0.0;
Registering new PHI nodes in block #451
Updating SSA information for statement _1424 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1424, "%g", &add_db);
Registering new PHI nodes in block #452
Updating SSA information for statement _1427 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2320 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #453
Updating SSA information for statement _2321 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #454
Updating SSA information for statement _2322 = sendbufsize.part.5 (_1427);
Registering new PHI nodes in block #455
Registering new PHI nodes in block #456
Registering new PHI nodes in block #457
Updating SSA information for statement stdin.34_1428 = stdin;
Updating SSA information for statement _1430 = feof (stdin.34_1428);
Registering new PHI nodes in block #458
Updating SSA information for statement input_buffer.40_1431 = input_buffer;
Updating SSA information for statement the_bufsize.31_1432 = the_bufsize;
Updating SSA information for statement stdin.34_1434 = stdin;
Updating SSA information for statement fread (input_buffer.40_1431, 8, the_bufsize.36_1433, stdin.34_1434);
Updating SSA information for statement input_buffer.40_1436 = input_buffer;
Updating SSA information for statement output_buffer.37_1437 = output_buffer;
Updating SSA information for statement the_bufsize.31_1438 = the_bufsize;
Updating SSA information for statement add_db.157_1439 = add_db;
Updating SSA information for statement logpower_cf (input_buffer.40_1436, output_buffer.37_1437, the_bufsize.31_1438, add_db.157_1439);
Updating SSA information for statement output_buffer.37_1441 = output_buffer;
Updating SSA information for statement the_bufsize.31_1442 = the_bufsize;
Updating SSA information for statement stdout.38_1444 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_1441, 4, the_bufsize.36_1443, stdout.38_1444);
Registering new PHI nodes in block #459
Updating SSA information for statement add_db ={v} {CLOBBER};
Registering new PHI nodes in block #413
Registering new PHI nodes in block #414
Updating SSA information for statement stderr.0_2316 = stderr;
Updating SSA information for statement fprintf (stderr.0_2316, "csdr: %s\n\n", "need required parameters (fft_size, out_of_every_n_samples)");
Registering new PHI nodes in block #415
Updating SSA information for statement _1295 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1295, "%d", &fft_size);
Updating SSA information for statement fft_size.142_1297 = fft_size;
Updating SSA information for statement _1299 = log2n (fft_size.142_1297);
Registering new PHI nodes in block #416
Updating SSA information for statement stderr.0_2317 = stderr;
Updating SSA information for statement fprintf (stderr.0_2317, "csdr: %s\n\n", "fft_size should be power of 2");
Registering new PHI nodes in block #417
Updating SSA information for statement _1300 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1300, "%d", &every_n_samples);
Registering new PHI nodes in block #418
Updating SSA information for statement _1302 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement window_1304 = firdes_get_window_from_string (_1302);
Registering new PHI nodes in block #419
Updating SSA information for statement _1305 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement iftmp.143_1306 = __builtin_strcmp ("--benchmark", _1305);
Updating SSA information for statement iftmp.144_1309 = __builtin_strcmp ("--octave", _1305);
Registering new PHI nodes in block #420
Updating SSA information for statement _1312 = MEM[(char * *)argv_259(D) + 24B];
Updating SSA information for statement iftmp.145_1313 = __builtin_strcmp ("--benchmark", _1312);
Updating SSA information for statement iftmp.146_1317 = __builtin_strcmp ("--octave", _1312);
Registering new PHI nodes in block #421
Updating SSA information for statement _1322 = initialize_buffers ();
Registering new PHI nodes in block #422
Updating SSA information for statement fft_size.142_1323 = fft_size;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2318 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #423
Updating SSA information for statement sendbufsize.part.5 (fft_size.142_1323);
Registering new PHI nodes in block #424
Updating SSA information for statement fft_size.142_1324 = fft_size;
Updating SSA information for statement input_1328 = fftwf_malloc (_1326);
Updating SSA information for statement fft_size.142_1329 = fft_size;
Updating SSA information for statement windowed_1333 = fftwf_malloc (_1331);
Updating SSA information for statement fft_size.142_1334 = fft_size;
Updating SSA information for statement output_1338 = fftwf_malloc (_1336);
Registering new PHI nodes in block #693
Updating SSA information for statement fft_size.142_2754 = fft_size;
Updating SSA information for statement plan_2756 = make_fft_c2c (fft_size.142_2754, windowed_1333, output_1338, 1, 0);
Registering new PHI nodes in block #425
Updating SSA information for statement stderr.58_1339 = stderr;
Updating SSA information for statement __builtin_fwrite ("fft_cc: benchmarking...", 1, 23, stderr.58_1339);
Updating SSA information for statement fft_size.142_2750 = fft_size;
Updating SSA information for statement plan_2752 = make_fft_c2c (fft_size.142_2750, windowed_1333, output_1338, 1, 1);
Updating SSA information for statement stderr.58_1344 = stderr;
Updating SSA information for statement __builtin_fwrite (" done\n", 1, 6, stderr.58_1344);
Registering new PHI nodes in block #426
Registering new PHI nodes in block #427
Updating SSA information for statement fft_size.142_1346 = fft_size;
Updating SSA information for statement printf ("setenv(\"GNUTERM\",\"X11 noraise\");y=zeros(1,%d);semilogy(y,\"ydatasource\",\"y\");\n", fft_size.142_1346);
Registering new PHI nodes in block #428
Registering new PHI nodes in block #430
Updating SSA information for statement stdin.34_1348 = stdin;
Updating SSA information for statement _1350 = feof (stdin.34_1348);
Registering new PHI nodes in block #431
Updating SSA information for statement every_n_samples.148_1351 = every_n_samples;
Updating SSA information for statement fft_size.142_1352 = fft_size;
Registering new PHI nodes in block #433
Updating SSA information for statement stdin.34_1354 = stdin;
Updating SSA information for statement fread (input_1328, 8, fft_size.149_1353, stdin.34_1354);
Updating SSA information for statement every_n_samples.148_1356 = every_n_samples;
Updating SSA information for statement fft_size.142_1357 = fft_size;
Registering new PHI nodes in block #435
Registering new PHI nodes in block #434
Updating SSA information for statement temp_f.77_1359 = temp_f;
Updating SSA information for statement the_bufsize.31_1360 = the_bufsize;
Updating SSA information for statement stdin.34_1363 = stdin;
Updating SSA information for statement fread (temp_f.77_1359, 8, _1362, stdin.34_1363);
Updating SSA information for statement the_bufsize.31_1365 = the_bufsize;
Registering new PHI nodes in block #432
Registering new PHI nodes in block #437
Registering new PHI nodes in block #436
Updating SSA information for statement *_1370 = *_1374;
Registering new PHI nodes in block #438
Updating SSA information for statement stdin.34_1382 = stdin;
Updating SSA information for statement fread (_1381, 8, every_n_samples.152_1378, stdin.34_1382);
Registering new PHI nodes in block #439
Updating SSA information for statement fft_size.142_1384 = fft_size;
Updating SSA information for statement apply_window_c (input_1328, windowed_1333, fft_size.142_1384, window_2765);
Updating SSA information for statement fft_execute (plan_2787);
Registering new PHI nodes in block #440
Updating SSA information for statement printf ("fftdata=[");
Updating SSA information for statement fft_size.142_1392 = fft_size;
Registering new PHI nodes in block #442
Updating SSA information for statement fft_size.142_1394 = fft_size;
Registering new PHI nodes in block #441
Updating SSA information for statement _1398 = *_1397;
Updating SSA information for statement _1402 = *_1401;
Updating SSA information for statement printf ("(%g)+(%g)*i ", _1399, _1403);
Registering new PHI nodes in block #443
Registering new PHI nodes in block #445
Updating SSA information for statement fft_size.142_1406 = fft_size;
Registering new PHI nodes in block #444
Updating SSA information for statement _1411 = *_1410;
Updating SSA information for statement _1415 = *_1414;
Updating SSA information for statement printf ("(%g)+(%g)*i ", _1412, _1416);
Registering new PHI nodes in block #446
Updating SSA information for statement __builtin_puts (&"];\ny=abs(fftdata);\nrefreshdata;"[0]);
Registering new PHI nodes in block #447
Updating SSA information for statement fft_size.142_1387 = fft_size;
Updating SSA information for statement stdout.38_1389 = stdout;
Updating SSA information for statement fwrite (output_1338, 8, fft_size.149_1388, stdout.38_1389);
Registering new PHI nodes in block #429
Registering new PHI nodes in block #448
Updating SSA information for statement fft_size ={v} {CLOBBER};
Updating SSA information for statement every_n_samples ={v} {CLOBBER};
Registering new PHI nodes in block #394
Registering new PHI nodes in block #395
Updating SSA information for statement stderr.0_2314 = stderr;
Updating SSA information for statement fprintf (stderr.0_2314, "csdr: %s\n\n", "need required parameters (rate)");
Registering new PHI nodes in block #396
Updating SSA information for statement _1219 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1219, "%g", &rate);
Updating SSA information for statement transition_bw = 2.999999932944774627685546875e-2;
Registering new PHI nodes in block #397
Updating SSA information for statement _1222 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1222, "%g", &transition_bw);
Registering new PHI nodes in block #398
Updating SSA information for statement _1224 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement window_1226 = firdes_get_window_from_string (_1224);
Registering new PHI nodes in block #399
Updating SSA information for statement stderr.58_1227 = stderr;
Updating SSA information for statement _1229 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_1227, "fractional_decimator_ff: window = %s\n", _1229);
Registering new PHI nodes in block #400
Updating SSA information for statement _1232 = initialize_buffers ();
Registering new PHI nodes in block #401
Updating SSA information for statement the_bufsize.31_1233 = the_bufsize;
Updating SSA information for statement rate.138_1235 = rate;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2315 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #402
Updating SSA information for statement sendbufsize.part.5 (_1237);
Registering new PHI nodes in block #403
Updating SSA information for statement rate.138_1238 = rate;
Registering new PHI nodes in block #405
Updating SSA information for statement transition_bw.139_1241 = transition_bw;
Updating SSA information for statement taps_length_1243 = firdes_filter_len (transition_bw.139_1241);
Updating SSA information for statement stderr.58_1244 = stderr;
Updating SSA information for statement fprintf (stderr.58_1244, "fractional_decimator_ff: taps_length = %d\n", taps_length_1243);
Updating SSA information for statement taps_1249 = malloc (_1247);
Updating SSA information for statement rate.138_1250 = rate;
Updating SSA information for statement transition_bw.139_1251 = transition_bw;
Updating SSA information for statement firdes_lowpass_f (taps_1249, taps_length_1243, _1255, window_27);
Registering new PHI nodes in block #406
Updating SSA information for statement stdin.34_1257 = stdin;
Updating SSA information for statement _1259 = feof (stdin.34_1257);
Registering new PHI nodes in block #407
Updating SSA information for statement _1260 = d.input_processed;
Registering new PHI nodes in block #408
Updating SSA information for statement the_bufsize.31_1261 = the_bufsize;
Updating SSA information for statement d.input_processed = the_bufsize.31_1261;
Registering new PHI nodes in block #409
Updating SSA information for statement input_buffer.40_1263 = input_buffer;
Updating SSA information for statement the_bufsize.31_1267 = the_bufsize;
Updating SSA information for statement memcpy (input_buffer.40_1263, _1266, _1270);
Registering new PHI nodes in block #410
Updating SSA information for statement input_buffer.40_1272 = input_buffer;
Updating SSA information for statement the_bufsize.31_1273 = the_bufsize;
Updating SSA information for statement _1274 = d.input_processed;
Updating SSA information for statement stdin.34_1280 = stdin;
Updating SSA information for statement fread (_1278, 4, _1279, stdin.34_1280);
Updating SSA information for statement input_buffer.40_1282 = input_buffer;
Updating SSA information for statement output_buffer.37_1283 = output_buffer;
Updating SSA information for statement the_bufsize.31_1284 = the_bufsize;
Updating SSA information for statement rate.138_1285 = rate;
Updating SSA information for statement d = fractional_decimator_ff (input_buffer.40_1282, output_buffer.37_1283, the_bufsize.31_1284, rate.138_1285, taps_1249, taps_length_1243, d);
Updating SSA information for statement output_buffer.37_1287 = output_buffer;
Updating SSA information for statement _1288 = d.output_size;
Updating SSA information for statement stdout.38_1290 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_1287, 4, _1289, stdout.38_1290);
Registering new PHI nodes in block #404
Updating SSA information for statement the_bufsize.31_1239 = the_bufsize;
Updating SSA information for statement clone_ (the_bufsize.31_1239);
Registering new PHI nodes in block #411
Updating SSA information for statement rate ={v} {CLOBBER};
Updating SSA information for statement transition_bw ={v} {CLOBBER};
Registering new PHI nodes in block #370
Registering new PHI nodes in block #371
Updating SSA information for statement stderr.0_2311 = stderr;
Updating SSA information for statement fprintf (stderr.0_2311, "csdr: %s\n\n", "need required parameters (interpolation, decimation)");
Registering new PHI nodes in block #372
Updating SSA information for statement _2112 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_2112, "%d", &interpolation);
Updating SSA information for statement _2114 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_2114, "%d", &decimation);
Updating SSA information for statement transition_bw = 5.00000007450580596923828125e-2;
Registering new PHI nodes in block #373
Updating SSA information for statement _2117 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement sscanf (_2117, "%g", &transition_bw);
Registering new PHI nodes in block #374
Updating SSA information for statement _2119 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement window_2121 = firdes_get_window_from_string (_2119);
Registering new PHI nodes in block #375
Updating SSA information for statement stderr.58_2122 = stderr;
Updating SSA information for statement _2124 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_2122, "rational_resampler_ff: window = %s\n", _2124);
Registering new PHI nodes in block #376
Registering new PHI nodes in block #377
Updating SSA information for statement stderr.58_2126 = stderr;
Updating SSA information for statement __builtin_fwrite ("note: suboptimal rational resampler chosen.\n", 1, 44, stderr.58_2126);
Registering new PHI nodes in block #378
Updating SSA information for statement _2129 = initialize_buffers ();
Registering new PHI nodes in block #379
Updating SSA information for statement decimation.129_2130 = decimation;
Registering new PHI nodes in block #380
Updating SSA information for statement interpolation.130_2131 = interpolation;
Registering new PHI nodes in block #381
Updating SSA information for statement the_bufsize.31_2132 = the_bufsize;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2312 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #382
Updating SSA information for statement sendbufsize.part.5 (the_bufsize.31_2132);
Registering new PHI nodes in block #383
Updating SSA information for statement the_bufsize.31_2133 = the_bufsize;
Updating SSA information for statement clone_ (the_bufsize.31_2133);
Registering new PHI nodes in block #384
Updating SSA information for statement the_bufsize.31_2135 = the_bufsize;
Updating SSA information for statement interpolation.130_2136 = interpolation;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2313 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #385
Updating SSA information for statement sendbufsize.part.5 (resampler_output_buffer_size_2138);
Registering new PHI nodes in block #386
Updating SSA information for statement resampler_output_buffer_2142 = malloc (_2140);
Updating SSA information for statement transition_bw.135_2143 = transition_bw;
Updating SSA information for statement taps_length_2145 = firdes_filter_len (transition_bw.135_2143);
Updating SSA information for statement taps_2149 = malloc (_2147);
Updating SSA information for statement interpolation.130_2150 = interpolation;
Updating SSA information for statement decimation.129_2151 = decimation;
Updating SSA information for statement rational_resampler_get_lowpass_f (taps_2149, taps_length_2145, interpolation.130_2150, decimation.129_2151, window_26);
Registering new PHI nodes in block #387
Updating SSA information for statement stdin.34_2153 = stdin;
Updating SSA information for statement _2155 = feof (stdin.34_2153);
Registering new PHI nodes in block #388
Updating SSA information for statement _2156 = d.input_processed;
Registering new PHI nodes in block #389
Updating SSA information for statement the_bufsize.31_2157 = the_bufsize;
Updating SSA information for statement d.input_processed = the_bufsize.31_2157;
Registering new PHI nodes in block #390
Updating SSA information for statement input_buffer.40_2159 = input_buffer;
Updating SSA information for statement the_bufsize.31_2163 = the_bufsize;
Updating SSA information for statement memcpy (input_buffer.40_2159, _2162, _2166);
Registering new PHI nodes in block #391
Updating SSA information for statement input_buffer.40_2168 = input_buffer;
Updating SSA information for statement the_bufsize.31_2169 = the_bufsize;
Updating SSA information for statement _2170 = d.input_processed;
Updating SSA information for statement stdin.34_2176 = stdin;
Updating SSA information for statement fread (_2174, 4, _2175, stdin.34_2176);
Updating SSA information for statement input_buffer.40_2178 = input_buffer;
Updating SSA information for statement the_bufsize.31_2179 = the_bufsize;
Updating SSA information for statement interpolation.130_2180 = interpolation;
Updating SSA information for statement decimation.129_2181 = decimation;
Updating SSA information for statement _2182 = d.last_taps_delay;
Updating SSA information for statement d = rational_resampler_ff (input_buffer.40_2178, resampler_output_buffer_2142, the_bufsize.31_2179, interpolation.130_2180, decimation.129_2181, taps_2149, taps_length_2145, _2182);
Updating SSA information for statement _2184 = d.output_size;
Updating SSA information for statement stdout.38_2186 = stdout;
Updating SSA information for statement fwrite (resampler_output_buffer_2142, 4, _2185, stdout.38_2186);
Registering new PHI nodes in block #392
Updating SSA information for statement interpolation ={v} {CLOBBER};
Updating SSA information for statement decimation ={v} {CLOBBER};
Updating SSA information for statement transition_bw ={v} {CLOBBER};
Registering new PHI nodes in block #360
Updating SSA information for statement input.input_size = 1024;
Registering new PHI nodes in block #361
Updating SSA information for statement _1175 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1175, "%d", &input.input_size);
Updating SSA information for statement getbufsize ();
Updating SSA information for statement _1178 = input.input_size;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2310 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #696
Updating SSA information for statement getbufsize ();
Updating SSA information for statement _2517 = input.input_size;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2427 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #695
Updating SSA information for statement input.reference = 1.0e+0;
Registering new PHI nodes in block #362
Updating SSA information for statement sendbufsize.part.5 (_1192);
Registering new PHI nodes in block #363
Updating SSA information for statement input.reference = 1.0e+0;
Registering new PHI nodes in block #364
Updating SSA information for statement _1180 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1180, "%g", &input.reference);
Registering new PHI nodes in block #365
Updating SSA information for statement _1182 = input.input_size;
Updating SSA information for statement _1185 = calloc (_1183, 4);
Updating SSA information for statement input.buffer_1 = _1185;
Updating SSA information for statement _1190 = calloc (_1183, 4);
Updating SSA information for statement input.buffer_2 = _1190;
Updating SSA information for statement _1196 = malloc (_1194);
Updating SSA information for statement input.buffer_input = _1196;
Updating SSA information for statement agc_output_buffer_1202 = malloc (_1194);
Registering new PHI nodes in block #366
Updating SSA information for statement stdin.34_1203 = stdin;
Updating SSA information for statement _1205 = feof (stdin.34_1203);
Registering new PHI nodes in block #367
Updating SSA information for statement _1206 = input.buffer_input;
Updating SSA information for statement _1207 = input.input_size;
Updating SSA information for statement stdin.34_1209 = stdin;
Updating SSA information for statement fread (_1206, 4, _1208, stdin.34_1209);
Updating SSA information for statement fastagc_ff (&input, agc_output_buffer_1202);
Updating SSA information for statement _1212 = input.input_size;
Updating SSA information for statement stdout.38_1214 = stdout;
Updating SSA information for statement fwrite (agc_output_buffer_1202, 4, _1213, stdout.38_1214);
Registering new PHI nodes in block #343
Updating SSA information for statement hang_time = 200;
Registering new PHI nodes in block #344
Updating SSA information for statement _1118 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1118, "%hd", &hang_time);
Updating SSA information for statement reference = 2.0000000298023223876953125e-1;
Registering new PHI nodes in block #345
Updating SSA information for statement _1121 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1121, "%g", &reference);
Updating SSA information for statement attack_rate = 9.99999977648258209228515625e-3;
Registering new PHI nodes in block #346
Updating SSA information for statement _1124 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement sscanf (_1124, "%g", &attack_rate);
Updating SSA information for statement decay_rate = 9.99999974737875163555145263671875e-5;
Registering new PHI nodes in block #347
Updating SSA information for statement _1127 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement sscanf (_1127, "%g", &decay_rate);
Updating SSA information for statement max_gain = 6.5536e+4;
Registering new PHI nodes in block #348
Updating SSA information for statement _1130 = MEM[(char * *)argv_259(D) + 24B];
Updating SSA information for statement sscanf (_1130, "%g", &max_gain);
Updating SSA information for statement attack_wait = 0;
Registering new PHI nodes in block #349
Updating SSA information for statement _1133 = MEM[(char * *)argv_259(D) + 28B];
Updating SSA information for statement sscanf (_1133, "%hd", &attack_wait);
Updating SSA information for statement filter_alpha = 9.99000012874603271484375e-1;
Registering new PHI nodes in block #350
Updating SSA information for statement _1136 = MEM[(char * *)argv_259(D) + 32B];
Updating SSA information for statement sscanf (_1136, "%g", &filter_alpha);
Registering new PHI nodes in block #687
Updating SSA information for statement reference = 2.0000000298023223876953125e-1;
Registering new PHI nodes in block #688
Updating SSA information for statement attack_rate = 9.99999977648258209228515625e-3;
Registering new PHI nodes in block #689
Updating SSA information for statement decay_rate = 9.99999974737875163555145263671875e-5;
Registering new PHI nodes in block #690
Updating SSA information for statement max_gain = 6.5536e+4;
Registering new PHI nodes in block #691
Updating SSA information for statement attack_wait = 0;
Registering new PHI nodes in block #692
Updating SSA information for statement filter_alpha = 9.99000012874603271484375e-1;
Registering new PHI nodes in block #351
Updating SSA information for statement _1139 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2306 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #352
Updating SSA information for statement _2307 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #353
Updating SSA information for statement _2308 = sendbufsize.part.5 (_1139);
Registering new PHI nodes in block #354
Registering new PHI nodes in block #355
Registering new PHI nodes in block #356
Updating SSA information for statement stdin.34_1140 = stdin;
Updating SSA information for statement _1142 = feof (stdin.34_1140);
Registering new PHI nodes in block #357
Updating SSA information for statement input_buffer.40_1143 = input_buffer;
Updating SSA information for statement the_bufsize.31_1144 = the_bufsize;
Updating SSA information for statement stdin.34_1146 = stdin;
Updating SSA information for statement fread (input_buffer.40_1143, 4, the_bufsize.36_1145, stdin.34_1146);
Updating SSA information for statement input_buffer.40_1148 = input_buffer;
Updating SSA information for statement output_buffer.37_1149 = output_buffer;
Updating SSA information for statement the_bufsize.31_1150 = the_bufsize;
Updating SSA information for statement reference.119_1151 = reference;
Updating SSA information for statement attack_rate.120_1152 = attack_rate;
Updating SSA information for statement decay_rate.121_1153 = decay_rate;
Updating SSA information for statement max_gain.122_1154 = max_gain;
Updating SSA information for statement hang_time.123_1155 = hang_time;
Updating SSA information for statement attack_wait.124_1156 = attack_wait;
Updating SSA information for statement filter_alpha.125_1157 = filter_alpha;
Updating SSA information for statement last_gain_1159 = agc_ff (input_buffer.40_1148, output_buffer.37_1149, the_bufsize.31_1150, reference.119_1151, attack_rate.120_1152, decay_rate.121_1153, max_gain.122_1154, hang_time.123_1155, attack_wait.124_1156, filter_alpha.125_1157, last_gain_25);
Updating SSA information for statement output_buffer.37_1160 = output_buffer;
Updating SSA information for statement the_bufsize.31_1161 = the_bufsize;
Updating SSA information for statement stdout.38_1163 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_1160, 4, the_bufsize.36_1162, stdout.38_1163);
Registering new PHI nodes in block #358
Updating SSA information for statement hang_time ={v} {CLOBBER};
Updating SSA information for statement reference ={v} {CLOBBER};
Updating SSA information for statement attack_rate ={v} {CLOBBER};
Updating SSA information for statement decay_rate ={v} {CLOBBER};
Updating SSA information for statement max_gain ={v} {CLOBBER};
Updating SSA information for statement attack_wait ={v} {CLOBBER};
Updating SSA information for statement filter_alpha ={v} {CLOBBER};
Registering new PHI nodes in block #325
Registering new PHI nodes in block #326
Updating SSA information for statement stderr.0_2304 = stderr;
Updating SSA information for statement fprintf (stderr.0_2304, "csdr: %s\n\n", "need required parameters (low_cut, high_cut, length)");
Registering new PHI nodes in block #327
Updating SSA information for statement _1062 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1062, "%g", &low_cut);
Updating SSA information for statement _1064 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1064, "%g", &high_cut);
Updating SSA information for statement _1066 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement sscanf (_1066, "%d", &length);
Updating SSA information for statement length.110_1068 = length;
Registering new PHI nodes in block #328
Updating SSA information for statement stderr.0_2305 = stderr;
Updating SSA information for statement fprintf (stderr.0_2305, "csdr: %s\n\n", "number of symmetric FIR filter taps should be odd");
Registering new PHI nodes in block #329
Registering new PHI nodes in block #330
Updating SSA information for statement _1071 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement window_1073 = firdes_get_window_from_string (_1071);
Registering new PHI nodes in block #332
Updating SSA information for statement _1078 = MEM[(char * *)argv_259(D) + 24B];
Updating SSA information for statement iftmp.113_1079 = __builtin_strcmp ("--octave", _1078);
Registering new PHI nodes in block #685
Updating SSA information for statement length.110_2712 = length;
Updating SSA information for statement taps_2716 = malloc (_2714);
Updating SSA information for statement low_cut.115_2717 = low_cut;
Updating SSA information for statement high_cut.116_2718 = high_cut;
Updating SSA information for statement firdes_bandpass_c (taps_2716, length.110_2712, low_cut.115_2717, high_cut.116_2718, window_1073);
Updating SSA information for statement printf ("taps=[");
Registering new PHI nodes in block #686
Updating SSA information for statement length.110_2721 = length;
Updating SSA information for statement taps_2725 = malloc (_2723);
Updating SSA information for statement low_cut.115_2726 = low_cut;
Updating SSA information for statement high_cut.116_2727 = high_cut;
Updating SSA information for statement firdes_bandpass_c (taps_2725, length.110_2721, low_cut.115_2726, high_cut.116_2727, window_1073);
Registering new PHI nodes in block #331
Updating SSA information for statement stderr.58_1074 = stderr;
Updating SSA information for statement _1076 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_1074, "firdes_bandpass_c: window = %s\n", _1076);
Updating SSA information for statement length.110_1081 = length;
Updating SSA information for statement taps_1085 = malloc (_1083);
Updating SSA information for statement low_cut.115_1087 = low_cut;
Updating SSA information for statement high_cut.116_1088 = high_cut;
Updating SSA information for statement firdes_bandpass_c (taps_1085, length.110_1081, low_cut.115_1087, high_cut.116_1088, 2);
Registering new PHI nodes in block #333
Registering new PHI nodes in block #335
Updating SSA information for statement length.110_1091 = length;
Registering new PHI nodes in block #334
Updating SSA information for statement _1095 = *_1094;
Updating SSA information for statement _1101 = *_1100;
Updating SSA information for statement printf ("(%g)+(%g)*i ", _1096, _1102);
Registering new PHI nodes in block #336
Registering new PHI nodes in block #338
Registering new PHI nodes in block #337
Registering new PHI nodes in block #339
Registering new PHI nodes in block #340
Updating SSA information for statement printf ("];figure(\"Position\",[0 0 1000 1000]);fser=fft([taps,zeros(1,%d)]);ampl=abs(fser).^2;halfindex=floor(1+size(ampl)(2)/2);\namplrev=[ampl(halfindex:end),ampl(1:halfindex)];\nsubplot(2,1,1);plot(amplrev);\nsubplot(2,1,2);plot(arg(fser));\n#figure(2);freqz(taps);\n#figur(3);plot3(taps);\n", _1108);
Updating SSA information for statement stdout.38_1110 = stdout;
Updating SSA information for statement fflush (stdout.38_1110);
Updating SSA information for statement stdin.219_2191 = stdin;
Updating SSA information for statement _IO_getc (stdin.219_2191);
Registering new PHI nodes in block #341
Updating SSA information for statement low_cut ={v} {CLOBBER};
Updating SSA information for statement high_cut ={v} {CLOBBER};
Updating SSA information for statement length ={v} {CLOBBER};
Registering new PHI nodes in block #310
Registering new PHI nodes in block #311
Updating SSA information for statement stderr.0_2302 = stderr;
Updating SSA information for statement fprintf (stderr.0_2302, "csdr: %s\n\n", "need required parameters (cutoff_rate, length)");
Registering new PHI nodes in block #312
Updating SSA information for statement _1021 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_1021, "%g", &cutoff_rate);
Updating SSA information for statement _1023 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_1023, "%d", &length);
Updating SSA information for statement length.102_1025 = length;
Registering new PHI nodes in block #313
Updating SSA information for statement stderr.0_2303 = stderr;
Updating SSA information for statement fprintf (stderr.0_2303, "csdr: %s\n\n", "number of symmetric FIR filter taps should be odd");
Registering new PHI nodes in block #314
Registering new PHI nodes in block #315
Updating SSA information for statement _1028 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement window_1030 = firdes_get_window_from_string (_1028);
Registering new PHI nodes in block #317
Updating SSA information for statement _1035 = MEM[(char * *)argv_259(D) + 20B];
Updating SSA information for statement iftmp.105_1036 = __builtin_strcmp ("--octave", _1035);
Registering new PHI nodes in block #683
Updating SSA information for statement length.102_2692 = length;
Updating SSA information for statement taps_2696 = malloc (_2694);
Updating SSA information for statement cutoff_rate.107_2697 = cutoff_rate;
Updating SSA information for statement firdes_lowpass_f (taps_2696, length.102_2692, cutoff_rate.107_2697, window_1030);
Updating SSA information for statement printf ("taps=[");
Registering new PHI nodes in block #684
Updating SSA information for statement length.102_2700 = length;
Updating SSA information for statement taps_2704 = malloc (_2702);
Updating SSA information for statement cutoff_rate.107_2705 = cutoff_rate;
Updating SSA information for statement firdes_lowpass_f (taps_2704, length.102_2700, cutoff_rate.107_2705, window_1030);
Registering new PHI nodes in block #316
Updating SSA information for statement stderr.58_1031 = stderr;
Updating SSA information for statement _1033 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_1031, "firdes_lowpass_f: window = %s\n", _1033);
Updating SSA information for statement length.102_1038 = length;
Updating SSA information for statement taps_1042 = malloc (_1040);
Updating SSA information for statement cutoff_rate.107_1044 = cutoff_rate;
Updating SSA information for statement firdes_lowpass_f (taps_1042, length.102_1038, cutoff_rate.107_1044, 2);
Registering new PHI nodes in block #318
Registering new PHI nodes in block #320
Updating SSA information for statement length.102_1047 = length;
Registering new PHI nodes in block #319
Updating SSA information for statement _1051 = *_1050;
Updating SSA information for statement printf ("%g ", _1052);
Registering new PHI nodes in block #321
Registering new PHI nodes in block #322
Updating SSA information for statement __builtin_puts (&"];plot(taps);figure(2);freqz(taps);"[0]);
Updating SSA information for statement stdout.38_1056 = stdout;
Updating SSA information for statement fflush (stdout.38_1056);
Updating SSA information for statement stdin.219_1724 = stdin;
Updating SSA information for statement _IO_getc (stdin.219_1724);
Registering new PHI nodes in block #323
Updating SSA information for statement cutoff_rate ={v} {CLOBBER};
Updating SSA information for statement length ={v} {CLOBBER};
Registering new PHI nodes in block #293
Updating SSA information for statement bigbufs = 1;
Registering new PHI nodes in block #294
Updating SSA information for statement stderr.0_2300 = stderr;
Updating SSA information for statement fprintf (stderr.0_2300, "csdr: %s\n\n", "need required parameter (decimation factor)");
Registering new PHI nodes in block #295
Updating SSA information for statement _923 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_923, "%d", &factor);
Updating SSA information for statement transition_bw = 5.00000007450580596923828125e-2;
Registering new PHI nodes in block #296
Updating SSA information for statement _926 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_926, "%g", &transition_bw);
Registering new PHI nodes in block #297
Updating SSA information for statement _928 = MEM[(char * *)argv_259(D) + 16B];
Updating SSA information for statement window_930 = firdes_get_window_from_string (_928);
Registering new PHI nodes in block #298
Updating SSA information for statement stderr.58_931 = stderr;
Updating SSA information for statement _933 = firdes_get_string_from_window (2);
Updating SSA information for statement fprintf (stderr.58_931, "fir_decimate_cc: window = %s\n", _933);
Registering new PHI nodes in block #299
Updating SSA information for statement _936 = initialize_buffers ();
Registering new PHI nodes in block #300
Updating SSA information for statement the_bufsize.31_937 = the_bufsize;
Updating SSA information for statement factor.95_938 = factor;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2301 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #301
Updating SSA information for statement sendbufsize.part.5 (_939);
Registering new PHI nodes in block #302
Updating SSA information for statement transition_bw.96_940 = transition_bw;
Updating SSA information for statement taps_length_942 = firdes_filter_len (transition_bw.96_940);
Updating SSA information for statement stderr.58_943 = stderr;
Updating SSA information for statement fprintf (stderr.58_943, "fir_decimate_cc: taps_length = %d\n", taps_length_942);
Updating SSA information for statement stderr.58_945 = stderr;
Updating SSA information for statement fprintf (stderr.58_945, "taps_length = %d\n", taps_length_942);
Updating SSA information for statement stderr.58_951 = stderr;
Updating SSA information for statement fprintf (stderr.58_951, "padded_taps_length = %d\n", padded_taps_length_950);
Updating SSA information for statement taps_956 = malloc (_954);
Updating SSA information for statement stderr.58_957 = stderr;
Updating SSA information for statement fprintf (stderr.58_957, "taps = %x\n", taps_956);
Updating SSA information for statement stderr.58_963 = stderr;
Updating SSA information for statement fprintf (stderr.58_963, "taps = %x\n", taps_962);
Registering new PHI nodes in block #304
Registering new PHI nodes in block #303
Updating SSA information for statement *_969 = 0.0;
Registering new PHI nodes in block #305
Updating SSA information for statement factor.95_972 = factor;
Updating SSA information for statement firdes_lowpass_f (taps_962, taps_length_942, _974, window_18);
Updating SSA information for statement input_buffer.40_976 = input_buffer;
Updating SSA information for statement the_bufsize.31_977 = the_bufsize;
Updating SSA information for statement stdin.34_979 = stdin;
Updating SSA information for statement fread (input_buffer.40_976, 8, the_bufsize.36_978, stdin.34_979);
Registering new PHI nodes in block #306
Updating SSA information for statement stdin.34_981 = stdin;
Updating SSA information for statement _983 = feof (stdin.34_981);
Registering new PHI nodes in block #307
Updating SSA information for statement input_buffer.40_984 = input_buffer;
Updating SSA information for statement output_buffer.37_985 = output_buffer;
Updating SSA information for statement the_bufsize.31_986 = the_bufsize;
Updating SSA information for statement factor.95_987 = factor;
Updating SSA information for statement output_size_989 = fir_decimate_cc (input_buffer.40_984, output_buffer.37_985, the_bufsize.31_986, factor.95_987, taps_962, padded_taps_length_950);
Updating SSA information for statement output_buffer.37_990 = output_buffer;
Updating SSA information for statement stdout.38_992 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_990, 8, output_size.98_991, stdout.38_992);
Updating SSA information for statement stdout.38_994 = stdout;
Updating SSA information for statement fflush (stdout.38_994);
Updating SSA information for statement factor.95_996 = factor;
Updating SSA information for statement input_buffer.40_998 = input_buffer;
Updating SSA information for statement the_bufsize.31_1003 = the_bufsize;
Updating SSA information for statement memmove (input_buffer.40_998, _1002, _1006);
Updating SSA information for statement input_buffer.40_1008 = input_buffer;
Updating SSA information for statement the_bufsize.31_1009 = the_bufsize;
Updating SSA information for statement stdin.34_1015 = stdin;
Updating SSA information for statement fread (_1013, 8, input_skip.99_1000, stdin.34_1015);
Registering new PHI nodes in block #308
Updating SSA information for statement factor ={v} {CLOBBER};
Updating SSA information for statement transition_bw ={v} {CLOBBER};
Registering new PHI nodes in block #253
Updating SSA information for statement _820 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2282 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #254
Updating SSA information for statement _2283 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #255
Updating SSA information for statement _2284 = sendbufsize.part.5 (_820);
Registering new PHI nodes in block #256
Registering new PHI nodes in block #257
Registering new PHI nodes in block #258
Updating SSA information for statement stdin.34_821 = stdin;
Updating SSA information for statement _823 = feof (stdin.34_821);
Registering new PHI nodes in block #259
Updating SSA information for statement input_buffer.40_824 = input_buffer;
Updating SSA information for statement the_bufsize.31_825 = the_bufsize;
Updating SSA information for statement stdin.34_827 = stdin;
Updating SSA information for statement fread (input_buffer.40_824, 4, the_bufsize.36_826, stdin.34_827);
Registering new PHI nodes in block #261
Updating SSA information for statement the_bufsize.31_829 = the_bufsize;
Registering new PHI nodes in block #260
Updating SSA information for statement stderr.58_830 = stderr;
Updating SSA information for statement input_buffer.40_831 = input_buffer;
Updating SSA information for statement _835 = *_834;
Updating SSA information for statement fprintf (stderr.58_830, "%g ", _836);
Registering new PHI nodes in block #262
Registering new PHI nodes in block #241
Updating SSA information for statement _792 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2278 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #242
Updating SSA information for statement _2279 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #243
Updating SSA information for statement _2280 = sendbufsize.part.5 (_792);
Registering new PHI nodes in block #244
Registering new PHI nodes in block #245
Registering new PHI nodes in block #246
Updating SSA information for statement stdin.34_793 = stdin;
Updating SSA information for statement _795 = feof (stdin.34_793);
Registering new PHI nodes in block #247
Updating SSA information for statement input_buffer.40_796 = input_buffer;
Updating SSA information for statement the_bufsize.31_797 = the_bufsize;
Updating SSA information for statement stdin.34_799 = stdin;
Updating SSA information for statement fread (input_buffer.40_796, 4, the_bufsize.36_798, stdin.34_799);
Registering new PHI nodes in block #250
Updating SSA information for statement the_bufsize.31_801 = the_bufsize;
Registering new PHI nodes in block #248
Updating SSA information for statement input_buffer.40_802 = input_buffer;
Updating SSA information for statement _806 = *_805;
Updating SSA information for statement _808 = is_nan (_806);
Registering new PHI nodes in block #249
Registering new PHI nodes in block #682
Updating SSA information for statement stderr.58_810 = stderr;
Updating SSA information for statement __builtin_fwrite ("detect_nan_f: NaN detected!\n", 1, 28, stderr.58_810);
Registering new PHI nodes in block #251
Updating SSA information for statement input_buffer.40_812 = input_buffer;
Updating SSA information for statement the_bufsize.31_813 = the_bufsize;
Updating SSA information for statement stdout.38_815 = stdout;
Updating SSA information for statement fwrite (input_buffer.40_812, 4, the_bufsize.36_814, stdout.38_815);
Registering new PHI nodes in block #230
Registering new PHI nodes in block #231
Updating SSA information for statement stderr.0_2273 = stderr;
Updating SSA information for statement fprintf (stderr.0_2273, "csdr: %s\n\n", "need required parameters (sample rate, tau)");
Registering new PHI nodes in block #232
Updating SSA information for statement _757 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2274 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #233
Updating SSA information for statement _2275 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #234
Updating SSA information for statement _2276 = sendbufsize.part.5 (_757);
Registering new PHI nodes in block #235
Registering new PHI nodes in block #236
Updating SSA information for statement _758 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_758, "%d", &sample_rate);
Updating SSA information for statement _760 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_760, "%g", &tau);
Updating SSA information for statement stderr.58_762 = stderr;
Updating SSA information for statement tau.80_763 = tau;
Updating SSA information for statement sample_rate.81_765 = sample_rate;
Updating SSA information for statement fprintf (stderr.58_762, "deemphasis_wfm_ff: tau = %g, sample_rate = %d\n", _764, sample_rate.81_765);
Registering new PHI nodes in block #237
Updating SSA information for statement stdin.34_767 = stdin;
Updating SSA information for statement _769 = feof (stdin.34_767);
Registering new PHI nodes in block #238
Updating SSA information for statement input_buffer.40_770 = input_buffer;
Updating SSA information for statement the_bufsize.31_771 = the_bufsize;
Updating SSA information for statement stdin.34_773 = stdin;
Updating SSA information for statement fread (input_buffer.40_770, 4, the_bufsize.36_772, stdin.34_773);
Updating SSA information for statement input_buffer.40_775 = input_buffer;
Updating SSA information for statement output_buffer.37_776 = output_buffer;
Updating SSA information for statement the_bufsize.31_777 = the_bufsize;
Updating SSA information for statement tau.80_778 = tau;
Updating SSA information for statement sample_rate.81_779 = sample_rate;
Updating SSA information for statement last_output_781 = deemphasis_wfm_ff (input_buffer.40_775, output_buffer.37_776, the_bufsize.31_777, tau.80_778, sample_rate.81_779, last_output_13);
Updating SSA information for statement output_buffer.37_782 = output_buffer;
Updating SSA information for statement the_bufsize.31_783 = the_bufsize;
Updating SSA information for statement stdout.38_785 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_782, 4, the_bufsize.36_784, stdout.38_785);
Registering new PHI nodes in block #239
Updating SSA information for statement sample_rate ={v} {CLOBBER};
Updating SSA information for statement tau ={v} {CLOBBER};
Registering new PHI nodes in block #221
Updating SSA information for statement _733 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2269 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #222
Updating SSA information for statement _2270 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #223
Updating SSA information for statement _2271 = sendbufsize.part.5 (_733);
Registering new PHI nodes in block #224
Registering new PHI nodes in block #225
Updating SSA information for statement last_sample.i = 0.0;
Updating SSA information for statement last_sample.q = 0.0;
Registering new PHI nodes in block #226
Updating SSA information for statement stdin.34_736 = stdin;
Updating SSA information for statement _738 = feof (stdin.34_736);
Registering new PHI nodes in block #227
Updating SSA information for statement input_buffer.40_739 = input_buffer;
Updating SSA information for statement the_bufsize.31_740 = the_bufsize;
Updating SSA information for statement stdin.34_742 = stdin;
Updating SSA information for statement fread (input_buffer.40_739, 8, the_bufsize.36_741, stdin.34_742);
Updating SSA information for statement input_buffer.40_744 = input_buffer;
Updating SSA information for statement output_buffer.37_745 = output_buffer;
Updating SSA information for statement the_bufsize.31_746 = the_bufsize;
Updating SSA information for statement last_sample = fmdemod_quadri_novect_cf (input_buffer.40_744, output_buffer.37_745, the_bufsize.31_746, last_sample);
Updating SSA information for statement output_buffer.37_748 = output_buffer;
Updating SSA information for statement the_bufsize.31_749 = the_bufsize;
Updating SSA information for statement stdout.38_751 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_748, 4, the_bufsize.36_750, stdout.38_751);
Registering new PHI nodes in block #228
Updating SSA information for statement last_sample ={v} {CLOBBER};
Registering new PHI nodes in block #212
Updating SSA information for statement _708 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2265 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #213
Updating SSA information for statement _2266 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #214
Updating SSA information for statement _2267 = sendbufsize.part.5 (_708);
Registering new PHI nodes in block #215
Registering new PHI nodes in block #216
Updating SSA information for statement last_sample.i = 0.0;
Updating SSA information for statement last_sample.q = 0.0;
Registering new PHI nodes in block #217
Updating SSA information for statement stdin.34_711 = stdin;
Updating SSA information for statement _713 = feof (stdin.34_711);
Registering new PHI nodes in block #218
Updating SSA information for statement input_buffer.40_714 = input_buffer;
Updating SSA information for statement the_bufsize.31_715 = the_bufsize;
Updating SSA information for statement stdin.34_717 = stdin;
Updating SSA information for statement fread (input_buffer.40_714, 8, the_bufsize.36_716, stdin.34_717);
Updating SSA information for statement input_buffer.40_719 = input_buffer;
Updating SSA information for statement output_buffer.37_720 = output_buffer;
Updating SSA information for statement the_bufsize.31_721 = the_bufsize;
Updating SSA information for statement temp_f.77_722 = temp_f;
Updating SSA information for statement last_sample = fmdemod_quadri_cf (input_buffer.40_719, output_buffer.37_720, the_bufsize.31_721, temp_f.77_722, last_sample);
Updating SSA information for statement output_buffer.37_724 = output_buffer;
Updating SSA information for statement the_bufsize.31_725 = the_bufsize;
Updating SSA information for statement stdout.38_727 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_724, 4, the_bufsize.36_726, stdout.38_727);
Registering new PHI nodes in block #219
Updating SSA information for statement last_sample ={v} {CLOBBER};
Registering new PHI nodes in block #203
Updating SSA information for statement _684 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2261 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #204
Updating SSA information for statement _2262 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #205
Updating SSA information for statement _2263 = sendbufsize.part.5 (_684);
Registering new PHI nodes in block #206
Registering new PHI nodes in block #207
Registering new PHI nodes in block #208
Updating SSA information for statement stdin.34_685 = stdin;
Updating SSA information for statement _687 = feof (stdin.34_685);
Registering new PHI nodes in block #209
Updating SSA information for statement input_buffer.40_688 = input_buffer;
Updating SSA information for statement the_bufsize.31_689 = the_bufsize;
Updating SSA information for statement stdin.34_691 = stdin;
Updating SSA information for statement fread (input_buffer.40_688, 8, the_bufsize.36_690, stdin.34_691);
Updating SSA information for statement stdin.34_693 = stdin;
Updating SSA information for statement _695 = feof (stdin.34_693);
Registering new PHI nodes in block #210
Updating SSA information for statement input_buffer.40_696 = input_buffer;
Updating SSA information for statement output_buffer.37_697 = output_buffer;
Updating SSA information for statement the_bufsize.31_698 = the_bufsize;
Updating SSA information for statement last_phase_700 = fmdemod_atan_cf (input_buffer.40_696, output_buffer.37_697, the_bufsize.31_698, last_phase_12);
Updating SSA information for statement output_buffer.37_701 = output_buffer;
Updating SSA information for statement the_bufsize.31_702 = the_bufsize;
Updating SSA information for statement stdout.38_704 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_701, 4, the_bufsize.36_703, stdout.38_704);
Registering new PHI nodes in block #194
Updating SSA information for statement dcblock_bufsize = 1024;
Registering new PHI nodes in block #195
Updating SSA information for statement _656 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_656, "%d", &dcblock_bufsize);
Registering new PHI nodes in block #196
Updating SSA information for statement dcblock_bufsize.70_658 = dcblock_bufsize;
Updating SSA information for statement dcblock_buffer_662 = malloc (_660);
Updating SSA information for statement getbufsize ();
Updating SSA information for statement dcblock_bufsize.70_664 = dcblock_bufsize;
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2259 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #197
Updating SSA information for statement sendbufsize.part.5 (dcblock_bufsize.70_664);
Registering new PHI nodes in block #198
Registering new PHI nodes in block #199
Updating SSA information for statement stdin.34_665 = stdin;
Updating SSA information for statement _667 = feof (stdin.34_665);
Registering new PHI nodes in block #201
Updating SSA information for statement dcblock_bufsize.70_668 = dcblock_bufsize;
Updating SSA information for statement stdin.34_670 = stdin;
Updating SSA information for statement fread (dcblock_buffer_662, 4, dcblock_bufsize.72_669, stdin.34_670);
Updating SSA information for statement dcblock_bufsize.70_672 = dcblock_bufsize;
Updating SSA information for statement last_dc_level.73_673 = last_dc_level;
Updating SSA information for statement last_dc_level.74_675 = fastdcblock_ff (dcblock_buffer_662, dcblock_buffer_662, dcblock_bufsize.70_672, last_dc_level.73_673);
Updating SSA information for statement last_dc_level = last_dc_level.74_675;
Updating SSA information for statement dcblock_bufsize.70_677 = dcblock_bufsize;
Updating SSA information for statement stdout.38_679 = stdout;
Updating SSA information for statement fwrite (dcblock_buffer_662, 4, dcblock_bufsize.72_678, stdout.38_679);
Registering new PHI nodes in block #200
Updating SSA information for statement dcblock_bufsize ={v} {CLOBBER};
Registering new PHI nodes in block #186
Updating SSA information for statement _636 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2255 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #187
Updating SSA information for statement _2256 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #188
Updating SSA information for statement _2257 = sendbufsize.part.5 (_636);
Registering new PHI nodes in block #189
Registering new PHI nodes in block #190
Registering new PHI nodes in block #191
Updating SSA information for statement stdin.34_637 = stdin;
Updating SSA information for statement _639 = feof (stdin.34_637);
Registering new PHI nodes in block #192
Updating SSA information for statement input_buffer.40_640 = input_buffer;
Updating SSA information for statement the_bufsize.31_641 = the_bufsize;
Updating SSA information for statement stdin.34_643 = stdin;
Updating SSA information for statement fread (input_buffer.40_640, 4, the_bufsize.36_642, stdin.34_643);
Updating SSA information for statement input_buffer.40_645 = input_buffer;
Updating SSA information for statement output_buffer.37_646 = output_buffer;
Updating SSA information for statement the_bufsize.31_647 = the_bufsize;
Updating SSA information for statement dcp = dcblock_ff (input_buffer.40_645, output_buffer.37_646, the_bufsize.31_647, 0.0, dcp);
Updating SSA information for statement output_buffer.37_649 = output_buffer;
Updating SSA information for statement the_bufsize.31_650 = the_bufsize;
Updating SSA information for statement stdout.38_652 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_649, 4, the_bufsize.36_651, stdout.38_652);
Registering new PHI nodes in block #181
Registering new PHI nodes in block #182
Updating SSA information for statement stderr.0_2254 = stderr;
Updating SSA information for statement fprintf (stderr.0_2254, "csdr: %s\n\n", "need required parameter (rate)");
Registering new PHI nodes in block #183
Updating SSA information for statement _626 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_626, "%g", &rate);
Updating SSA information for statement rate.67_628 = rate;
Updating SSA information for statement data = shift_addition_init (rate.67_628);
Updating SSA information for statement shift_addition_cc_test (data);
Registering new PHI nodes in block #184
Updating SSA information for statement rate ={v} {CLOBBER};
Updating SSA information for statement data ={v} {CLOBBER};
Registering new PHI nodes in block #155
Updating SSA information for statement bigbufs = 1;
Updating SSA information for statement fd_581 = init_fifo (argc_261(D), argv_259(D));
Registering new PHI nodes in block #159
Registering new PHI nodes in block #160
Updating SSA information for statement stderr.0_2249 = stderr;
Updating SSA information for statement fprintf (stderr.0_2249, "csdr: %s\n\n", "need required parameter (rate)");
Registering new PHI nodes in block #161
Updating SSA information for statement _582 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_582, "%g", &rate);
Registering new PHI nodes in block #156
Registering new PHI nodes in block #158
Updating SSA information for statement _585 = read_fifo_ctl (fd_581, "%g\n", &rate);
Registering new PHI nodes in block #157
Updating SSA information for statement usleep (10000);
Registering new PHI nodes in block #162
Updating SSA information for statement _588 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2250 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #163
Updating SSA information for statement _2251 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #164
Updating SSA information for statement _2252 = sendbufsize.part.5 (_588);
Registering new PHI nodes in block #165
Registering new PHI nodes in block #166
Registering new PHI nodes in block #167
Updating SSA information for statement rate.64_589 = rate;
Updating SSA information for statement data = shift_addition_init (rate.64_589);
Updating SSA information for statement stderr.58_591 = stderr;
Updating SSA information for statement rate.64_592 = rate;
Updating SSA information for statement fprintf (stderr.58_591, "shift_addition_cc: reinitialized to %g\n", _593);
Registering new PHI nodes in block #168
Updating SSA information for statement stdin.34_595 = stdin;
Updating SSA information for statement _597 = feof (stdin.34_595);
Registering new PHI nodes in block #170
Updating SSA information for statement input_buffer.40_598 = input_buffer;
Updating SSA information for statement the_bufsize.31_599 = the_bufsize;
Updating SSA information for statement stdin.34_601 = stdin;
Updating SSA information for statement _603 = fread (input_buffer.40_598, 8, the_bufsize.36_600, stdin.34_601);
Registering new PHI nodes in block #177
Registering new PHI nodes in block #171
Updating SSA information for statement remain_604 = the_bufsize;
Updating SSA information for statement ibufptr_605 = input_buffer;
Updating SSA information for statement obufptr_606 = output_buffer;
Registering new PHI nodes in block #173
Registering new PHI nodes in block #172
Updating SSA information for statement starting_phase_609 = shift_addition_cc (ibufptr_10, obufptr_11, current_size_607, data, starting_phase_7);
Registering new PHI nodes in block #174
Updating SSA information for statement output_buffer.37_615 = output_buffer;
Updating SSA information for statement the_bufsize.31_616 = the_bufsize;
Updating SSA information for statement stdout.38_618 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_615, 8, the_bufsize.36_617, stdout.38_618);
Updating SSA information for statement _621 = read_fifo_ctl (fd_581, "%g\n", &rate);
Registering new PHI nodes in block #175
Registering new PHI nodes in block #176
Registering new PHI nodes in block #178
Updating SSA information for statement data ={v} {CLOBBER};
Registering new PHI nodes in block #169
Updating SSA information for statement data ={v} {CLOBBER};
Registering new PHI nodes in block #179
Updating SSA information for statement rate ={v} {CLOBBER};
Registering new PHI nodes in block #141
Updating SSA information for statement bigbufs = 1;
Registering new PHI nodes in block #142
Updating SSA information for statement stderr.0_2247 = stderr;
Updating SSA information for statement fprintf (stderr.0_2247, "csdr: %s\n\n", "need required parameter (rate)");
Registering new PHI nodes in block #143
Updating SSA information for statement decimation = 1;
Updating SSA information for statement _540 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_540, "%g", &rate);
Registering new PHI nodes in block #144
Updating SSA information for statement _542 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_542, "%d", &decimation);
Registering new PHI nodes in block #145
Updating SSA information for statement _545 = initialize_buffers ();
Registering new PHI nodes in block #146
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2248 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #147
Updating SSA information for statement the_bufsize.31_546 = the_bufsize;
Updating SSA information for statement decimation.61_547 = decimation;
Updating SSA information for statement sendbufsize.part.5 (_548);
Registering new PHI nodes in block #148
Updating SSA information for statement rate.62_549 = rate;
Updating SSA information for statement decimation.61_550 = decimation;
Updating SSA information for statement d = decimating_shift_addition_init (rate.62_549, decimation.61_550);
Updating SSA information for statement s.decimation_remain = 0;
Updating SSA information for statement s.starting_phase = 0.0;
Registering new PHI nodes in block #149
Updating SSA information for statement stdin.34_554 = stdin;
Updating SSA information for statement _556 = feof (stdin.34_554);
Registering new PHI nodes in block #151
Updating SSA information for statement input_buffer.40_557 = input_buffer;
Updating SSA information for statement the_bufsize.31_558 = the_bufsize;
Updating SSA information for statement stdin.34_560 = stdin;
Updating SSA information for statement _562 = fread (input_buffer.40_557, 8, the_bufsize.36_559, stdin.34_560);
Registering new PHI nodes in block #152
Updating SSA information for statement input_buffer.40_563 = input_buffer;
Updating SSA information for statement output_buffer.37_564 = output_buffer;
Updating SSA information for statement the_bufsize.31_565 = the_bufsize;
Updating SSA information for statement decimation.61_566 = decimation;
Updating SSA information for statement s = decimating_shift_addition_cc (input_buffer.40_563, output_buffer.37_564, the_bufsize.31_565, d, decimation.61_566, s); [return slot optimization]
Updating SSA information for statement output_buffer.37_568 = output_buffer;
Updating SSA information for statement _569 = s.output_size;
Updating SSA information for statement stdout.38_571 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_568, 8, _570, stdout.38_571);
Registering new PHI nodes in block #150
Registering new PHI nodes in block #153
Updating SSA information for statement rate ={v} {CLOBBER};
Updating SSA information for statement decimation ={v} {CLOBBER};
Updating SSA information for statement d ={v} {CLOBBER};
Updating SSA information for statement s ={v} {CLOBBER};
Registering new PHI nodes in block #126
Updating SSA information for statement bigbufs = 1;
Registering new PHI nodes in block #127
Updating SSA information for statement stderr.0_2242 = stderr;
Updating SSA information for statement fprintf (stderr.0_2242, "csdr: %s\n\n", "need required parameter (rate)");
Registering new PHI nodes in block #128
Updating SSA information for statement table_size = 65536;
Updating SSA information for statement _503 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_503, "%g", &rate);
Registering new PHI nodes in block #129
Updating SSA information for statement _505 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_505, "%d", &table_size);
Registering new PHI nodes in block #130
Updating SSA information for statement _508 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2243 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #131
Updating SSA information for statement _2244 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #132
Updating SSA information for statement _2245 = sendbufsize.part.5 (_508);
Registering new PHI nodes in block #133
Registering new PHI nodes in block #134
Updating SSA information for statement table_size.57_509 = table_size;
Updating SSA information for statement table_data = shift_table_init (table_size.57_509); [return slot optimization]
Updating SSA information for statement stderr.58_511 = stderr;
Updating SSA information for statement __builtin_fwrite ("shift_table_cc: LUT initialized\n", 1, 32, stderr.58_511);
Registering new PHI nodes in block #135
Updating SSA information for statement stdin.34_513 = stdin;
Updating SSA information for statement _515 = feof (stdin.34_513);
Registering new PHI nodes in block #137
Updating SSA information for statement input_buffer.40_516 = input_buffer;
Updating SSA information for statement the_bufsize.31_517 = the_bufsize;
Updating SSA information for statement stdin.34_519 = stdin;
Updating SSA information for statement _521 = fread (input_buffer.40_516, 8, the_bufsize.36_518, stdin.34_519);
Registering new PHI nodes in block #138
Updating SSA information for statement input_buffer.40_522 = input_buffer;
Updating SSA information for statement output_buffer.37_523 = output_buffer;
Updating SSA information for statement the_bufsize.31_524 = the_bufsize;
Updating SSA information for statement rate.59_525 = rate;
Updating SSA information for statement starting_phase_527 = shift_table_cc (input_buffer.40_522, output_buffer.37_523, the_bufsize.31_524, rate.59_525, table_data, starting_phase_4);
Updating SSA information for statement output_buffer.37_528 = output_buffer;
Updating SSA information for statement the_bufsize.31_529 = the_bufsize;
Updating SSA information for statement stdout.38_531 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_528, 8, the_bufsize.36_530, stdout.38_531);
Registering new PHI nodes in block #136
Registering new PHI nodes in block #139
Updating SSA information for statement rate ={v} {CLOBBER};
Updating SSA information for statement table_size ={v} {CLOBBER};
Updating SSA information for statement table_data ={v} {CLOBBER};
Registering new PHI nodes in block #113
Registering new PHI nodes in block #114
Updating SSA information for statement stderr.0_2237 = stderr;
Updating SSA information for statement fprintf (stderr.0_2237, "csdr: %s\n\n", "need required parameter (rate)");
Registering new PHI nodes in block #115
Updating SSA information for statement _481 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_481, "%g", &rate);
Updating SSA information for statement _484 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2238 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #116
Updating SSA information for statement _2239 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #117
Updating SSA information for statement _2240 = sendbufsize.part.5 (_484);
Registering new PHI nodes in block #118
Registering new PHI nodes in block #119
Registering new PHI nodes in block #120
Updating SSA information for statement stdin.34_485 = stdin;
Updating SSA information for statement _487 = feof (stdin.34_485);
Registering new PHI nodes in block #122
Updating SSA information for statement input_buffer.40_488 = input_buffer;
Updating SSA information for statement the_bufsize.31_489 = the_bufsize;
Updating SSA information for statement stdin.34_491 = stdin;
Updating SSA information for statement _493 = fread (input_buffer.40_488, 8, the_bufsize.36_490, stdin.34_491);
Registering new PHI nodes in block #123
Updating SSA information for statement output_buffer.37_494 = output_buffer;
Updating SSA information for statement the_bufsize.31_495 = the_bufsize;
Updating SSA information for statement stdout.38_497 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_494, 8, the_bufsize.36_496, stdout.38_497);
Registering new PHI nodes in block #121
Registering new PHI nodes in block #124
Updating SSA information for statement rate ={v} {CLOBBER};
Registering new PHI nodes in block #97
Registering new PHI nodes in block #98
Updating SSA information for statement stderr.0_2232 = stderr;
Updating SSA information for statement fprintf (stderr.0_2232, "csdr: %s\n\n", "need required parameter (to_repeat)");
Registering new PHI nodes in block #99
Updating SSA information for statement _456 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_456, "%g", &to_repeat);
Updating SSA information for statement buf_times = 0;
Registering new PHI nodes in block #100
Updating SSA information for statement _459 = MEM[(char * *)argv_259(D) + 12B];
Updating SSA information for statement sscanf (_459, "%d", &buf_times);
Registering new PHI nodes in block #101
Updating SSA information for statement _462 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2233 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #102
Updating SSA information for statement _2234 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #103
Updating SSA information for statement _2235 = sendbufsize.part.5 (_462);
Registering new PHI nodes in block #104
Registering new PHI nodes in block #105
Updating SSA information for statement the_bufsize.31_463 = the_bufsize;
Updating SSA information for statement output_buffer.37_464 = output_buffer;
Registering new PHI nodes in block #107
Registering new PHI nodes in block #106
Updating SSA information for statement to_repeat.53_468 = to_repeat;
Updating SSA information for statement *_467 = to_repeat.53_468;
Registering new PHI nodes in block #108
Registering new PHI nodes in block #110
Updating SSA information for statement buf_times.54_471 = buf_times;
Registering new PHI nodes in block #109
Updating SSA information for statement output_buffer.37_472 = output_buffer;
Updating SSA information for statement the_bufsize.31_473 = the_bufsize;
Updating SSA information for statement stdout.38_475 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_472, 4, the_bufsize.36_474, stdout.38_475);
Registering new PHI nodes in block #111
Updating SSA information for statement to_repeat ={v} {CLOBBER};
Updating SSA information for statement buf_times ={v} {CLOBBER};
Registering new PHI nodes in block #86
Updating SSA information for statement max_amplitude = 1.0e+0;
Registering new PHI nodes in block #87
Updating SSA information for statement _431 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_431, "%g", &max_amplitude);
Registering new PHI nodes in block #88
Updating SSA information for statement _434 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2228 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #89
Updating SSA information for statement _2229 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #90
Updating SSA information for statement _2230 = sendbufsize.part.5 (_434);
Registering new PHI nodes in block #91
Registering new PHI nodes in block #92
Registering new PHI nodes in block #93
Updating SSA information for statement stdin.34_435 = stdin;
Updating SSA information for statement _437 = feof (stdin.34_435);
Registering new PHI nodes in block #94
Updating SSA information for statement input_buffer.40_438 = input_buffer;
Updating SSA information for statement the_bufsize.31_439 = the_bufsize;
Updating SSA information for statement stdin.34_441 = stdin;
Updating SSA information for statement fread (input_buffer.40_438, 4, the_bufsize.36_440, stdin.34_441);
Updating SSA information for statement input_buffer.40_443 = input_buffer;
Updating SSA information for statement output_buffer.37_444 = output_buffer;
Updating SSA information for statement the_bufsize.31_445 = the_bufsize;
Updating SSA information for statement max_amplitude.50_446 = max_amplitude;
Updating SSA information for statement limit_ff (input_buffer.40_443, output_buffer.37_444, the_bufsize.31_445, max_amplitude.50_446);
Updating SSA information for statement output_buffer.37_448 = output_buffer;
Updating SSA information for statement the_bufsize.31_449 = the_bufsize;
Updating SSA information for statement stdout.38_451 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_448, 4, the_bufsize.36_450, stdout.38_451);
Registering new PHI nodes in block #95
Updating SSA information for statement max_amplitude ={v} {CLOBBER};
Registering new PHI nodes in block #75
Registering new PHI nodes in block #76
Updating SSA information for statement stderr.0_2223 = stderr;
Updating SSA information for statement fprintf (stderr.0_2223, "csdr: %s\n\n", "need required parameter (gain)");
Registering new PHI nodes in block #77
Updating SSA information for statement _406 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_406, "%g", &gain);
Updating SSA information for statement _409 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2224 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #78
Updating SSA information for statement _2225 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #79
Updating SSA information for statement _2226 = sendbufsize.part.5 (_409);
Registering new PHI nodes in block #80
Registering new PHI nodes in block #81
Registering new PHI nodes in block #82
Updating SSA information for statement stdin.34_410 = stdin;
Updating SSA information for statement _412 = feof (stdin.34_410);
Registering new PHI nodes in block #83
Updating SSA information for statement input_buffer.40_413 = input_buffer;
Updating SSA information for statement the_bufsize.31_414 = the_bufsize;
Updating SSA information for statement stdin.34_416 = stdin;
Updating SSA information for statement fread (input_buffer.40_413, 4, the_bufsize.36_415, stdin.34_416);
Updating SSA information for statement input_buffer.40_418 = input_buffer;
Updating SSA information for statement output_buffer.37_419 = output_buffer;
Updating SSA information for statement the_bufsize.31_420 = the_bufsize;
Updating SSA information for statement gain.48_421 = gain;
Updating SSA information for statement gain_ff (input_buffer.40_418, output_buffer.37_419, the_bufsize.31_420, gain.48_421);
Updating SSA information for statement output_buffer.37_423 = output_buffer;
Updating SSA information for statement the_bufsize.31_424 = the_bufsize;
Updating SSA information for statement stdout.38_426 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_423, 4, the_bufsize.36_425, stdout.38_426);
Registering new PHI nodes in block #84
Updating SSA information for statement gain ={v} {CLOBBER};
Registering new PHI nodes in block #67
Updating SSA information for statement _388 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2219 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #68
Updating SSA information for statement _2220 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #69
Updating SSA information for statement _2221 = sendbufsize.part.5 (_388);
Registering new PHI nodes in block #70
Registering new PHI nodes in block #71
Registering new PHI nodes in block #72
Updating SSA information for statement stdin.34_389 = stdin;
Updating SSA information for statement _391 = feof (stdin.34_389);
Registering new PHI nodes in block #73
Updating SSA information for statement input_buffer.40_392 = input_buffer;
Updating SSA information for statement the_bufsize.31_393 = the_bufsize;
Updating SSA information for statement stdin.34_395 = stdin;
Updating SSA information for statement fread (input_buffer.40_392, 4, the_bufsize.36_394, stdin.34_395);
Updating SSA information for statement input_buffer.40_397 = input_buffer;
Updating SSA information for statement the_bufsize.31_398 = the_bufsize;
Updating SSA information for statement clipdetect_ff (input_buffer.40_397, the_bufsize.31_398);
Updating SSA information for statement input_buffer.40_400 = input_buffer;
Updating SSA information for statement the_bufsize.31_401 = the_bufsize;
Updating SSA information for statement stdout.38_403 = stdout;
Updating SSA information for statement fwrite (input_buffer.40_400, 4, the_bufsize.36_402, stdout.38_403);
Registering new PHI nodes in block #54
Updating SSA information for statement _360 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2215 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #55
Updating SSA information for statement _2216 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #56
Updating SSA information for statement _2217 = sendbufsize.part.5 (_360);
Registering new PHI nodes in block #57
Registering new PHI nodes in block #58
Registering new PHI nodes in block #59
Updating SSA information for statement stdin.34_361 = stdin;
Updating SSA information for statement _363 = feof (stdin.34_361);
Registering new PHI nodes in block #60
Updating SSA information for statement input_buffer.40_364 = input_buffer;
Updating SSA information for statement the_bufsize.31_365 = the_bufsize;
Updating SSA information for statement stdin.34_367 = stdin;
Updating SSA information for statement fread (input_buffer.40_364, 8, the_bufsize.36_366, stdin.34_367);
Updating SSA information for statement the_bufsize.31_2757 = the_bufsize;
Registering new PHI nodes in block #62
Updating SSA information for statement pretmp_2657 = output_buffer;
Updating SSA information for statement pretmp_2633 = input_buffer;
Registering new PHI nodes in block #699
Registering new PHI nodes in block #700
Registering new PHI nodes in block #707
Registering new PHI nodes in block #711
Registering new PHI nodes in block #63
Updating SSA information for statement vect_array.285 = LOAD_LANES (MEM[(float *)vectp_pretmp.283_2566]);
Updating SSA information for statement vect__378.286_2685 = vect_array.285[0];
Updating SSA information for statement vect__378.287_2689 = vect_array.285[1];
Updating SSA information for statement _378 = *_377;
Updating SSA information for statement MEM[(float *)vectp_pretmp.288_2699] = vect__378.286_2685;
Registering new PHI nodes in block #65
Registering new PHI nodes in block #708
Registering new PHI nodes in block #706
Registering new PHI nodes in block #704
Updating SSA information for statement _1719 = *_1319;
Updating SSA information for statement *_2776 = _1719;
Registering new PHI nodes in block #705
Registering new PHI nodes in block #710
Registering new PHI nodes in block #709
Registering new PHI nodes in block #702
Registering new PHI nodes in block #701
Registering new PHI nodes in block #697
Updating SSA information for statement _2746 = *_2745;
Updating SSA information for statement *_2730 = _2746;
Registering new PHI nodes in block #698
Registering new PHI nodes in block #64
Registering new PHI nodes in block #61
Updating SSA information for statement output_buffer.37_381 = output_buffer;
Updating SSA information for statement stdout.38_383 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_381, 4, the_bufsize.36_382, stdout.38_383);
Registering new PHI nodes in block #46
Updating SSA information for statement _340 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2211 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #47
Updating SSA information for statement _2212 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #48
Updating SSA information for statement _2213 = sendbufsize.part.5 (_340);
Registering new PHI nodes in block #49
Registering new PHI nodes in block #50
Registering new PHI nodes in block #51
Updating SSA information for statement stdin.34_341 = stdin;
Updating SSA information for statement _343 = feof (stdin.34_341);
Registering new PHI nodes in block #52
Updating SSA information for statement buffer_i16.42_344 = buffer_i16;
Updating SSA information for statement the_bufsize.31_345 = the_bufsize;
Updating SSA information for statement stdin.34_347 = stdin;
Updating SSA information for statement fread (buffer_i16.42_344, 2, the_bufsize.36_346, stdin.34_347);
Updating SSA information for statement buffer_i16.42_349 = buffer_i16;
Updating SSA information for statement output_buffer.37_350 = output_buffer;
Updating SSA information for statement the_bufsize.31_351 = the_bufsize;
Updating SSA information for statement convert_i16_f (buffer_i16.42_349, output_buffer.37_350, the_bufsize.31_351);
Updating SSA information for statement output_buffer.37_353 = output_buffer;
Updating SSA information for statement the_bufsize.31_354 = the_bufsize;
Updating SSA information for statement stdout.38_356 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_353, 4, the_bufsize.36_355, stdout.38_356);
Registering new PHI nodes in block #38
Updating SSA information for statement _320 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2207 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #39
Updating SSA information for statement _2208 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #40
Updating SSA information for statement _2209 = sendbufsize.part.5 (_320);
Registering new PHI nodes in block #41
Registering new PHI nodes in block #42
Registering new PHI nodes in block #43
Updating SSA information for statement stdin.34_321 = stdin;
Updating SSA information for statement _323 = feof (stdin.34_321);
Registering new PHI nodes in block #44
Updating SSA information for statement input_buffer.40_324 = input_buffer;
Updating SSA information for statement the_bufsize.31_325 = the_bufsize;
Updating SSA information for statement stdin.34_327 = stdin;
Updating SSA information for statement fread (input_buffer.40_324, 4, the_bufsize.36_326, stdin.34_327);
Updating SSA information for statement input_buffer.40_329 = input_buffer;
Updating SSA information for statement buffer_i16.42_330 = buffer_i16;
Updating SSA information for statement the_bufsize.31_331 = the_bufsize;
Updating SSA information for statement convert_f_i16 (input_buffer.40_329, buffer_i16.42_330, the_bufsize.31_331);
Updating SSA information for statement buffer_i16.42_333 = buffer_i16;
Updating SSA information for statement the_bufsize.31_334 = the_bufsize;
Updating SSA information for statement stdout.38_336 = stdout;
Updating SSA information for statement fwrite (buffer_i16.42_333, 2, the_bufsize.36_335, stdout.38_336);
Registering new PHI nodes in block #30
Updating SSA information for statement _300 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2203 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #31
Updating SSA information for statement _2204 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #32
Updating SSA information for statement _2205 = sendbufsize.part.5 (_300);
Registering new PHI nodes in block #33
Registering new PHI nodes in block #34
Registering new PHI nodes in block #35
Updating SSA information for statement stdin.34_301 = stdin;
Updating SSA information for statement _303 = feof (stdin.34_301);
Registering new PHI nodes in block #36
Updating SSA information for statement input_buffer.40_304 = input_buffer;
Updating SSA information for statement the_bufsize.31_305 = the_bufsize;
Updating SSA information for statement stdin.34_307 = stdin;
Updating SSA information for statement fread (input_buffer.40_304, 4, the_bufsize.36_306, stdin.34_307);
Updating SSA information for statement input_buffer.40_309 = input_buffer;
Updating SSA information for statement buffer_u8.35_310 = buffer_u8;
Updating SSA information for statement the_bufsize.31_311 = the_bufsize;
Updating SSA information for statement convert_f_u8 (input_buffer.40_309, buffer_u8.35_310, the_bufsize.31_311);
Updating SSA information for statement buffer_u8.35_313 = buffer_u8;
Updating SSA information for statement the_bufsize.31_314 = the_bufsize;
Updating SSA information for statement stdout.38_316 = stdout;
Updating SSA information for statement fwrite (buffer_u8.35_313, 1, the_bufsize.36_315, stdout.38_316);
Registering new PHI nodes in block #21
Updating SSA information for statement _280 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2199 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #22
Updating SSA information for statement _2200 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #23
Updating SSA information for statement _2201 = sendbufsize.part.5 (_280);
Registering new PHI nodes in block #24
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Updating SSA information for statement stdin.34_281 = stdin;
Updating SSA information for statement _283 = feof (stdin.34_281);
Registering new PHI nodes in block #28
Updating SSA information for statement buffer_u8.35_284 = buffer_u8;
Updating SSA information for statement the_bufsize.31_285 = the_bufsize;
Updating SSA information for statement stdin.34_287 = stdin;
Updating SSA information for statement fread (buffer_u8.35_284, 1, the_bufsize.36_286, stdin.34_287);
Updating SSA information for statement buffer_u8.35_289 = buffer_u8;
Updating SSA information for statement output_buffer.37_290 = output_buffer;
Updating SSA information for statement the_bufsize.31_291 = the_bufsize;
Updating SSA information for statement convert_u8_f (buffer_u8.35_289, output_buffer.37_290, the_bufsize.31_291);
Updating SSA information for statement output_buffer.37_293 = output_buffer;
Updating SSA information for statement the_bufsize.31_294 = the_bufsize;
Updating SSA information for statement stdout.38_296 = stdout;
Updating SSA information for statement fwrite (output_buffer.37_293, 4, the_bufsize.36_295, stdout.38_296);
Registering new PHI nodes in block #27
Registering new PHI nodes in block #14
Updating SSA information for statement _275 = initialize_buffers ();
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2195 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #15
Updating SSA information for statement _2196 = env_csdr_fixed_bufsize;
Registering new PHI nodes in block #16
Updating SSA information for statement _2197 = sendbufsize.part.5 (_275);
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Updating SSA information for statement the_bufsize.31_276 = the_bufsize;
Updating SSA information for statement clone_ (the_bufsize.31_276);
Registering new PHI nodes in block #18
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement stderr.0_2192 = stderr;
Updating SSA information for statement fprintf (stderr.0_2192, "csdr: %s\n\n", "need required parameter (buffer size)");
Registering new PHI nodes in block #8
Updating SSA information for statement _268 = MEM[(char * *)argv_259(D) + 8B];
Updating SSA information for statement sscanf (_268, "%d", &the_bufsize);
Updating SSA information for statement the_bufsize.31_270 = the_bufsize;
Registering new PHI nodes in block #9
Updating SSA information for statement stderr.0_2193 = stderr;
Updating SSA information for statement fprintf (stderr.0_2193, "csdr: %s\n\n", "buffer size <= 0 is invalid");
Registering new PHI nodes in block #10
Updating SSA information for statement env_csdr_dynamic_bufsize_on.24_2194 = env_csdr_dynamic_bufsize_on;
Registering new PHI nodes in block #11
Updating SSA information for statement sendbufsize.part.5 (the_bufsize.31_270);
Registering new PHI nodes in block #12
Updating SSA information for statement the_bufsize.31_271 = the_bufsize;
Updating SSA information for statement clone_ (the_bufsize.31_271);
Registering new PHI nodes in block #3
Updating SSA information for statement stderr.0_2509 = stderr;
Updating SSA information for statement __builtin_fputs (&usage, stderr.0_2509);
Registering new PHI nodes in block #681
Updating SSA information for statement return _96;

Symbols to be put in SSA form
{ D.15506 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 712
Number of blocks to update: 710 (100%)
Affected blocks


Merging blocks 62 and 699
Merging blocks 700 and 707
Merging blocks 709 and 702
Applying pattern match.pd:797, gimple-match.c:164
Applying pattern match.pd:2419, gimple-match.c:49576
Applying pattern match.pd:797, gimple-match.c:164
Applying pattern match.pd:2419, gimple-match.c:49576
Applying pattern match.pd:797, gimple-match.c:164
Applying pattern match.pd:2419, gimple-match.c:49576
Applying pattern match.pd:797, gimple-match.c:164
Applying pattern match.pd:2419, gimple-match.c:49576
Applying pattern match.pd:797, gimple-match.c:164
Applying pattern match.pd:2419, gimple-match.c:49576
fix_loop_structure: fixing up loops for function
main (int argc, char * * argv)
{
  vector(4) float * vectp_pretmp.289;
  vector(4) float * vectp_pretmp.288;
  vector(4) float vect__378.287;
  vector(4) float vect__378.286;
  vector(4) float vect_array.285[2];
  vector(4) float * vectp_pretmp.284;
  float[8] * vectp_pretmp.283;
  int tmp.282;
  unsigned int ratio_mult_vf.281;
  unsigned int bnd.280;
  unsigned int ni_gap.279;
  unsigned int niters.278;
  _Bool thrust_lsm.277;
  int thrust_lsm.276;
  _Bool start_time_tv_sec_lsm.275;
  __time_t start_time_tv_sec_lsm.274;
  int d$4;
  int d$4;
  int d$previousValue;
  int d$previousValue;
  int i;
  float new_amplitude;
  float last_phase;
  int i;
  unsigned char * samplerf_buf;
  unsigned int wait_for_this_sample;
  int i;
  float q_value;
  float timetaken;
  unsigned char * through_buffer;
  int buffer_count;
  int time_now_sec;
  struct timespec end_time;
  struct timespec start_time;
  long long unsigned int all_bytes_written;
  struct timespec end_time;
  struct timespec start_time;
  int read_return;
  int flowcontrol_is_buffering;
  int flowcontrol_sleep;
  unsigned char * flowcontrol_buffer;
  int flowcontrol_bufindex;
  int got_bufsize;
  int flowcontrol_bufsize;
  int flowcontrol_readsize;
  int thrust;
  float prebuffer;
  int reads_per_second;
  int data_rate;
  struct ima_adpcm_state_t d;
  struct ima_adpcm_state_t d;
  struct complexf * last_overlap;
  int odd;
  int i;
  int i;
  struct fft_plan_s * plan_inverse_2;
  struct fft_plan_s * plan_inverse_1;
  struct complexf * output_2;
  struct complexf * output_1;
  struct complexf * output_fourier;
  struct fft_plan_s * plan_forward;
  struct complexf * input_fourier;
  struct complexf * input;
  struct fft_plan_s * plan_taps;
  struct complexf * taps_fft;
  struct complexf * taps;
  int overlap_length;
  int input_size;
  int fft_size;
  int taps_length;
  int fd;
  window_t window;
  float transition_bw;
  float high_cut;
  float low_cut;
  int i;
  int i;
  float time_taken_fft;
  struct fft_plan_s * plan;
  struct timespec end_time;
  struct timespec start_time;
  struct complexf * output;
  struct complexf * input;
  int fft_cycles;
  int fft_size;
  int i;
  int i;
  struct ima_adpcm_state_t d;
  unsigned char * output_buffer_cwa;
  short int * temp_buffer_cwa;
  float * input_buffer_cwa;
  int real_data_size;
  int fft_size;
  float * input_buffer_s2;
  float * input_buffer_s1;
  int fft_size;
  float add_db;
  int i;
  int i;
  int i;
  int seek_remain;
  struct fft_plan_s * plan;
  struct complexf * output;
  struct complexf * windowed;
  struct complexf * input;
  window_t window;
  int octave;
  int benchmark;
  int every_n_samples;
  int fft_size;
  static struct fractional_decimator_ff_t d;
  float * taps;
  int taps_length;
  window_t window;
  float transition_bw;
  float rate;
  static struct rational_resampler_ff_t d;
  float * taps;
  int taps_length;
  float * resampler_output_buffer;
  int resampler_output_buffer_size;
  window_t window;
  float transition_bw;
  int decimation;
  int interpolation;
  float * agc_output_buffer;
  static struct fastagc_ff_t input;
  float last_gain;
  float filter_alpha;
  short int attack_wait;
  float max_gain;
  float decay_rate;
  float attack_rate;
  float reference;
  short int hang_time;
  int i;
  int fft_length;
  struct complexf * taps;
  window_t window;
  int length;
  float high_cut;
  float low_cut;
  int i;
  float * taps;
  window_t window;
  int length;
  float cutoff_rate;
  int i;
  int output_size;
  int input_skip;
  float * taps;
  int padded_taps_length;
  int taps_length;
  window_t window;
  float transition_bw;
  int factor;
  int processed;
  int sample_rate;
  int i;
  int i;
  int nan_detect;
  float last_output;
  float tau;
  int sample_rate;
  struct complexf last_sample;
  struct complexf last_sample;
  float last_phase;
  static float last_dc_level = 0.0;
  float * dcblock_buffer;
  int dcblock_bufsize;
  static struct dcblock_preserve_t dcp;
  struct shift_addition_data_t data;
  float rate;
  float * obufptr;
  float * ibufptr;
  int current_size;
  int remain;
  struct shift_addition_data_t data;
  int fd;
  float rate;
  float starting_phase;
  struct decimating_shift_addition_status_t s;
  struct shift_addition_data_t d;
  int decimation;
  float rate;
  struct shift_table_data_t table_data;
  int table_size;
  float rate;
  float starting_phase;
  float rate;
  int i;
  int i;
  int buf_times;
  float to_repeat;
  float max_amplitude;
  float gain;
  int i;
  float _28;
  _Bool _30;
  int _65;
  int _66;
  int _67;
  int _68;
  int _69;
  int _70;
  int _71;
  int _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int _77;
  int _78;
  int _79;
  int _80;
  int _81;
  int _82;
  int _83;
  int _84;
  int _85;
  int _86;
  int _87;
  int _88;
  int _89;
  int _90;
  int _91;
  int _92;
  int _93;
  int _94;
  int _95;
  int _96;
  float _99;
  int iftmp.168_100;
  struct fft_plan_s * iftmp.184_102;
  float _103;
  char * _262;
  int iftmp.29_263;
  char * _266;
  int iftmp.30_267;
  char * _268;
  int the_bufsize.31_270;
  int the_bufsize.31_271;
  int iftmp.32_273;
  int _275;
  int the_bufsize.31_276;
  int iftmp.33_278;
  int _280;
  struct _IO_FILE * stdin.34_281;
  int _283;
  unsigned char * buffer_u8.35_284;
  int the_bufsize.31_285;
  unsigned int the_bufsize.36_286;
  struct _IO_FILE * stdin.34_287;
  unsigned char * buffer_u8.35_289;
  float * output_buffer.37_290;
  int the_bufsize.31_291;
  float * output_buffer.37_293;
  int the_bufsize.31_294;
  unsigned int the_bufsize.36_295;
  struct _IO_FILE * stdout.38_296;
  int iftmp.39_298;
  int _300;
  struct _IO_FILE * stdin.34_301;
  int _303;
  float * input_buffer.40_304;
  int the_bufsize.31_305;
  unsigned int the_bufsize.36_306;
  struct _IO_FILE * stdin.34_307;
  float * input_buffer.40_309;
  unsigned char * buffer_u8.35_310;
  int the_bufsize.31_311;
  unsigned char * buffer_u8.35_313;
  int the_bufsize.31_314;
  unsigned int the_bufsize.36_315;
  struct _IO_FILE * stdout.38_316;
  int iftmp.41_318;
  int _320;
  struct _IO_FILE * stdin.34_321;
  int _323;
  float * input_buffer.40_324;
  int the_bufsize.31_325;
  unsigned int the_bufsize.36_326;
  struct _IO_FILE * stdin.34_327;
  float * input_buffer.40_329;
  short int * buffer_i16.42_330;
  int the_bufsize.31_331;
  short int * buffer_i16.42_333;
  int the_bufsize.31_334;
  unsigned int the_bufsize.36_335;
  struct _IO_FILE * stdout.38_336;
  int iftmp.43_338;
  int _340;
  struct _IO_FILE * stdin.34_341;
  int _343;
  short int * buffer_i16.42_344;
  int the_bufsize.31_345;
  unsigned int the_bufsize.36_346;
  struct _IO_FILE * stdin.34_347;
  short int * buffer_i16.42_349;
  float * output_buffer.37_350;
  int the_bufsize.31_351;
  float * output_buffer.37_353;
  int the_bufsize.31_354;
  unsigned int the_bufsize.36_355;
  struct _IO_FILE * stdout.38_356;
  int iftmp.44_358;
  int _360;
  struct _IO_FILE * stdin.34_361;
  int _363;
  float * input_buffer.40_364;
  int the_bufsize.31_365;
  unsigned int the_bufsize.36_366;
  struct _IO_FILE * stdin.34_367;
  _Bool _369;
  unsigned int i.45_371;
  unsigned int _372;
  float * _373;
  unsigned int _376;
  float * _377;
  float _378;
  float * output_buffer.37_381;
  unsigned int the_bufsize.36_382;
  struct _IO_FILE * stdout.38_383;
  int iftmp.46_386;
  int _388;
  struct _IO_FILE * stdin.34_389;
  int _391;
  float * input_buffer.40_392;
  int the_bufsize.31_393;
  unsigned int the_bufsize.36_394;
  struct _IO_FILE * stdin.34_395;
  float * input_buffer.40_397;
  int the_bufsize.31_398;
  float * input_buffer.40_400;
  int the_bufsize.31_401;
  unsigned int the_bufsize.36_402;
  struct _IO_FILE * stdout.38_403;
  int iftmp.47_405;
  char * _406;
  int _409;
  struct _IO_FILE * stdin.34_410;
  int _412;
  float * input_buffer.40_413;
  int the_bufsize.31_414;
  unsigned int the_bufsize.36_415;
  struct _IO_FILE * stdin.34_416;
  float * input_buffer.40_418;
  float * output_buffer.37_419;
  int the_bufsize.31_420;
  float gain.48_421;
  float * output_buffer.37_423;
  int the_bufsize.31_424;
  unsigned int the_bufsize.36_425;
  struct _IO_FILE * stdout.38_426;
  int iftmp.49_429;
  char * _431;
  int _434;
  struct _IO_FILE * stdin.34_435;
  int _437;
  float * input_buffer.40_438;
  int the_bufsize.31_439;
  unsigned int the_bufsize.36_440;
  struct _IO_FILE * stdin.34_441;
  float * input_buffer.40_443;
  float * output_buffer.37_444;
  int the_bufsize.31_445;
  float max_amplitude.50_446;
  float * output_buffer.37_448;
  int the_bufsize.31_449;
  unsigned int the_bufsize.36_450;
  struct _IO_FILE * stdout.38_451;
  int iftmp.51_455;
  char * _456;
  char * _459;
  int _462;
  int the_bufsize.31_463;
  float * output_buffer.37_464;
  unsigned int i.52_465;
  unsigned int _466;
  float * _467;
  float to_repeat.53_468;
  int buf_times.54_471;
  float * output_buffer.37_472;
  int the_bufsize.31_473;
  unsigned int the_bufsize.36_474;
  struct _IO_FILE * stdout.38_475;
  int iftmp.55_480;
  char * _481;
  int _484;
  struct _IO_FILE * stdin.34_485;
  int _487;
  float * input_buffer.40_488;
  int the_bufsize.31_489;
  unsigned int the_bufsize.36_490;
  struct _IO_FILE * stdin.34_491;
  unsigned int _493;
  float * output_buffer.37_494;
  int the_bufsize.31_495;
  unsigned int the_bufsize.36_496;
  struct _IO_FILE * stdout.38_497;
  int iftmp.56_500;
  char * _503;
  char * _505;
  int _508;
  int table_size.57_509;
  struct _IO_FILE * stderr.58_511;
  struct _IO_FILE * stdin.34_513;
  int _515;
  float * input_buffer.40_516;
  int the_bufsize.31_517;
  unsigned int the_bufsize.36_518;
  struct _IO_FILE * stdin.34_519;
  unsigned int _521;
  float * input_buffer.40_522;
  float * output_buffer.37_523;
  int the_bufsize.31_524;
  float rate.59_525;
  float * output_buffer.37_528;
  int the_bufsize.31_529;
  unsigned int the_bufsize.36_530;
  struct _IO_FILE * stdout.38_531;
  int iftmp.60_537;
  char * _540;
  char * _542;
  int _545;
  int the_bufsize.31_546;
  int decimation.61_547;
  int _548;
  float rate.62_549;
  int decimation.61_550;
  struct _IO_FILE * stdin.34_554;
  int _556;
  float * input_buffer.40_557;
  int the_bufsize.31_558;
  unsigned int the_bufsize.36_559;
  struct _IO_FILE * stdin.34_560;
  unsigned int _562;
  float * input_buffer.40_563;
  float * output_buffer.37_564;
  int the_bufsize.31_565;
  int decimation.61_566;
  float * output_buffer.37_568;
  int _569;
  unsigned int _570;
  struct _IO_FILE * stdout.38_571;
  int iftmp.63_578;
  char * _582;
  int _585;
  int _588;
  float rate.64_589;
  struct _IO_FILE * stderr.58_591;
  float rate.64_592;
  double _593;
  struct _IO_FILE * stdin.34_595;
  int _597;
  float * input_buffer.40_598;
  int the_bufsize.31_599;
  unsigned int the_bufsize.36_600;
  struct _IO_FILE * stdin.34_601;
  unsigned int _603;
  unsigned int current_size.65_610;
  unsigned int _611;
  float * output_buffer.37_615;
  int the_bufsize.31_616;
  unsigned int the_bufsize.36_617;
  struct _IO_FILE * stdout.38_618;
  int _621;
  int iftmp.66_625;
  char * _626;
  float rate.67_628;
  int iftmp.68_634;
  int _636;
  struct _IO_FILE * stdin.34_637;
  int _639;
  float * input_buffer.40_640;
  int the_bufsize.31_641;
  unsigned int the_bufsize.36_642;
  struct _IO_FILE * stdin.34_643;
  float * input_buffer.40_645;
  float * output_buffer.37_646;
  int the_bufsize.31_647;
  float * output_buffer.37_649;
  int the_bufsize.31_650;
  unsigned int the_bufsize.36_651;
  struct _IO_FILE * stdout.38_652;
  int iftmp.69_654;
  char * _656;
  int dcblock_bufsize.70_658;
  unsigned int dcblock_bufsize.71_659;
  unsigned int _660;
  int dcblock_bufsize.70_664;
  struct _IO_FILE * stdin.34_665;
  int _667;
  int dcblock_bufsize.70_668;
  unsigned int dcblock_bufsize.72_669;
  struct _IO_FILE * stdin.34_670;
  int dcblock_bufsize.70_672;
  float last_dc_level.73_673;
  float last_dc_level.74_675;
  int dcblock_bufsize.70_677;
  unsigned int dcblock_bufsize.72_678;
  struct _IO_FILE * stdout.38_679;
  int iftmp.75_682;
  int _684;
  struct _IO_FILE * stdin.34_685;
  int _687;
  float * input_buffer.40_688;
  int the_bufsize.31_689;
  unsigned int the_bufsize.36_690;
  struct _IO_FILE * stdin.34_691;
  struct _IO_FILE * stdin.34_693;
  int _695;
  float * input_buffer.40_696;
  float * output_buffer.37_697;
  int the_bufsize.31_698;
  float * output_buffer.37_701;
  int the_bufsize.31_702;
  unsigned int the_bufsize.36_703;
  struct _IO_FILE * stdout.38_704;
  int iftmp.76_706;
  int _708;
  struct _IO_FILE * stdin.34_711;
  int _713;
  float * input_buffer.40_714;
  int the_bufsize.31_715;
  unsigned int the_bufsize.36_716;
  struct _IO_FILE * stdin.34_717;
  float * input_buffer.40_719;
  float * output_buffer.37_720;
  int the_bufsize.31_721;
  float * temp_f.77_722;
  float * output_buffer.37_724;
  int the_bufsize.31_725;
  unsigned int the_bufsize.36_726;
  struct _IO_FILE * stdout.38_727;
  int iftmp.78_731;
  int _733;
  struct _IO_FILE * stdin.34_736;
  int _738;
  float * input_buffer.40_739;
  int the_bufsize.31_740;
  unsigned int the_bufsize.36_741;
  struct _IO_FILE * stdin.34_742;
  float * input_buffer.40_744;
  float * output_buffer.37_745;
  int the_bufsize.31_746;
  float * output_buffer.37_748;
  int the_bufsize.31_749;
  unsigned int the_bufsize.36_750;
  struct _IO_FILE * stdout.38_751;
  int iftmp.79_755;
  int _757;
  char * _758;
  char * _760;
  struct _IO_FILE * stderr.58_762;
  float tau.80_763;
  double _764;
  int sample_rate.81_765;
  struct _IO_FILE * stdin.34_767;
  int _769;
  float * input_buffer.40_770;
  int the_bufsize.31_771;
  unsigned int the_bufsize.36_772;
  struct _IO_FILE * stdin.34_773;
  float * input_buffer.40_775;
  float * output_buffer.37_776;
  int the_bufsize.31_777;
  float tau.80_778;
  int sample_rate.81_779;
  float * output_buffer.37_782;
  int the_bufsize.31_783;
  unsigned int the_bufsize.36_784;
  struct _IO_FILE * stdout.38_785;
  int iftmp.82_790;
  int _792;
  struct _IO_FILE * stdin.34_793;
  int _795;
  float * input_buffer.40_796;
  int the_bufsize.31_797;
  unsigned int the_bufsize.36_798;
  struct _IO_FILE * stdin.34_799;
  int the_bufsize.31_801;
  float * input_buffer.40_802;
  unsigned int i.83_803;
  unsigned int _804;
  float * _805;
  float _806;
  int _808;
  struct _IO_FILE * stderr.58_810;
  float * input_buffer.40_812;
  int the_bufsize.31_813;
  unsigned int the_bufsize.36_814;
  struct _IO_FILE * stdout.38_815;
  int iftmp.84_818;
  int _820;
  struct _IO_FILE * stdin.34_821;
  int _823;
  float * input_buffer.40_824;
  int the_bufsize.31_825;
  unsigned int the_bufsize.36_826;
  struct _IO_FILE * stdin.34_827;
  int the_bufsize.31_829;
  struct _IO_FILE * stderr.58_830;
  float * input_buffer.40_831;
  unsigned int i.85_832;
  unsigned int _833;
  float * _834;
  float _835;
  double _836;
  int iftmp.86_840;
  char * _841;
  int _844;
  struct _IO_FILE * stdin.34_845;
  int _847;
  float * input_buffer.40_848;
  int the_bufsize.31_849;
  sizetype the_bufsize.87_850;
  sizetype processed.88_851;
  sizetype _852;
  sizetype _853;
  float * _854;
  struct _IO_FILE * stdin.34_856;
  float * input_buffer.40_858;
  float * output_buffer.37_859;
  int the_bufsize.31_860;
  int sample_rate.90_861;
  float * input_buffer.40_864;
  unsigned int processed.91_865;
  unsigned int _866;
  float * _867;
  int the_bufsize.31_868;
  int _869;
  unsigned int _870;
  unsigned int _871;
  float * output_buffer.37_873;
  struct _IO_FILE * stdout.38_875;
  int iftmp.92_879;
  int _881;
  struct _IO_FILE * stdin.34_882;
  int _884;
  float * input_buffer.40_885;
  int the_bufsize.31_886;
  unsigned int the_bufsize.36_887;
  struct _IO_FILE * stdin.34_888;
  float * input_buffer.40_890;
  float * output_buffer.37_891;
  int the_bufsize.31_892;
  float * output_buffer.37_894;
  int the_bufsize.31_895;
  unsigned int the_bufsize.36_896;
  struct _IO_FILE * stdout.38_897;
  int iftmp.93_900;
  int _902;
  struct _IO_FILE * stdin.34_903;
  int _905;
  float * input_buffer.40_906;
  int the_bufsize.31_907;
  unsigned int the_bufsize.36_908;
  struct _IO_FILE * stdin.34_909;
  float * input_buffer.40_911;
  float * output_buffer.37_912;
  int the_bufsize.31_913;
  float * output_buffer.37_915;
  int the_bufsize.31_916;
  unsigned int the_bufsize.36_917;
  struct _IO_FILE * stdout.38_918;
  int iftmp.94_921;
  char * _923;
  char * _926;
  char * _928;
  struct _IO_FILE * stderr.58_931;
  char * _933;
  int _936;
  int the_bufsize.31_937;
  int factor.95_938;
  int _939;
  float transition_bw.96_940;
  struct _IO_FILE * stderr.58_943;
  struct _IO_FILE * stderr.58_945;
  int _947;
  int _949;
  struct _IO_FILE * stderr.58_951;
  int _953;
  unsigned int _954;
  struct _IO_FILE * stderr.58_957;
  unsigned int taps.97_959;
  unsigned int _960;
  unsigned int _961;
  struct _IO_FILE * stderr.58_963;
  int _965;
  int _966;
  unsigned int _967;
  unsigned int _968;
  float * _969;
  int factor.95_972;
  float _973;
  float _974;
  float * input_buffer.40_976;
  int the_bufsize.31_977;
  unsigned int the_bufsize.36_978;
  struct _IO_FILE * stdin.34_979;
  struct _IO_FILE * stdin.34_981;
  int _983;
  float * input_buffer.40_984;
  float * output_buffer.37_985;
  int the_bufsize.31_986;
  int factor.95_987;
  float * output_buffer.37_990;
  unsigned int output_size.98_991;
  struct _IO_FILE * stdout.38_992;
  struct _IO_FILE * stdout.38_994;
  int factor.95_996;
  float * input_buffer.40_998;
  unsigned int input_skip.99_1000;
  unsigned int _1001;
  const void * _1002;
  int the_bufsize.31_1003;
  int _1004;
  unsigned int _1005;
  unsigned int _1006;
  float * input_buffer.40_1008;
  int the_bufsize.31_1009;
  int _1010;
  unsigned int _1011;
  unsigned int _1012;
  void * _1013;
  struct _IO_FILE * stdin.34_1015;
  int iftmp.101_1020;
  char * _1021;
  char * _1023;
  int length.102_1025;
  unsigned int length.103_1026;
  unsigned int _1027;
  char * _1028;
  struct _IO_FILE * stderr.58_1031;
  char * _1033;
  char * _1035;
  int iftmp.105_1036;
  int length.102_1038;
  unsigned int length.106_1039;
  unsigned int _1040;
  float cutoff_rate.107_1044;
  int length.102_1047;
  unsigned int i.108_1048;
  unsigned int _1049;
  float * _1050;
  float _1051;
  double _1052;
  struct _IO_FILE * stdout.38_1056;
  int iftmp.109_1061;
  char * _1062;
  char * _1064;
  char * _1066;
  int length.110_1068;
  unsigned int length.111_1069;
  unsigned int _1070;
  char * _1071;
  struct _IO_FILE * stderr.58_1074;
  char * _1076;
  char * _1078;
  int iftmp.113_1079;
  int length.110_1081;
  unsigned int length.114_1082;
  unsigned int _1083;
  float low_cut.115_1087;
  float high_cut.116_1088;
  int length.110_1091;
  unsigned int i.117_1092;
  unsigned int _1093;
  float * _1094;
  float _1095;
  double _1096;
  sizetype _1099;
  float * _1100;
  float _1101;
  double _1102;
  int _1108;
  struct _IO_FILE * stdout.38_1110;
  int iftmp.118_1116;
  char * _1118;
  char * _1121;
  char * _1124;
  char * _1127;
  char * _1130;
  char * _1133;
  char * _1136;
  int _1139;
  struct _IO_FILE * stdin.34_1140;
  int _1142;
  float * input_buffer.40_1143;
  int the_bufsize.31_1144;
  unsigned int the_bufsize.36_1145;
  struct _IO_FILE * stdin.34_1146;
  float * input_buffer.40_1148;
  float * output_buffer.37_1149;
  int the_bufsize.31_1150;
  float reference.119_1151;
  float attack_rate.120_1152;
  float decay_rate.121_1153;
  float max_gain.122_1154;
  short int hang_time.123_1155;
  short int attack_wait.124_1156;
  float filter_alpha.125_1157;
  float * output_buffer.37_1160;
  int the_bufsize.31_1161;
  unsigned int the_bufsize.36_1162;
  struct _IO_FILE * stdout.38_1163;
  int iftmp.126_1173;
  char * _1175;
  int _1178;
  char * _1180;
  int _1182;
  unsigned int _1183;
  void * _1185;
  void * _1190;
  int _1192;
  unsigned int _1194;
  void * _1196;
  struct _IO_FILE * stdin.34_1203;
  int _1205;
  float * _1206;
  int _1207;
  unsigned int _1208;
  struct _IO_FILE * stdin.34_1209;
  int _1212;
  unsigned int _1213;
  struct _IO_FILE * stdout.38_1214;
  int iftmp.127_1216;
  int iftmp.128_1217;
  int iftmp.137_1218;
  char * _1219;
  char * _1222;
  char * _1224;
  struct _IO_FILE * stderr.58_1227;
  char * _1229;
  int _1232;
  int the_bufsize.31_1233;
  float _1234;
  float rate.138_1235;
  float _1236;
  int _1237;
  float rate.138_1238;
  int the_bufsize.31_1239;
  float transition_bw.139_1241;
  struct _IO_FILE * stderr.58_1244;
  unsigned int taps_length.140_1246;
  unsigned int _1247;
  float rate.138_1250;
  float transition_bw.139_1251;
  float _1252;
  double _1253;
  double _1254;
  float _1255;
  struct _IO_FILE * stdin.34_1257;
  int _1259;
  int _1260;
  int the_bufsize.31_1261;
  float * input_buffer.40_1263;
  unsigned int _1264;
  unsigned int _1265;
  float * _1266;
  int the_bufsize.31_1267;
  int _1268;
  unsigned int _1269;
  unsigned int _1270;
  float * input_buffer.40_1272;
  int the_bufsize.31_1273;
  int _1274;
  int _1275;
  unsigned int _1276;
  unsigned int _1277;
  float * _1278;
  unsigned int _1279;
  struct _IO_FILE * stdin.34_1280;
  float * input_buffer.40_1282;
  float * output_buffer.37_1283;
  int the_bufsize.31_1284;
  float rate.138_1285;
  float * output_buffer.37_1287;
  int _1288;
  unsigned int _1289;
  struct _IO_FILE * stdout.38_1290;
  int iftmp.141_1294;
  char * _1295;
  int fft_size.142_1297;
  int _1299;
  char * _1300;
  char * _1302;
  char * _1305;
  int iftmp.143_1306;
  _Bool _1307;
  int _1308;
  int iftmp.144_1309;
  _Bool _1310;
  int _1311;
  char * _1312;
  int iftmp.145_1313;
  _Bool _1314;
  unsigned int _1315;
  int iftmp.146_1317;
  _Bool _1318;
  float * _1319;
  int _1322;
  int fft_size.142_1323;
  int fft_size.142_1324;
  unsigned int fft_size.147_1325;
  unsigned int _1326;
  int fft_size.142_1329;
  unsigned int fft_size.147_1330;
  unsigned int _1331;
  int fft_size.142_1334;
  unsigned int fft_size.147_1335;
  unsigned int _1336;
  struct _IO_FILE * stderr.58_1339;
  struct _IO_FILE * stderr.58_1344;
  int fft_size.142_1346;
  struct _IO_FILE * stdin.34_1348;
  int _1350;
  int every_n_samples.148_1351;
  int fft_size.142_1352;
  unsigned int fft_size.149_1353;
  struct _IO_FILE * stdin.34_1354;
  int every_n_samples.148_1356;
  int fft_size.142_1357;
  float * temp_f.77_1359;
  int the_bufsize.31_1360;
  int _1361;
  unsigned int _1362;
  struct _IO_FILE * stdin.34_1363;
  int the_bufsize.31_1365;
  int _1367;
  unsigned int i.150_1368;
  unsigned int _1369;
  struct complexf * _1370;
  int _1371;
  unsigned int _1372;
  unsigned int _1373;
  struct complexf * _1374;
  sizetype fft_size.151_1377;
  sizetype every_n_samples.152_1378;
  sizetype _1379;
  sizetype _1380;
  struct complexf * _1381;
  struct _IO_FILE * stdin.34_1382;
  int fft_size.142_1384;
  int fft_size.142_1387;
  unsigned int fft_size.149_1388;
  struct _IO_FILE * stdout.38_1389;
  int fft_size.142_1392;
  int fft_size.142_1394;
  unsigned int i.154_1395;
  unsigned int _1396;
  float * _1397;
  float _1398;
  double _1399;
  sizetype _1400;
  float * _1401;
  float _1402;
  double _1403;
  int fft_size.142_1406;
  int _1407;
  unsigned int i.155_1408;
  unsigned int _1409;
  float * _1410;
  float _1411;
  double _1412;
  sizetype _1413;
  float * _1414;
  float _1415;
  double _1416;
  int iftmp.156_1422;
  char * _1424;
  int _1427;
  struct _IO_FILE * stdin.34_1428;
  int _1430;
  float * input_buffer.40_1431;
  int the_bufsize.31_1432;
  unsigned int the_bufsize.36_1433;
  struct _IO_FILE * stdin.34_1434;
  float * input_buffer.40_1436;
  float * output_buffer.37_1437;
  int the_bufsize.31_1438;
  float add_db.157_1439;
  float * output_buffer.37_1441;
  int the_bufsize.31_1442;
  unsigned int the_bufsize.36_1443;
  struct _IO_FILE * stdout.38_1444;
  int iftmp.158_1447;
  char * _1448;
  int _1451;
  int fft_size.159_1452;
  int fft_size.159_1453;
  unsigned int fft_size.160_1454;
  unsigned int _1455;
  unsigned int _1456;
  struct _IO_FILE * stdin.34_1461;
  int _1463;
  int fft_size.159_1464;
  int _1465;
  unsigned int _1466;
  struct _IO_FILE * stdin.34_1467;
  int fft_size.159_1469;
  int _1470;
  unsigned int _1471;
  struct _IO_FILE * stdin.34_1472;
  int fft_size.159_1474;
  int _1475;
  unsigned int _1476;
  struct _IO_FILE * stdout.38_1477;
  int fft_size.159_1479;
  int _1480;
  unsigned int _1481;
  struct _IO_FILE * stdout.38_1482;
  int iftmp.161_1485;
  char * _1486;
  int fft_size.162_1488;
  int _1491;
  unsigned int real_data_size.163_1492;
  unsigned int _1493;
  unsigned int _1496;
  int _1499;
  unsigned int _1500;
  struct _IO_FILE * stdin.34_1504;
  int _1506;
  float * _1507;
  int fft_size.162_1508;
  unsigned int fft_size.164_1509;
  struct _IO_FILE * stdin.34_1510;
  unsigned int i.165_1512;
  unsigned int _1513;
  float * _1514;
  float _1515;
  unsigned int i.166_1518;
  unsigned int _1519;
  short int * _1520;
  unsigned int _1521;
  float * _1522;
  float _1523;
  float _1524;
  short int _1525;
  struct _IO_FILE * stdout.38_1529;
  int iftmp.167_1533;
  char * _1534;
  char * _1536;
  char * _1538;
  int iftmp.169_1539;
  struct _IO_FILE * stderr.58_1540;
  int fft_size.170_1542;
  unsigned int fft_size.171_1543;
  unsigned int _1544;
  int fft_size.170_1547;
  unsigned int fft_size.171_1548;
  unsigned int _1549;
  long int _1553;
  unsigned int _1554;
  int fft_size.170_1556;
  unsigned int i.172_1557;
  unsigned int _1558;
  float * _1559;
  int _1561;
  float _1562;
  float _1563;
  sizetype _1565;
  float * _1566;
  int _1568;
  float _1569;
  float _1570;
  struct _IO_FILE * stderr.58_1573;
  int fft_size.170_1576;
  struct _IO_FILE * stderr.58_1580;
  long int _1581;
  long int _1582;
  long int _1583;
  double _1584;
  long int _1585;
  long int _1586;
  long int _1587;
  double _1588;
  double _1589;
  double _1590;
  int fft_cycles.173_1593;
  long int _1597;
  long int _1598;
  long int _1599;
  double _1600;
  long int _1601;
  long int _1602;
  long int _1603;
  double _1604;
  double _1605;
  double _1606;
  struct _IO_FILE * stderr.58_1608;
  int fft_cycles.173_1609;
  int fft_size.170_1610;
  double _1611;
  float _1612;
  float _1613;
  double _1614;
  int iftmp.174_1620;
  int _1624;
  char * _1626;
  char * _1628;
  char * _1630;
  char * _1632;
  struct _IO_FILE * stderr.58_1635;
  char * _1637;
  float transition_bw.175_1639;
  int _1644;
  int _1646;
  struct _IO_FILE * stderr.58_1649;
  int _1652;
  unsigned int fft_size.176_1653;
  unsigned int _1656;
  void * _1677;
  unsigned int i.178_1678;
  unsigned int _1679;
  float * _1680;
  sizetype _1681;
  float * _1682;
  unsigned int i.179_1686;
  unsigned int _1687;
  float * _1688;
  sizetype _1689;
  float * _1690;
  struct _IO_FILE * stderr.58_1694;
  float low_cut.180_1695;
  double _1696;
  float high_cut.181_1697;
  double _1698;
  float low_cut.180_1700;
  float high_cut.181_1701;
  struct _IO_FILE * stdin.34_1704;
  int _1706;
  unsigned int input_size.182_1707;
  struct _IO_FILE * stdin.34_1708;
  void * _1710;
  unsigned int _1711;
  void * _1714;
  struct _IO_FILE * stdout.38_1715;
  int _1718;
  float _1719;
  struct _IO_FILE * stdin.219_1724;
  int iftmp.186_1725;
  int _1727;
  int _1728;
  struct _IO_FILE * stdin.34_1730;
  int _1732;
  short int * buffer_i16.42_1733;
  int the_bufsize.31_1734;
  unsigned int the_bufsize.36_1735;
  struct _IO_FILE * stdin.34_1736;
  short int * buffer_i16.42_1738;
  unsigned char * buffer_u8.35_1739;
  int the_bufsize.31_1740;
  unsigned char * buffer_u8.35_1742;
  int the_bufsize.31_1743;
  int _1744;
  unsigned int _1745;
  struct _IO_FILE * stdout.38_1746;
  int iftmp.187_1749;
  int _1752;
  int _1753;
  struct _IO_FILE * stdin.34_1754;
  int _1756;
  unsigned char * buffer_u8.35_1757;
  int the_bufsize.31_1758;
  unsigned int the_bufsize.36_1759;
  struct _IO_FILE * stdin.34_1760;
  unsigned char * buffer_u8.35_1762;
  short int * buffer_i16.42_1763;
  int the_bufsize.31_1764;
  short int * buffer_i16.42_1766;
  int the_bufsize.31_1767;
  int _1768;
  unsigned int _1769;
  struct _IO_FILE * stdout.38_1770;
  int iftmp.188_1773;
  char * _1774;
  char * _1777;
  int iftmp.189_1778;
  char * _1782;
  char * _1786;
  int reads_per_second.190_1790;
  int data_rate.191_1791;
  double _1792;
  double _1793;
  double _1794;
  int data_rate.191_1796;
  int reads_per_second.192_1797;
  double _1799;
  int reads_per_second.190_1800;
  float _1801;
  float prebuffer.193_1802;
  float _1803;
  double _1804;
  double _1805;
  unsigned int flowcontrol_bufsize.194_1807;
  double _1810;
  double _1811;
  int _1814;
  int _1815;
  struct _IO_FILE * stdout.38_1817;
  struct _IO_FILE * stderr.58_1819;
  struct _IO_FILE * stdin.34_1821;
  int _1823;
  struct _IO_FILE * stderr.58_1824;
  sizetype flowcontrol_bufindex.195_1826;
  unsigned char * _1827;
  int _1828;
  unsigned int _1829;
  struct _IO_FILE * stderr.58_1832;
  struct _IO_FILE * stderr.58_1835;
  int _1840;
  long long unsigned int _1841;
  long long unsigned int _1842;
  double _1843;
  long int _1844;
  long int _1845;
  long int _1846;
  double _1847;
  long int _1848;
  long int _1849;
  long int _1850;
  double _1851;
  double _1852;
  double _1853;
  double _1854;
  int data_rate.191_1855;
  double _1856;
  int thrust.198_1857;
  long long unsigned int _1859;
  long int _1861;
  double _1862;
  double _1863;
  long int _1865;
  unsigned int flowcontrol_readsize.200_1867;
  struct _IO_FILE * stdout.38_1869;
  unsigned char * _1871;
  int _1872;
  unsigned int _1873;
  long long unsigned int _1875;
  int thrust.196_1877;
  int thrust.203_1878;
  unsigned int flowcontrol_sleep.204_1880;
  int iftmp.205_1889;
  int _1891;
  int the_bufsize.31_1892;
  unsigned int the_bufsize.133_1893;
  unsigned int _1894;
  struct _IO_FILE * stdin.34_1897;
  int _1899;
  int the_bufsize.31_1900;
  unsigned int the_bufsize.36_1901;
  struct _IO_FILE * stdin.34_1902;
  float _1906;
  long int _1907;
  long int _1908;
  long int _1909;
  double _1910;
  long int _1911;
  long int _1912;
  long int _1913;
  double _1914;
  double _1915;
  double _1916;
  struct _IO_FILE * stderr.58_1918;
  float _1919;
  int the_bufsize.31_1920;
  float _1921;
  float _1923;
  float _1924;
  long unsigned int _1925;
  int the_bufsize.31_1928;
  unsigned int the_bufsize.36_1929;
  struct _IO_FILE * stdout.38_1930;
  int iftmp.206_1935;
  char * _1938;
  int _1941;
  struct _IO_FILE * stdin.34_1942;
  int _1944;
  float * input_buffer.40_1945;
  int the_bufsize.31_1946;
  unsigned int the_bufsize.36_1947;
  struct _IO_FILE * stdin.34_1948;
  int the_bufsize.31_1950;
  float * output_buffer.37_1951;
  unsigned int i.207_1952;
  unsigned int _1953;
  float * _1954;
  float * input_buffer.40_1955;
  unsigned int _1956;
  float * _1957;
  float _1958;
  sizetype _1960;
  float * _1961;
  float q_value.208_1962;
  float * output_buffer.37_1965;
  unsigned int the_bufsize.36_1966;
  struct _IO_FILE * stdout.38_1967;
  int iftmp.209_1971;
  char * _1973;
  int _1976;
  int the_bufsize.31_1977;
  int _1978;
  unsigned int _1979;
  struct _IO_FILE * stdin.34_1982;
  int _1984;
  float * input_buffer.40_1985;
  int the_bufsize.31_1986;
  unsigned int the_bufsize.36_1987;
  struct _IO_FILE * stdin.34_1988;
  int the_bufsize.31_1990;
  int _1991;
  sizetype _1992;
  unsigned char * _1993;
  float * input_buffer.40_1994;
  unsigned int i.210_1995;
  unsigned int _1996;
  float * _1997;
  float _1998;
  double _1999;
  sizetype _2001;
  unsigned char * _2002;
  unsigned int wait_for_this_sample.211_2003;
  sizetype _2005;
  unsigned char * _2006;
  unsigned int the_bufsize.36_2009;
  struct _IO_FILE * stdout.38_2010;
  int iftmp.212_2013;
  int _2015;
  struct _IO_FILE * stdin.34_2016;
  int _2018;
  float * input_buffer.40_2019;
  int the_bufsize.31_2020;
  unsigned int the_bufsize.36_2021;
  struct _IO_FILE * stdin.34_2022;
  float * input_buffer.40_2024;
  float * output_buffer.37_2025;
  int the_bufsize.31_2026;
  float * output_buffer.37_2028;
  int the_bufsize.31_2029;
  unsigned int the_bufsize.36_2030;
  struct _IO_FILE * stdout.38_2031;
  int iftmp.213_2033;
  int _2035;
  struct _IO_FILE * stdin.34_2036;
  int _2038;
  float * input_buffer.40_2039;
  int the_bufsize.31_2040;
  unsigned int the_bufsize.36_2041;
  struct _IO_FILE * stdin.34_2042;
  float * input_buffer.40_2044;
  float * output_buffer.37_2045;
  int the_bufsize.31_2046;
  float * output_buffer.37_2049;
  int the_bufsize.31_2050;
  unsigned int the_bufsize.36_2051;
  struct _IO_FILE * stdout.38_2052;
  int iftmp.214_2055;
  char * _2056;
  int _2059;
  struct _IO_FILE * stdin.34_2060;
  int _2062;
  float * input_buffer.40_2063;
  int the_bufsize.31_2064;
  unsigned int the_bufsize.36_2065;
  struct _IO_FILE * stdin.34_2066;
  float * input_buffer.40_2068;
  float * output_buffer.37_2069;
  int the_bufsize.31_2070;
  float new_amplitude.215_2071;
  float * output_buffer.37_2073;
  int the_bufsize.31_2074;
  unsigned int the_bufsize.36_2075;
  struct _IO_FILE * stdout.38_2076;
  int iftmp.216_2080;
  int _2082;
  struct _IO_FILE * stdin.34_2083;
  int _2085;
  float * input_buffer.40_2086;
  int the_bufsize.31_2087;
  unsigned int the_bufsize.36_2088;
  struct _IO_FILE * stdin.34_2089;
  int the_bufsize.31_2091;
  float * output_buffer.37_2092;
  unsigned int i.217_2093;
  unsigned int _2094;
  short int * _2095;
  float * input_buffer.40_2096;
  unsigned int _2097;
  short int * _2098;
  short int _2099;
  sizetype _2101;
  short int * _2102;
  short int _2103;
  float * output_buffer.37_2106;
  unsigned int the_bufsize.36_2107;
  struct _IO_FILE * stdout.38_2108;
  int iftmp.218_2111;
  char * _2112;
  char * _2114;
  char * _2117;
  char * _2119;
  struct _IO_FILE * stderr.58_2122;
  char * _2124;
  struct _IO_FILE * stderr.58_2126;
  int _2129;
  int decimation.129_2130;
  int interpolation.130_2131;
  int the_bufsize.31_2132;
  int the_bufsize.31_2133;
  int the_bufsize.31_2135;
  int interpolation.130_2136;
  int _2137;
  unsigned int resampler_output_buffer_size.131_2139;
  unsigned int _2140;
  float transition_bw.135_2143;
  unsigned int taps_length.136_2146;
  unsigned int _2147;
  int interpolation.130_2150;
  int decimation.129_2151;
  struct _IO_FILE * stdin.34_2153;
  int _2155;
  int _2156;
  int the_bufsize.31_2157;
  float * input_buffer.40_2159;
  unsigned int _2160;
  unsigned int _2161;
  float * _2162;
  int the_bufsize.31_2163;
  int _2164;
  unsigned int _2165;
  unsigned int _2166;
  float * input_buffer.40_2168;
  int the_bufsize.31_2169;
  int _2170;
  int _2171;
  unsigned int _2172;
  unsigned int _2173;
  float * _2174;
  unsigned int _2175;
  struct _IO_FILE * stdin.34_2176;
  float * input_buffer.40_2178;
  int the_bufsize.31_2179;
  int interpolation.130_2180;
  int decimation.129_2181;
  int _2182;
  int _2184;
  unsigned int _2185;
  struct _IO_FILE * stdout.38_2186;
  struct _IO_FILE * stdin.219_2191;
  struct _IO_FILE * stderr.0_2192;
  struct _IO_FILE * stderr.0_2193;
  int env_csdr_dynamic_bufsize_on.24_2194;
  int env_csdr_dynamic_bufsize_on.24_2195;
  int _2196;
  int _2197;
  int _2198;
  int env_csdr_dynamic_bufsize_on.24_2199;
  int _2200;
  int _2201;
  int _2202;
  int env_csdr_dynamic_bufsize_on.24_2203;
  int _2204;
  int _2205;
  int _2206;
  int env_csdr_dynamic_bufsize_on.24_2207;
  int _2208;
  int _2209;
  int _2210;
  int env_csdr_dynamic_bufsize_on.24_2211;
  int _2212;
  int _2213;
  int _2214;
  int env_csdr_dynamic_bufsize_on.24_2215;
  int _2216;
  int _2217;
  int _2218;
  int env_csdr_dynamic_bufsize_on.24_2219;
  int _2220;
  int _2221;
  int _2222;
  struct _IO_FILE * stderr.0_2223;
  int env_csdr_dynamic_bufsize_on.24_2224;
  int _2225;
  int _2226;
  int _2227;
  int env_csdr_dynamic_bufsize_on.24_2228;
  int _2229;
  int _2230;
  int _2231;
  struct _IO_FILE * stderr.0_2232;
  int env_csdr_dynamic_bufsize_on.24_2233;
  int _2234;
  int _2235;
  int _2236;
  struct _IO_FILE * stderr.0_2237;
  int env_csdr_dynamic_bufsize_on.24_2238;
  int _2239;
  int _2240;
  int _2241;
  struct _IO_FILE * stderr.0_2242;
  int env_csdr_dynamic_bufsize_on.24_2243;
  int _2244;
  int _2245;
  int _2246;
  struct _IO_FILE * stderr.0_2247;
  int env_csdr_dynamic_bufsize_on.24_2248;
  struct _IO_FILE * stderr.0_2249;
  int env_csdr_dynamic_bufsize_on.24_2250;
  int _2251;
  int _2252;
  int _2253;
  struct _IO_FILE * stderr.0_2254;
  int env_csdr_dynamic_bufsize_on.24_2255;
  int _2256;
  int _2257;
  int _2258;
  int env_csdr_dynamic_bufsize_on.24_2259;
  int env_csdr_dynamic_bufsize_on.24_2261;
  int _2262;
  int _2263;
  int _2264;
  int env_csdr_dynamic_bufsize_on.24_2265;
  int _2266;
  int _2267;
  int _2268;
  int env_csdr_dynamic_bufsize_on.24_2269;
  int _2270;
  int _2271;
  int _2272;
  struct _IO_FILE * stderr.0_2273;
  int env_csdr_dynamic_bufsize_on.24_2274;
  int _2275;
  int _2276;
  int _2277;
  int env_csdr_dynamic_bufsize_on.24_2278;
  int _2279;
  int _2280;
  int _2281;
  int env_csdr_dynamic_bufsize_on.24_2282;
  int _2283;
  int _2284;
  int _2285;
  struct _IO_FILE * stderr.0_2286;
  int env_csdr_dynamic_bufsize_on.24_2287;
  int _2288;
  int _2289;
  int _2290;
  struct _IO_FILE * stderr.0_2291;
  int env_csdr_dynamic_bufsize_on.24_2292;
  int _2293;
  int _2294;
  int _2295;
  int env_csdr_dynamic_bufsize_on.24_2296;
  int _2297;
  int _2298;
  int _2299;
  struct _IO_FILE * stderr.0_2300;
  int env_csdr_dynamic_bufsize_on.24_2301;
  struct _IO_FILE * stderr.0_2302;
  struct _IO_FILE * stderr.0_2303;
  struct _IO_FILE * stderr.0_2304;
  struct _IO_FILE * stderr.0_2305;
  int env_csdr_dynamic_bufsize_on.24_2306;
  int _2307;
  int _2308;
  int _2309;
  int env_csdr_dynamic_bufsize_on.24_2310;
  struct _IO_FILE * stderr.0_2311;
  int env_csdr_dynamic_bufsize_on.24_2312;
  int env_csdr_dynamic_bufsize_on.24_2313;
  struct _IO_FILE * stderr.0_2314;
  int env_csdr_dynamic_bufsize_on.24_2315;
  struct _IO_FILE * stderr.0_2316;
  struct _IO_FILE * stderr.0_2317;
  int env_csdr_dynamic_bufsize_on.24_2318;
  int env_csdr_dynamic_bufsize_on.24_2320;
  int _2321;
  int _2322;
  int _2323;
  struct _IO_FILE * stderr.0_2324;
  int env_csdr_dynamic_bufsize_on.24_2325;
  struct _IO_FILE * stderr.0_2327;
  int env_csdr_dynamic_bufsize_on.24_2328;
  struct _IO_FILE * stderr.0_2330;
  struct _IO_FILE * stderr.0_2331;
  struct _IO_FILE * stderr.0_2332;
  struct _IO_FILE * stderr.0_2333;
  int env_csdr_dynamic_bufsize_on.24_2334;
  int _2335;
  int _2336;
  int _2337;
  int env_csdr_dynamic_bufsize_on.24_2338;
  int _2339;
  int _2340;
  int _2341;
  int env_csdr_dynamic_bufsize_on.24_2342;
  int _2343;
  int _2344;
  int _2345;
  struct _IO_FILE * stderr.0_2346;
  int env_csdr_dynamic_bufsize_on.24_2347;
  int env_csdr_dynamic_bufsize_on.24_2349;
  int _2350;
  int _2351;
  int _2352;
  int env_csdr_dynamic_bufsize_on.24_2353;
  int _2354;
  int _2355;
  int _2356;
  struct _IO_FILE * stderr.0_2357;
  int env_csdr_dynamic_bufsize_on.24_2358;
  int _2359;
  int _2360;
  int _2361;
  int env_csdr_dynamic_bufsize_on.24_2362;
  int _2363;
  int _2364;
  int _2365;
  int env_csdr_dynamic_bufsize_on.24_2366;
  int _2367;
  int _2368;
  int _2369;
  struct _IO_FILE * stderr.0_2370;
  int env_csdr_dynamic_bufsize_on.24_2371;
  int _2372;
  int _2373;
  int _2374;
  int env_csdr_dynamic_bufsize_on.24_2375;
  int _2376;
  int _2377;
  int _2378;
  struct _IO_FILE * stderr.0_2379;
  int env_csdr_dynamic_bufsize_on.24_2427;
  struct _IO_FILE * stderr.0_2509;
  int _2517;
  _Bool _2523;
  int _2527;
  unsigned int _2597;
  float * pretmp_2633;
  double reciptmp_2637;
  unsigned int ivtmp_2639;
  unsigned int ivtmp_2640;
  unsigned int _2641;
  int _2644;
  int _2645;
  float * pretmp_2657;
  int data_rate.191_2658;
  double _2659;
  long int _2660;
  int length.110_2661;
  _Bool _2669;
  sizetype _2670;
  unsigned int _2671;
  sizetype _2672;
  float * _2673;
  _Bool _2677;
  float * _2678;
  sizetype _2681;
  int _2683;
  sizetype _2686;
  _Bool _2688;
  _Bool _2690;
  int length.102_2692;
  unsigned int length.106_2693;
  unsigned int _2694;
  float cutoff_rate.107_2697;
  int length.102_2700;
  unsigned int length.106_2701;
  unsigned int _2702;
  float cutoff_rate.107_2705;
  _Bool _2707;
  unsigned int ivtmp_2711;
  int length.110_2712;
  unsigned int length.114_2713;
  unsigned int _2714;
  float low_cut.115_2717;
  float high_cut.116_2718;
  unsigned int i.45_2720;
  int length.110_2721;
  unsigned int length.114_2722;
  unsigned int _2723;
  float low_cut.115_2726;
  float high_cut.116_2727;
  unsigned int _2729;
  float * _2730;
  unsigned int _2744;
  float * _2745;
  float _2746;
  unsigned int ivtmp_2747;
  int fft_size.142_2750;
  int fft_size.142_2754;
  int the_bufsize.31_2757;
  int iftmp.104_2770;
  unsigned int _2771;
  int iftmp.112_2772;
  struct fft_plan_s * iftmp.183_2773;
  unsigned int i.45_2774;
  unsigned int _2775;
  float * _2776;
  unsigned int _2778;
  _Bool _2783;
  _Bool _2786;

  <bb 2>:
  parse_env ();
  argv_global = argv_259(D);
  if (argc_261(D) <= 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG why => 0B
  # DEBUG D#1 => 0B
  # DEBUG D#2 => D#1
  # DEBUG why => D#2
  stderr.0_2509 = stderr;
  __builtin_fputs (&usage, stderr.0_2509);
  goto <bb 692>;

  <bb 4>:
  # DEBUG __s2_len => 6
  _262 = MEM[(char * *)argv_259(D) + 4B];
  iftmp.29_263 = __builtin_strcmp (_262, "--help");
  if (iftmp.29_263 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  fcntl (0, 1031, 2097152);
  fcntl (1, 1031, 2097152);
  # DEBUG __s2_len => 6
  _266 = MEM[(char * *)argv_259(D) + 4B];
  iftmp.30_267 = __builtin_strcmp (_266, "setbuf");
  if (iftmp.30_267 == 0)
    goto <bb 6>;
  else
    goto <bb 13>;

  <bb 6>:
  if (argc_261(D) == 2)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # DEBUG why => "need required parameter (buffer size)"
  stderr.0_2192 = stderr;
  fprintf (stderr.0_2192, "csdr: %s\n\n", "need required parameter (buffer size)");
  # DEBUG why => NULL
  goto <bb 692>;

  <bb 8>:
  _268 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_268, "%d", &the_bufsize);
  the_bufsize.31_270 = the_bufsize;
  if (the_bufsize.31_270 <= 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG why => "buffer size <= 0 is invalid"
  stderr.0_2193 = stderr;
  fprintf (stderr.0_2193, "csdr: %s\n\n", "buffer size <= 0 is invalid");
  # DEBUG why => NULL
  goto <bb 692>;

  <bb 10>:
  # DEBUG size => the_bufsize.31_270
  env_csdr_dynamic_bufsize_on.24_2194 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2194 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  sendbufsize.part.5 (the_bufsize.31_270);

  <bb 12>:
  # DEBUG size => NULL
  the_bufsize.31_271 = the_bufsize;
  clone_ (the_bufsize.31_271);

  <bb 13>:
  # DEBUG __s2_len => 5
  iftmp.32_273 = __builtin_strcmp (_266, "clone");
  if (iftmp.32_273 == 0)
    goto <bb 14>;
  else
    goto <bb 20>;

  <bb 14>:
  _275 = initialize_buffers ();
  # DEBUG size => _275
  env_csdr_dynamic_bufsize_on.24_2195 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2195 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _2196 = env_csdr_fixed_bufsize;
  goto <bb 17>;

  <bb 16>:
  _2197 = sendbufsize.part.5 (_275);

  <bb 17>:
  # _2198 = PHI <_2196(15), _2197(16)>
  # DEBUG size => NULL
  if (_2198 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 692>;

  <bb 19>:
  the_bufsize.31_276 = the_bufsize;
  clone_ (the_bufsize.31_276);

  <bb 20>:
  # DEBUG __s2_len => 12
  iftmp.33_278 = __builtin_strcmp (_266, "convert_u8_f");
  if (iftmp.33_278 == 0)
    goto <bb 21>;
  else
    goto <bb 29>;

  <bb 21>:
  _280 = initialize_buffers ();
  # DEBUG size => _280
  env_csdr_dynamic_bufsize_on.24_2199 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2199 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  _2200 = env_csdr_fixed_bufsize;
  goto <bb 24>;

  <bb 23>:
  _2201 = sendbufsize.part.5 (_280);

  <bb 24>:
  # _2202 = PHI <_2200(22), _2201(23)>
  # DEBUG size => NULL
  if (_2202 == 0)
    goto <bb 18>;
  else
    goto <bb 25>;

  <bb 25>:

  <bb 26>:
  stdin.34_281 = stdin;
  _283 = feof (stdin.34_281);
  if (_283 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  goto <bb 692>;

  <bb 28>:
  buffer_u8.35_284 = buffer_u8;
  the_bufsize.31_285 = the_bufsize;
  the_bufsize.36_286 = (unsigned int) the_bufsize.31_285;
  stdin.34_287 = stdin;
  fread (buffer_u8.35_284, 1, the_bufsize.36_286, stdin.34_287);
  buffer_u8.35_289 = buffer_u8;
  output_buffer.37_290 = output_buffer;
  the_bufsize.31_291 = the_bufsize;
  convert_u8_f (buffer_u8.35_289, output_buffer.37_290, the_bufsize.31_291);
  output_buffer.37_293 = output_buffer;
  the_bufsize.31_294 = the_bufsize;
  the_bufsize.36_295 = (unsigned int) the_bufsize.31_294;
  stdout.38_296 = stdout;
  fwrite (output_buffer.37_293, 4, the_bufsize.36_295, stdout.38_296);
  goto <bb 26>;

  <bb 29>:
  # DEBUG __s2_len => 12
  iftmp.39_298 = __builtin_strcmp (_266, "convert_f_u8");
  if (iftmp.39_298 == 0)
    goto <bb 30>;
  else
    goto <bb 37>;

  <bb 30>:
  _300 = initialize_buffers ();
  # DEBUG size => _300
  env_csdr_dynamic_bufsize_on.24_2203 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2203 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _2204 = env_csdr_fixed_bufsize;
  goto <bb 33>;

  <bb 32>:
  _2205 = sendbufsize.part.5 (_300);

  <bb 33>:
  # _2206 = PHI <_2204(31), _2205(32)>
  # DEBUG size => NULL
  if (_2206 == 0)
    goto <bb 18>;
  else
    goto <bb 34>;

  <bb 34>:

  <bb 35>:
  stdin.34_301 = stdin;
  _303 = feof (stdin.34_301);
  if (_303 != 0)
    goto <bb 27>;
  else
    goto <bb 36>;

  <bb 36>:
  input_buffer.40_304 = input_buffer;
  the_bufsize.31_305 = the_bufsize;
  the_bufsize.36_306 = (unsigned int) the_bufsize.31_305;
  stdin.34_307 = stdin;
  fread (input_buffer.40_304, 4, the_bufsize.36_306, stdin.34_307);
  input_buffer.40_309 = input_buffer;
  buffer_u8.35_310 = buffer_u8;
  the_bufsize.31_311 = the_bufsize;
  convert_f_u8 (input_buffer.40_309, buffer_u8.35_310, the_bufsize.31_311);
  buffer_u8.35_313 = buffer_u8;
  the_bufsize.31_314 = the_bufsize;
  the_bufsize.36_315 = (unsigned int) the_bufsize.31_314;
  stdout.38_316 = stdout;
  fwrite (buffer_u8.35_313, 1, the_bufsize.36_315, stdout.38_316);
  goto <bb 35>;

  <bb 37>:
  # DEBUG __s2_len => 13
  iftmp.41_318 = __builtin_strcmp (_266, "convert_f_i16");
  if (iftmp.41_318 == 0)
    goto <bb 38>;
  else
    goto <bb 45>;

  <bb 38>:
  _320 = initialize_buffers ();
  # DEBUG size => _320
  env_csdr_dynamic_bufsize_on.24_2207 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2207 == 0)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  _2208 = env_csdr_fixed_bufsize;
  goto <bb 41>;

  <bb 40>:
  _2209 = sendbufsize.part.5 (_320);

  <bb 41>:
  # _2210 = PHI <_2208(39), _2209(40)>
  # DEBUG size => NULL
  if (_2210 == 0)
    goto <bb 18>;
  else
    goto <bb 42>;

  <bb 42>:

  <bb 43>:
  stdin.34_321 = stdin;
  _323 = feof (stdin.34_321);
  if (_323 != 0)
    goto <bb 27>;
  else
    goto <bb 44>;

  <bb 44>:
  input_buffer.40_324 = input_buffer;
  the_bufsize.31_325 = the_bufsize;
  the_bufsize.36_326 = (unsigned int) the_bufsize.31_325;
  stdin.34_327 = stdin;
  fread (input_buffer.40_324, 4, the_bufsize.36_326, stdin.34_327);
  input_buffer.40_329 = input_buffer;
  buffer_i16.42_330 = buffer_i16;
  the_bufsize.31_331 = the_bufsize;
  convert_f_i16 (input_buffer.40_329, buffer_i16.42_330, the_bufsize.31_331);
  buffer_i16.42_333 = buffer_i16;
  the_bufsize.31_334 = the_bufsize;
  the_bufsize.36_335 = (unsigned int) the_bufsize.31_334;
  stdout.38_336 = stdout;
  fwrite (buffer_i16.42_333, 2, the_bufsize.36_335, stdout.38_336);
  goto <bb 43>;

  <bb 45>:
  # DEBUG __s2_len => 13
  iftmp.43_338 = __builtin_strcmp (_266, "convert_i16_f");
  if (iftmp.43_338 == 0)
    goto <bb 46>;
  else
    goto <bb 53>;

  <bb 46>:
  _340 = initialize_buffers ();
  # DEBUG size => _340
  env_csdr_dynamic_bufsize_on.24_2211 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2211 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  _2212 = env_csdr_fixed_bufsize;
  goto <bb 49>;

  <bb 48>:
  _2213 = sendbufsize.part.5 (_340);

  <bb 49>:
  # _2214 = PHI <_2212(47), _2213(48)>
  # DEBUG size => NULL
  if (_2214 == 0)
    goto <bb 18>;
  else
    goto <bb 50>;

  <bb 50>:

  <bb 51>:
  stdin.34_341 = stdin;
  _343 = feof (stdin.34_341);
  if (_343 != 0)
    goto <bb 27>;
  else
    goto <bb 52>;

  <bb 52>:
  buffer_i16.42_344 = buffer_i16;
  the_bufsize.31_345 = the_bufsize;
  the_bufsize.36_346 = (unsigned int) the_bufsize.31_345;
  stdin.34_347 = stdin;
  fread (buffer_i16.42_344, 2, the_bufsize.36_346, stdin.34_347);
  buffer_i16.42_349 = buffer_i16;
  output_buffer.37_350 = output_buffer;
  the_bufsize.31_351 = the_bufsize;
  convert_i16_f (buffer_i16.42_349, output_buffer.37_350, the_bufsize.31_351);
  output_buffer.37_353 = output_buffer;
  the_bufsize.31_354 = the_bufsize;
  the_bufsize.36_355 = (unsigned int) the_bufsize.31_354;
  stdout.38_356 = stdout;
  fwrite (output_buffer.37_353, 4, the_bufsize.36_355, stdout.38_356);
  goto <bb 51>;

  <bb 53>:
  # DEBUG __s2_len => 11
  iftmp.44_358 = __builtin_strcmp (_266, "realpart_cf");
  if (iftmp.44_358 == 0)
    goto <bb 54>;
  else
    goto <bb 77>;

  <bb 54>:
  _360 = initialize_buffers ();
  # DEBUG size => _360
  env_csdr_dynamic_bufsize_on.24_2215 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2215 == 0)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  _2216 = env_csdr_fixed_bufsize;
  goto <bb 57>;

  <bb 56>:
  _2217 = sendbufsize.part.5 (_360);

  <bb 57>:
  # _2218 = PHI <_2216(55), _2217(56)>
  # DEBUG size => NULL
  if (_2218 == 0)
    goto <bb 18>;
  else
    goto <bb 58>;

  <bb 58>:

  <bb 59>:
  stdin.34_361 = stdin;
  _363 = feof (stdin.34_361);
  if (_363 != 0)
    goto <bb 27>;
  else
    goto <bb 60>;

  <bb 60>:
  input_buffer.40_364 = input_buffer;
  the_bufsize.31_365 = the_bufsize;
  the_bufsize.36_366 = (unsigned int) the_bufsize.31_365;
  stdin.34_367 = stdin;
  fread (input_buffer.40_364, 8, the_bufsize.36_366, stdin.34_367);
  # DEBUG i => 0
  # DEBUG i => 0
  the_bufsize.31_2757 = the_bufsize;
  if (the_bufsize.31_2757 > 0)
    goto <bb 62>;
  else
    goto <bb 61>;

  <bb 61>:
  output_buffer.37_381 = output_buffer;
  the_bufsize.36_382 = (unsigned int) the_bufsize.31_2757;
  stdout.38_383 = stdout;
  fwrite (output_buffer.37_381, 4, the_bufsize.36_382, stdout.38_383);
  goto <bb 59>;

  <bb 62>:
  pretmp_2657 = output_buffer;
  pretmp_2633 = input_buffer;
  _2641 = (unsigned int) the_bufsize.31_2757;
  _2669 = _2641 > 8;
  _2670 = (sizetype) the_bufsize.31_2757;
  _2672 = _2670 * 8;
  _2673 = pretmp_2633 + _2672;
  _2677 = pretmp_2657 >= _2673;
  _2686 = (sizetype) the_bufsize.31_2757;
  _2681 = _2686 * 4;
  _2678 = pretmp_2657 + _2681;
  _2688 = pretmp_2633 >= _2678;
  _2690 = _2677 | _2688;
  _2707 = _2669 & _2690;
  if (_2707 != 0)
    goto <bb 63>;
  else
    goto <bb 74>;

  <bb 63>:
  niters.278_2761 = (unsigned int) the_bufsize.31_2757;
  ni_gap.279_2766 = niters.278_2761 + 4294967295;
  _2771 = ni_gap.279_2766 + 4294967292;
  _2778 = _2771 >> 2;
  bnd.280_2762 = _2778 + 1;
  ratio_mult_vf.281_2781 = bnd.280_2762 << 2;
  _2671 = (unsigned int) the_bufsize.31_2757;
  _2597 = _2671 + 4294967295;
  if (_2597 <= 3)
    goto <bb 69>;
  else
    goto <bb 64>;

  <bb 64>:

  <bb 65>:
  # i_2687 = PHI <0(64), i_380(73)>
  # vectp_pretmp.283_2566 = PHI <pretmp_2633(64), vectp_pretmp.283_2676(73)>
  # vectp_pretmp.288_2699 = PHI <pretmp_2657(64), vectp_pretmp.288_2708(73)>
  # ivtmp_2711 = PHI <0(64), ivtmp_2747(73)>
  # DEBUG i => i_2687
  i.45_371 = (unsigned int) i_2687;
  _372 = i.45_371 * 4;
  _373 = pretmp_2657 + _372;
  _376 = i.45_371 * 8;
  _377 = pretmp_2633 + _376;
  vect_array.285 = LOAD_LANES (MEM[(float *)vectp_pretmp.283_2566]);
  vect__378.286_2685 = vect_array.285[0];
  vect__378.287_2689 = vect_array.285[1];
  _378 = *_377;
  MEM[(float *)vectp_pretmp.288_2699] = vect__378.286_2685;
  i_380 = i_2687 + 1;
  # DEBUG i => i_380
  # DEBUG i => i_380
  vectp_pretmp.283_2676 = vectp_pretmp.283_2566 + 32;
  vectp_pretmp.288_2708 = vectp_pretmp.288_2699 + 16;
  ivtmp_2747 = ivtmp_2711 + 1;
  if (ivtmp_2747 < bnd.280_2762)
    goto <bb 73>;
  else
    goto <bb 68>;

  <bb 66>:
  # i_2784 = PHI <i_2731(67), i_1839(69)>
  # DEBUG i => i_2784
  i.45_2774 = (unsigned int) i_2784;
  _2775 = i.45_2774 * 4;
  _2776 = pretmp_2657 + _2775;
  _1315 = i.45_2774 * 8;
  _1319 = pretmp_2633 + _1315;
  _1719 = *_1319;
  *_2776 = _1719;
  i_2731 = i_2784 + 1;
  # DEBUG i => i_2731
  # DEBUG i => i_2731
  if (i_2731 < the_bufsize.31_2757)
    goto <bb 67>;
  else
    goto <bb 70>;

  <bb 67>:
  goto <bb 66>;

  <bb 68>:
  # i_2572 = PHI <i_380(65)>
  tmp.282_2567 = (int) ratio_mult_vf.281_2781;
  if (niters.278_2761 == ratio_mult_vf.281_2781)
    goto <bb 71>;
  else
    goto <bb 69>;

  <bb 69>:
  # i_1839 = PHI <tmp.282_2567(68), 0(63)>
  goto <bb 66>;

  <bb 70>:

  <bb 71>:

  <bb 72>:
  goto <bb 61>;

  <bb 73>:
  goto <bb 65>;

  <bb 74>:

  <bb 75>:
  # i_2691 = PHI <0(74), i_2753(76)>
  # DEBUG i => i_2691
  i.45_2720 = (unsigned int) i_2691;
  _2729 = i.45_2720 * 4;
  _2730 = pretmp_2657 + _2729;
  _2744 = i.45_2720 * 8;
  _2745 = pretmp_2633 + _2744;
  _2746 = *_2745;
  *_2730 = _2746;
  i_2753 = i_2691 + 1;
  # DEBUG i => i_2753
  # DEBUG i => i_2753
  if (i_2753 < the_bufsize.31_2757)
    goto <bb 76>;
  else
    goto <bb 72>;

  <bb 76>:
  goto <bb 75>;

  <bb 77>:
  # DEBUG __s2_len => 13
  iftmp.46_386 = __builtin_strcmp (_266, "clipdetect_ff");
  if (iftmp.46_386 == 0)
    goto <bb 78>;
  else
    goto <bb 85>;

  <bb 78>:
  _388 = initialize_buffers ();
  # DEBUG size => _388
  env_csdr_dynamic_bufsize_on.24_2219 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2219 == 0)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  _2220 = env_csdr_fixed_bufsize;
  goto <bb 81>;

  <bb 80>:
  _2221 = sendbufsize.part.5 (_388);

  <bb 81>:
  # _2222 = PHI <_2220(79), _2221(80)>
  # DEBUG size => NULL
  if (_2222 == 0)
    goto <bb 18>;
  else
    goto <bb 82>;

  <bb 82>:

  <bb 83>:
  stdin.34_389 = stdin;
  _391 = feof (stdin.34_389);
  if (_391 != 0)
    goto <bb 27>;
  else
    goto <bb 84>;

  <bb 84>:
  input_buffer.40_392 = input_buffer;
  the_bufsize.31_393 = the_bufsize;
  the_bufsize.36_394 = (unsigned int) the_bufsize.31_393;
  stdin.34_395 = stdin;
  fread (input_buffer.40_392, 4, the_bufsize.36_394, stdin.34_395);
  input_buffer.40_397 = input_buffer;
  the_bufsize.31_398 = the_bufsize;
  clipdetect_ff (input_buffer.40_397, the_bufsize.31_398);
  input_buffer.40_400 = input_buffer;
  the_bufsize.31_401 = the_bufsize;
  the_bufsize.36_402 = (unsigned int) the_bufsize.31_401;
  stdout.38_403 = stdout;
  fwrite (input_buffer.40_400, 4, the_bufsize.36_402, stdout.38_403);
  goto <bb 83>;

  <bb 85>:
  # DEBUG __s2_len => 7
  iftmp.47_405 = __builtin_strcmp (_266, "gain_ff");
  if (iftmp.47_405 == 0)
    goto <bb 86>;
  else
    goto <bb 96>;

  <bb 86>:
  if (argc_261(D) == 2)
    goto <bb 87>;
  else
    goto <bb 88>;

  <bb 87>:
  # DEBUG why => "need required parameter (gain)"
  stderr.0_2223 = stderr;
  fprintf (stderr.0_2223, "csdr: %s\n\n", "need required parameter (gain)");
  # DEBUG why => NULL
  goto <bb 95>;

  <bb 88>:
  _406 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_406, "%g", &gain);
  _409 = initialize_buffers ();
  # DEBUG size => _409
  env_csdr_dynamic_bufsize_on.24_2224 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2224 == 0)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  _2225 = env_csdr_fixed_bufsize;
  goto <bb 91>;

  <bb 90>:
  _2226 = sendbufsize.part.5 (_409);

  <bb 91>:
  # _2227 = PHI <_2225(89), _2226(90)>
  # DEBUG size => NULL
  if (_2227 == 0)
    goto <bb 95>;
  else
    goto <bb 92>;

  <bb 92>:

  <bb 93>:
  stdin.34_410 = stdin;
  _412 = feof (stdin.34_410);
  if (_412 != 0)
    goto <bb 95>;
  else
    goto <bb 94>;

  <bb 94>:
  input_buffer.40_413 = input_buffer;
  the_bufsize.31_414 = the_bufsize;
  the_bufsize.36_415 = (unsigned int) the_bufsize.31_414;
  stdin.34_416 = stdin;
  fread (input_buffer.40_413, 4, the_bufsize.36_415, stdin.34_416);
  input_buffer.40_418 = input_buffer;
  output_buffer.37_419 = output_buffer;
  the_bufsize.31_420 = the_bufsize;
  gain.48_421 = gain;
  gain_ff (input_buffer.40_418, output_buffer.37_419, the_bufsize.31_420, gain.48_421);
  output_buffer.37_423 = output_buffer;
  the_bufsize.31_424 = the_bufsize;
  the_bufsize.36_425 = (unsigned int) the_bufsize.31_424;
  stdout.38_426 = stdout;
  fwrite (output_buffer.37_423, 4, the_bufsize.36_425, stdout.38_426);
  goto <bb 93>;

  <bb 95>:
  # _65 = PHI <-1(87), -2(91), 0(93)>
  gain ={v} {CLOBBER};
  goto <bb 692>;

  <bb 96>:
  # DEBUG __s2_len => 8
  iftmp.49_429 = __builtin_strcmp (_266, "limit_ff");
  if (iftmp.49_429 == 0)
    goto <bb 97>;
  else
    goto <bb 107>;

  <bb 97>:
  max_amplitude = 1.0e+0;
  if (argc_261(D) != 2)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  _431 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_431, "%g", &max_amplitude);

  <bb 99>:
  _434 = initialize_buffers ();
  # DEBUG size => _434
  env_csdr_dynamic_bufsize_on.24_2228 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2228 == 0)
    goto <bb 100>;
  else
    goto <bb 101>;

  <bb 100>:
  _2229 = env_csdr_fixed_bufsize;
  goto <bb 102>;

  <bb 101>:
  _2230 = sendbufsize.part.5 (_434);

  <bb 102>:
  # _2231 = PHI <_2229(100), _2230(101)>
  # DEBUG size => NULL
  if (_2231 == 0)
    goto <bb 106>;
  else
    goto <bb 103>;

  <bb 103>:

  <bb 104>:
  stdin.34_435 = stdin;
  _437 = feof (stdin.34_435);
  if (_437 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;

  <bb 105>:
  input_buffer.40_438 = input_buffer;
  the_bufsize.31_439 = the_bufsize;
  the_bufsize.36_440 = (unsigned int) the_bufsize.31_439;
  stdin.34_441 = stdin;
  fread (input_buffer.40_438, 4, the_bufsize.36_440, stdin.34_441);
  input_buffer.40_443 = input_buffer;
  output_buffer.37_444 = output_buffer;
  the_bufsize.31_445 = the_bufsize;
  max_amplitude.50_446 = max_amplitude;
  limit_ff (input_buffer.40_443, output_buffer.37_444, the_bufsize.31_445, max_amplitude.50_446);
  output_buffer.37_448 = output_buffer;
  the_bufsize.31_449 = the_bufsize;
  the_bufsize.36_450 = (unsigned int) the_bufsize.31_449;
  stdout.38_451 = stdout;
  fwrite (output_buffer.37_448, 4, the_bufsize.36_450, stdout.38_451);
  goto <bb 104>;

  <bb 106>:
  # _66 = PHI <-2(102), 0(104)>
  max_amplitude ={v} {CLOBBER};
  goto <bb 692>;

  <bb 107>:
  # DEBUG __s2_len => 5
  iftmp.51_455 = __builtin_strcmp (_266, "yes_f");
  if (iftmp.51_455 == 0)
    goto <bb 108>;
  else
    goto <bb 123>;

  <bb 108>:
  if (argc_261(D) == 2)
    goto <bb 109>;
  else
    goto <bb 110>;

  <bb 109>:
  # DEBUG why => "need required parameter (to_repeat)"
  stderr.0_2232 = stderr;
  fprintf (stderr.0_2232, "csdr: %s\n\n", "need required parameter (to_repeat)");
  # DEBUG why => NULL
  goto <bb 122>;

  <bb 110>:
  _456 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_456, "%g", &to_repeat);
  buf_times = 0;
  if (argc_261(D) != 3)
    goto <bb 111>;
  else
    goto <bb 112>;

  <bb 111>:
  _459 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_459, "%d", &buf_times);

  <bb 112>:
  _462 = initialize_buffers ();
  # DEBUG size => _462
  env_csdr_dynamic_bufsize_on.24_2233 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2233 == 0)
    goto <bb 113>;
  else
    goto <bb 114>;

  <bb 113>:
  _2234 = env_csdr_fixed_bufsize;
  goto <bb 115>;

  <bb 114>:
  _2235 = sendbufsize.part.5 (_462);

  <bb 115>:
  # _2236 = PHI <_2234(113), _2235(114)>
  # DEBUG size => NULL
  if (_2236 == 0)
    goto <bb 122>;
  else
    goto <bb 116>;

  <bb 116>:
  the_bufsize.31_463 = the_bufsize;
  output_buffer.37_464 = output_buffer;
  goto <bb 118>;

  <bb 117>:
  i.52_465 = (unsigned int) i_2;
  _466 = i.52_465 * 4;
  _467 = output_buffer.37_464 + _466;
  to_repeat.53_468 = to_repeat;
  *_467 = to_repeat.53_468;
  i_470 = i_2 + 1;
  # DEBUG i => i_470

  <bb 118>:
  # i_2 = PHI <0(116), i_470(117)>
  # DEBUG i => i_2
  if (i_2 < the_bufsize.31_463)
    goto <bb 117>;
  else
    goto <bb 119>;

  <bb 119>:
  goto <bb 121>;

  <bb 120>:
  output_buffer.37_472 = output_buffer;
  the_bufsize.31_473 = the_bufsize;
  the_bufsize.36_474 = (unsigned int) the_bufsize.31_473;
  stdout.38_475 = stdout;
  fwrite (output_buffer.37_472, 4, the_bufsize.36_474, stdout.38_475);
  i_477 = i_3 + 1;
  # DEBUG i => i_477

  <bb 121>:
  # i_3 = PHI <0(119), i_477(120)>
  # DEBUG i => i_3
  buf_times.54_471 = buf_times;
  _2786 = i_3 < buf_times.54_471;
  _2783 = buf_times.54_471 == 0;
  _2523 = _2783 | _2786;
  if (_2523 != 0)
    goto <bb 120>;
  else
    goto <bb 122>;

  <bb 122>:
  # _67 = PHI <-1(109), -2(115), 0(121)>
  to_repeat ={v} {CLOBBER};
  buf_times ={v} {CLOBBER};
  goto <bb 692>;

  <bb 123>:
  # DEBUG __s2_len => 13
  iftmp.55_480 = __builtin_strcmp (_266, "shift_math_cc");
  if (iftmp.55_480 == 0)
    goto <bb 124>;
  else
    goto <bb 136>;

  <bb 124>:
  if (argc_261(D) == 2)
    goto <bb 125>;
  else
    goto <bb 126>;

  <bb 125>:
  # DEBUG why => "need required parameter (rate)"
  stderr.0_2237 = stderr;
  fprintf (stderr.0_2237, "csdr: %s\n\n", "need required parameter (rate)");
  # DEBUG why => NULL
  goto <bb 135>;

  <bb 126>:
  # DEBUG starting_phase => 0.0
  _481 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_481, "%g", &rate);
  _484 = initialize_buffers ();
  # DEBUG size => _484
  env_csdr_dynamic_bufsize_on.24_2238 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2238 == 0)
    goto <bb 127>;
  else
    goto <bb 128>;

  <bb 127>:
  _2239 = env_csdr_fixed_bufsize;
  goto <bb 129>;

  <bb 128>:
  _2240 = sendbufsize.part.5 (_484);

  <bb 129>:
  # _2241 = PHI <_2239(127), _2240(128)>
  # DEBUG size => NULL
  if (_2241 == 0)
    goto <bb 135>;
  else
    goto <bb 130>;

  <bb 130>:

  <bb 131>:
  stdin.34_485 = stdin;
  _487 = feof (stdin.34_485);
  if (_487 != 0)
    goto <bb 132>;
  else
    goto <bb 133>;

  <bb 132>:
  goto <bb 135>;

  <bb 133>:
  input_buffer.40_488 = input_buffer;
  the_bufsize.31_489 = the_bufsize;
  the_bufsize.36_490 = (unsigned int) the_bufsize.31_489;
  stdin.34_491 = stdin;
  _493 = fread (input_buffer.40_488, 8, the_bufsize.36_490, stdin.34_491);
  if (_493 == 0)
    goto <bb 132>;
  else
    goto <bb 134>;

  <bb 134>:
  output_buffer.37_494 = output_buffer;
  the_bufsize.31_495 = the_bufsize;
  the_bufsize.36_496 = (unsigned int) the_bufsize.31_495;
  stdout.38_497 = stdout;
  fwrite (output_buffer.37_494, 8, the_bufsize.36_496, stdout.38_497);
  goto <bb 131>;

  <bb 135>:
  # _68 = PHI <-1(125), -2(129), 0(132)>
  rate ={v} {CLOBBER};
  goto <bb 692>;

  <bb 136>:
  # DEBUG __s2_len => 14
  iftmp.56_500 = __builtin_strcmp (_266, "shift_table_cc");
  if (iftmp.56_500 == 0)
    goto <bb 137>;
  else
    goto <bb 151>;

  <bb 137>:
  bigbufs = 1;
  if (argc_261(D) == 2)
    goto <bb 138>;
  else
    goto <bb 139>;

  <bb 138>:
  # DEBUG why => "need required parameter (rate)"
  stderr.0_2242 = stderr;
  fprintf (stderr.0_2242, "csdr: %s\n\n", "need required parameter (rate)");
  # DEBUG why => NULL
  goto <bb 150>;

  <bb 139>:
  # DEBUG starting_phase => 0.0
  table_size = 65536;
  _503 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_503, "%g", &rate);
  if (argc_261(D) != 3)
    goto <bb 140>;
  else
    goto <bb 141>;

  <bb 140>:
  _505 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_505, "%d", &table_size);

  <bb 141>:
  _508 = initialize_buffers ();
  # DEBUG size => _508
  env_csdr_dynamic_bufsize_on.24_2243 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2243 == 0)
    goto <bb 142>;
  else
    goto <bb 143>;

  <bb 142>:
  _2244 = env_csdr_fixed_bufsize;
  goto <bb 144>;

  <bb 143>:
  _2245 = sendbufsize.part.5 (_508);

  <bb 144>:
  # _2246 = PHI <_2244(142), _2245(143)>
  # DEBUG size => NULL
  if (_2246 == 0)
    goto <bb 150>;
  else
    goto <bb 145>;

  <bb 145>:
  table_size.57_509 = table_size;
  table_data = shift_table_init (table_size.57_509); [return slot optimization]
  stderr.58_511 = stderr;
  __builtin_fwrite ("shift_table_cc: LUT initialized\n", 1, 32, stderr.58_511);

  <bb 146>:
  # starting_phase_4 = PHI <0.0(145), starting_phase_527(149)>
  # DEBUG starting_phase => starting_phase_4
  stdin.34_513 = stdin;
  _515 = feof (stdin.34_513);
  if (_515 != 0)
    goto <bb 147>;
  else
    goto <bb 148>;

  <bb 147>:
  goto <bb 150>;

  <bb 148>:
  input_buffer.40_516 = input_buffer;
  the_bufsize.31_517 = the_bufsize;
  the_bufsize.36_518 = (unsigned int) the_bufsize.31_517;
  stdin.34_519 = stdin;
  _521 = fread (input_buffer.40_516, 8, the_bufsize.36_518, stdin.34_519);
  if (_521 == 0)
    goto <bb 147>;
  else
    goto <bb 149>;

  <bb 149>:
  input_buffer.40_522 = input_buffer;
  output_buffer.37_523 = output_buffer;
  the_bufsize.31_524 = the_bufsize;
  rate.59_525 = rate;
  starting_phase_527 = shift_table_cc (input_buffer.40_522, output_buffer.37_523, the_bufsize.31_524, rate.59_525, table_data, starting_phase_4);
  # DEBUG starting_phase => starting_phase_527
  output_buffer.37_528 = output_buffer;
  the_bufsize.31_529 = the_bufsize;
  the_bufsize.36_530 = (unsigned int) the_bufsize.31_529;
  stdout.38_531 = stdout;
  fwrite (output_buffer.37_528, 8, the_bufsize.36_530, stdout.38_531);
  goto <bb 146>;

  <bb 150>:
  # _69 = PHI <-1(138), -2(144), 0(147)>
  rate ={v} {CLOBBER};
  table_size ={v} {CLOBBER};
  table_data ={v} {CLOBBER};
  goto <bb 692>;

  <bb 151>:
  # DEBUG __s2_len => 28
  iftmp.60_537 = __builtin_strcmp (_266, "decimating_shift_addition_cc");
  if (iftmp.60_537 == 0)
    goto <bb 152>;
  else
    goto <bb 165>;

  <bb 152>:
  bigbufs = 1;
  if (argc_261(D) == 2)
    goto <bb 153>;
  else
    goto <bb 154>;

  <bb 153>:
  # DEBUG why => "need required parameter (rate)"
  stderr.0_2247 = stderr;
  fprintf (stderr.0_2247, "csdr: %s\n\n", "need required parameter (rate)");
  # DEBUG why => NULL
  goto <bb 164>;

  <bb 154>:
  # DEBUG starting_phase => 0.0
  decimation = 1;
  _540 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_540, "%g", &rate);
  if (argc_261(D) != 3)
    goto <bb 155>;
  else
    goto <bb 156>;

  <bb 155>:
  _542 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_542, "%d", &decimation);

  <bb 156>:
  _545 = initialize_buffers ();
  if (_545 == 0)
    goto <bb 164>;
  else
    goto <bb 157>;

  <bb 157>:
  # DEBUG D#22 => the_bufsize
  # DEBUG D#21 => decimation
  # DEBUG size => D#22 / D#21
  env_csdr_dynamic_bufsize_on.24_2248 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2248 == 0)
    goto <bb 159>;
  else
    goto <bb 158>;

  <bb 158>:
  the_bufsize.31_546 = the_bufsize;
  decimation.61_547 = decimation;
  _548 = the_bufsize.31_546 / decimation.61_547;
  sendbufsize.part.5 (_548);

  <bb 159>:
  # DEBUG size => NULL
  rate.62_549 = rate;
  decimation.61_550 = decimation;
  d = decimating_shift_addition_init (rate.62_549, decimation.61_550);
  s.decimation_remain = 0;
  s.starting_phase = 0.0;

  <bb 160>:
  stdin.34_554 = stdin;
  _556 = feof (stdin.34_554);
  if (_556 != 0)
    goto <bb 161>;
  else
    goto <bb 162>;

  <bb 161>:
  goto <bb 164>;

  <bb 162>:
  input_buffer.40_557 = input_buffer;
  the_bufsize.31_558 = the_bufsize;
  the_bufsize.36_559 = (unsigned int) the_bufsize.31_558;
  stdin.34_560 = stdin;
  _562 = fread (input_buffer.40_557, 8, the_bufsize.36_559, stdin.34_560);
  if (_562 == 0)
    goto <bb 161>;
  else
    goto <bb 163>;

  <bb 163>:
  input_buffer.40_563 = input_buffer;
  output_buffer.37_564 = output_buffer;
  the_bufsize.31_565 = the_bufsize;
  decimation.61_566 = decimation;
  s = decimating_shift_addition_cc (input_buffer.40_563, output_buffer.37_564, the_bufsize.31_565, d, decimation.61_566, s); [return slot optimization]
  output_buffer.37_568 = output_buffer;
  _569 = s.output_size;
  _570 = (unsigned int) _569;
  stdout.38_571 = stdout;
  fwrite (output_buffer.37_568, 8, _570, stdout.38_571);
  goto <bb 160>;

  <bb 164>:
  # _70 = PHI <-1(153), -2(156), 0(161)>
  rate ={v} {CLOBBER};
  decimation ={v} {CLOBBER};
  d ={v} {CLOBBER};
  s ={v} {CLOBBER};
  goto <bb 692>;

  <bb 165>:
  # DEBUG __s2_len => 17
  iftmp.63_578 = __builtin_strcmp (_266, "shift_addition_cc");
  if (iftmp.63_578 == 0)
    goto <bb 166>;
  else
    goto <bb 191>;

  <bb 166>:
  bigbufs = 1;
  # DEBUG starting_phase => 0.0
  fd_581 = init_fifo (argc_261(D), argv_259(D));
  # DEBUG fd => fd_581
  if (fd_581 != 0)
    goto <bb 167>;
  else
    goto <bb 170>;

  <bb 167>:
  goto <bb 169>;

  <bb 168>:
  usleep (10000);

  <bb 169>:
  _585 = read_fifo_ctl (fd_581, "%g\n", &rate);
  if (_585 == 0)
    goto <bb 168>;
  else
    goto <bb 173>;

  <bb 170>:
  if (argc_261(D) == 2)
    goto <bb 171>;
  else
    goto <bb 172>;

  <bb 171>:
  # DEBUG why => "need required parameter (rate)"
  stderr.0_2249 = stderr;
  fprintf (stderr.0_2249, "csdr: %s\n\n", "need required parameter (rate)");
  # DEBUG why => NULL
  goto <bb 190>;

  <bb 172>:
  _582 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_582, "%g", &rate);

  <bb 173>:
  _588 = initialize_buffers ();
  # DEBUG size => _588
  env_csdr_dynamic_bufsize_on.24_2250 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2250 == 0)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  _2251 = env_csdr_fixed_bufsize;
  goto <bb 176>;

  <bb 175>:
  _2252 = sendbufsize.part.5 (_588);

  <bb 176>:
  # _2253 = PHI <_2251(174), _2252(175)>
  # DEBUG size => NULL
  if (_2253 == 0)
    goto <bb 190>;
  else
    goto <bb 177>;

  <bb 177>:

  <bb 178>:
  # starting_phase_5 = PHI <0.0(177), starting_phase_8(189)>
  # DEBUG starting_phase => starting_phase_5
  rate.64_589 = rate;
  data = shift_addition_init (rate.64_589);
  stderr.58_591 = stderr;
  rate.64_592 = rate;
  _593 = (double) rate.64_592;
  fprintf (stderr.58_591, "shift_addition_cc: reinitialized to %g\n", _593);

  <bb 179>:
  # starting_phase_6 = PHI <starting_phase_5(178), starting_phase_2666(187)>
  # DEBUG starting_phase => starting_phase_6
  stdin.34_595 = stdin;
  _597 = feof (stdin.34_595);
  if (_597 != 0)
    goto <bb 180>;
  else
    goto <bb 181>;

  <bb 180>:
  data ={v} {CLOBBER};
  goto <bb 190>;

  <bb 181>:
  input_buffer.40_598 = input_buffer;
  the_bufsize.31_599 = the_bufsize;
  the_bufsize.36_600 = (unsigned int) the_bufsize.31_599;
  stdin.34_601 = stdin;
  _603 = fread (input_buffer.40_598, 8, the_bufsize.36_600, stdin.34_601);
  if (_603 == 0)
    goto <bb 188>;
  else
    goto <bb 182>;

  <bb 182>:
  remain_604 = the_bufsize;
  # DEBUG remain => remain_604
  ibufptr_605 = input_buffer;
  # DEBUG ibufptr => ibufptr_605
  obufptr_606 = output_buffer;
  # DEBUG obufptr => obufptr_606
  goto <bb 184>;

  <bb 183>:
  current_size_607 = MIN_EXPR <remain_9, 1024>;
  # DEBUG current_size => current_size_607
  starting_phase_609 = shift_addition_cc (ibufptr_10, obufptr_11, current_size_607, data, starting_phase_7);
  # DEBUG starting_phase => starting_phase_609
  current_size.65_610 = (unsigned int) current_size_607;
  _611 = current_size.65_610 * 8;
  ibufptr_612 = ibufptr_10 + _611;
  # DEBUG ibufptr => ibufptr_612
  obufptr_613 = obufptr_11 + _611;
  # DEBUG obufptr => obufptr_613
  remain_614 = remain_9 - current_size_607;
  # DEBUG remain => remain_614

  <bb 184>:
  # starting_phase_7 = PHI <starting_phase_6(182), starting_phase_609(183)>
  # remain_9 = PHI <remain_604(182), remain_614(183)>
  # ibufptr_10 = PHI <ibufptr_605(182), ibufptr_612(183)>
  # obufptr_11 = PHI <obufptr_606(182), obufptr_613(183)>
  # DEBUG obufptr => obufptr_11
  # DEBUG ibufptr => ibufptr_10
  # DEBUG remain => remain_9
  # DEBUG starting_phase => starting_phase_7
  if (remain_9 != 0)
    goto <bb 183>;
  else
    goto <bb 185>;

  <bb 185>:
  # starting_phase_2666 = PHI <starting_phase_7(184)>
  output_buffer.37_615 = output_buffer;
  the_bufsize.31_616 = the_bufsize;
  the_bufsize.36_617 = (unsigned int) the_bufsize.31_616;
  stdout.38_618 = stdout;
  fwrite (output_buffer.37_615, 8, the_bufsize.36_617, stdout.38_618);
  _621 = read_fifo_ctl (fd_581, "%g\n", &rate);
  if (_621 != 0)
    goto <bb 186>;
  else
    goto <bb 187>;

  <bb 186>:
  # starting_phase_2665 = PHI <starting_phase_2666(185)>
  goto <bb 189>;

  <bb 187>:
  goto <bb 179>;

  <bb 188>:
  # starting_phase_2667 = PHI <starting_phase_6(181)>

  <bb 189>:
  # starting_phase_8 = PHI <starting_phase_2667(188), starting_phase_2665(186)>
  # DEBUG starting_phase => starting_phase_8
  data ={v} {CLOBBER};
  goto <bb 178>;

  <bb 190>:
  # _71 = PHI <-1(171), -2(176), 0(180)>
  rate ={v} {CLOBBER};
  goto <bb 692>;

  <bb 191>:
  # DEBUG __s2_len => 22
  iftmp.66_625 = __builtin_strcmp (_266, "shift_addition_cc_test");
  if (iftmp.66_625 == 0)
    goto <bb 192>;
  else
    goto <bb 196>;

  <bb 192>:
  if (argc_261(D) == 2)
    goto <bb 193>;
  else
    goto <bb 194>;

  <bb 193>:
  # DEBUG why => "need required parameter (rate)"
  stderr.0_2254 = stderr;
  fprintf (stderr.0_2254, "csdr: %s\n\n", "need required parameter (rate)");
  # DEBUG why => NULL
  goto <bb 195>;

  <bb 194>:
  _626 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_626, "%g", &rate);
  rate.67_628 = rate;
  data = shift_addition_init (rate.67_628);
  shift_addition_cc_test (data);

  <bb 195>:
  # _72 = PHI <-1(193), 0(194)>
  rate ={v} {CLOBBER};
  data ={v} {CLOBBER};
  goto <bb 692>;

  <bb 196>:
  # DEBUG __s2_len => 10
  iftmp.68_634 = __builtin_strcmp (_266, "dcblock_ff");
  if (iftmp.68_634 == 0)
    goto <bb 197>;
  else
    goto <bb 204>;

  <bb 197>:
  _636 = initialize_buffers ();
  # DEBUG size => _636
  env_csdr_dynamic_bufsize_on.24_2255 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2255 == 0)
    goto <bb 198>;
  else
    goto <bb 199>;

  <bb 198>:
  _2256 = env_csdr_fixed_bufsize;
  goto <bb 200>;

  <bb 199>:
  _2257 = sendbufsize.part.5 (_636);

  <bb 200>:
  # _2258 = PHI <_2256(198), _2257(199)>
  # DEBUG size => NULL
  if (_2258 == 0)
    goto <bb 18>;
  else
    goto <bb 201>;

  <bb 201>:

  <bb 202>:
  stdin.34_637 = stdin;
  _639 = feof (stdin.34_637);
  if (_639 != 0)
    goto <bb 27>;
  else
    goto <bb 203>;

  <bb 203>:
  input_buffer.40_640 = input_buffer;
  the_bufsize.31_641 = the_bufsize;
  the_bufsize.36_642 = (unsigned int) the_bufsize.31_641;
  stdin.34_643 = stdin;
  fread (input_buffer.40_640, 4, the_bufsize.36_642, stdin.34_643);
  input_buffer.40_645 = input_buffer;
  output_buffer.37_646 = output_buffer;
  the_bufsize.31_647 = the_bufsize;
  dcp = dcblock_ff (input_buffer.40_645, output_buffer.37_646, the_bufsize.31_647, 0.0, dcp);
  output_buffer.37_649 = output_buffer;
  the_bufsize.31_650 = the_bufsize;
  the_bufsize.36_651 = (unsigned int) the_bufsize.31_650;
  stdout.38_652 = stdout;
  fwrite (output_buffer.37_649, 4, the_bufsize.36_651, stdout.38_652);
  goto <bb 202>;

  <bb 204>:
  # DEBUG __s2_len => 14
  iftmp.69_654 = __builtin_strcmp (_266, "fastdcblock_ff");
  if (iftmp.69_654 == 0)
    goto <bb 205>;
  else
    goto <bb 213>;

  <bb 205>:
  dcblock_bufsize = 1024;
  if (argc_261(D) != 2)
    goto <bb 206>;
  else
    goto <bb 207>;

  <bb 206>:
  _656 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_656, "%d", &dcblock_bufsize);

  <bb 207>:
  dcblock_bufsize.70_658 = dcblock_bufsize;
  dcblock_bufsize.71_659 = (unsigned int) dcblock_bufsize.70_658;
  _660 = dcblock_bufsize.71_659 * 4;
  dcblock_buffer_662 = malloc (_660);
  # DEBUG dcblock_buffer => dcblock_buffer_662
  getbufsize ();
  dcblock_bufsize.70_664 = dcblock_bufsize;
  # DEBUG size => dcblock_bufsize.70_664
  env_csdr_dynamic_bufsize_on.24_2259 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2259 == 0)
    goto <bb 209>;
  else
    goto <bb 208>;

  <bb 208>:
  sendbufsize.part.5 (dcblock_bufsize.70_664);

  <bb 209>:

  <bb 210>:
  stdin.34_665 = stdin;
  _667 = feof (stdin.34_665);
  if (_667 != 0)
    goto <bb 211>;
  else
    goto <bb 212>;

  <bb 211>:
  dcblock_bufsize ={v} {CLOBBER};
  goto <bb 692>;

  <bb 212>:
  dcblock_bufsize.70_668 = dcblock_bufsize;
  dcblock_bufsize.72_669 = (unsigned int) dcblock_bufsize.70_668;
  stdin.34_670 = stdin;
  fread (dcblock_buffer_662, 4, dcblock_bufsize.72_669, stdin.34_670);
  dcblock_bufsize.70_672 = dcblock_bufsize;
  last_dc_level.73_673 = last_dc_level;
  last_dc_level.74_675 = fastdcblock_ff (dcblock_buffer_662, dcblock_buffer_662, dcblock_bufsize.70_672, last_dc_level.73_673);
  last_dc_level = last_dc_level.74_675;
  dcblock_bufsize.70_677 = dcblock_bufsize;
  dcblock_bufsize.72_678 = (unsigned int) dcblock_bufsize.70_677;
  stdout.38_679 = stdout;
  fwrite (dcblock_buffer_662, 4, dcblock_bufsize.72_678, stdout.38_679);
  goto <bb 210>;

  <bb 213>:
  # DEBUG __s2_len => 15
  iftmp.75_682 = __builtin_strcmp (_266, "fmdemod_atan_cf");
  if (iftmp.75_682 == 0)
    goto <bb 214>;
  else
    goto <bb 222>;

  <bb 214>:
  _684 = initialize_buffers ();
  # DEBUG size => _684
  env_csdr_dynamic_bufsize_on.24_2261 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2261 == 0)
    goto <bb 215>;
  else
    goto <bb 216>;

  <bb 215>:
  _2262 = env_csdr_fixed_bufsize;
  goto <bb 217>;

  <bb 216>:
  _2263 = sendbufsize.part.5 (_684);

  <bb 217>:
  # _2264 = PHI <_2262(215), _2263(216)>
  # DEBUG size => NULL
  if (_2264 == 0)
    goto <bb 18>;
  else
    goto <bb 218>;

  <bb 218>:

  <bb 219>:
  # last_phase_12 = PHI <0.0(218), last_phase_700(221)>
  # DEBUG last_phase => last_phase_12
  stdin.34_685 = stdin;
  _687 = feof (stdin.34_685);
  if (_687 != 0)
    goto <bb 27>;
  else
    goto <bb 220>;

  <bb 220>:
  input_buffer.40_688 = input_buffer;
  the_bufsize.31_689 = the_bufsize;
  the_bufsize.36_690 = (unsigned int) the_bufsize.31_689;
  stdin.34_691 = stdin;
  fread (input_buffer.40_688, 8, the_bufsize.36_690, stdin.34_691);
  stdin.34_693 = stdin;
  _695 = feof (stdin.34_693);
  if (_695 != 0)
    goto <bb 27>;
  else
    goto <bb 221>;

  <bb 221>:
  input_buffer.40_696 = input_buffer;
  output_buffer.37_697 = output_buffer;
  the_bufsize.31_698 = the_bufsize;
  last_phase_700 = fmdemod_atan_cf (input_buffer.40_696, output_buffer.37_697, the_bufsize.31_698, last_phase_12);
  # DEBUG last_phase => last_phase_700
  output_buffer.37_701 = output_buffer;
  the_bufsize.31_702 = the_bufsize;
  the_bufsize.36_703 = (unsigned int) the_bufsize.31_702;
  stdout.38_704 = stdout;
  fwrite (output_buffer.37_701, 4, the_bufsize.36_703, stdout.38_704);
  goto <bb 219>;

  <bb 222>:
  # DEBUG __s2_len => 17
  iftmp.76_706 = __builtin_strcmp (_266, "fmdemod_quadri_cf");
  if (iftmp.76_706 == 0)
    goto <bb 223>;
  else
    goto <bb 231>;

  <bb 223>:
  _708 = initialize_buffers ();
  # DEBUG size => _708
  env_csdr_dynamic_bufsize_on.24_2265 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2265 == 0)
    goto <bb 224>;
  else
    goto <bb 225>;

  <bb 224>:
  _2266 = env_csdr_fixed_bufsize;
  goto <bb 226>;

  <bb 225>:
  _2267 = sendbufsize.part.5 (_708);

  <bb 226>:
  # _2268 = PHI <_2266(224), _2267(225)>
  # DEBUG size => NULL
  if (_2268 == 0)
    goto <bb 230>;
  else
    goto <bb 227>;

  <bb 227>:
  last_sample.i = 0.0;
  last_sample.q = 0.0;

  <bb 228>:
  stdin.34_711 = stdin;
  _713 = feof (stdin.34_711);
  if (_713 != 0)
    goto <bb 230>;
  else
    goto <bb 229>;

  <bb 229>:
  input_buffer.40_714 = input_buffer;
  the_bufsize.31_715 = the_bufsize;
  the_bufsize.36_716 = (unsigned int) the_bufsize.31_715;
  stdin.34_717 = stdin;
  fread (input_buffer.40_714, 8, the_bufsize.36_716, stdin.34_717);
  input_buffer.40_719 = input_buffer;
  output_buffer.37_720 = output_buffer;
  the_bufsize.31_721 = the_bufsize;
  temp_f.77_722 = temp_f;
  last_sample = fmdemod_quadri_cf (input_buffer.40_719, output_buffer.37_720, the_bufsize.31_721, temp_f.77_722, last_sample);
  output_buffer.37_724 = output_buffer;
  the_bufsize.31_725 = the_bufsize;
  the_bufsize.36_726 = (unsigned int) the_bufsize.31_725;
  stdout.38_727 = stdout;
  fwrite (output_buffer.37_724, 4, the_bufsize.36_726, stdout.38_727);
  goto <bb 228>;

  <bb 230>:
  # _73 = PHI <-2(226), 0(228)>
  last_sample ={v} {CLOBBER};
  goto <bb 692>;

  <bb 231>:
  # DEBUG __s2_len => 24
  iftmp.78_731 = __builtin_strcmp (_266, "fmdemod_quadri_novect_cf");
  if (iftmp.78_731 == 0)
    goto <bb 232>;
  else
    goto <bb 240>;

  <bb 232>:
  _733 = initialize_buffers ();
  # DEBUG size => _733
  env_csdr_dynamic_bufsize_on.24_2269 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2269 == 0)
    goto <bb 233>;
  else
    goto <bb 234>;

  <bb 233>:
  _2270 = env_csdr_fixed_bufsize;
  goto <bb 235>;

  <bb 234>:
  _2271 = sendbufsize.part.5 (_733);

  <bb 235>:
  # _2272 = PHI <_2270(233), _2271(234)>
  # DEBUG size => NULL
  if (_2272 == 0)
    goto <bb 239>;
  else
    goto <bb 236>;

  <bb 236>:
  last_sample.i = 0.0;
  last_sample.q = 0.0;

  <bb 237>:
  stdin.34_736 = stdin;
  _738 = feof (stdin.34_736);
  if (_738 != 0)
    goto <bb 239>;
  else
    goto <bb 238>;

  <bb 238>:
  input_buffer.40_739 = input_buffer;
  the_bufsize.31_740 = the_bufsize;
  the_bufsize.36_741 = (unsigned int) the_bufsize.31_740;
  stdin.34_742 = stdin;
  fread (input_buffer.40_739, 8, the_bufsize.36_741, stdin.34_742);
  input_buffer.40_744 = input_buffer;
  output_buffer.37_745 = output_buffer;
  the_bufsize.31_746 = the_bufsize;
  last_sample = fmdemod_quadri_novect_cf (input_buffer.40_744, output_buffer.37_745, the_bufsize.31_746, last_sample);
  output_buffer.37_748 = output_buffer;
  the_bufsize.31_749 = the_bufsize;
  the_bufsize.36_750 = (unsigned int) the_bufsize.31_749;
  stdout.38_751 = stdout;
  fwrite (output_buffer.37_748, 4, the_bufsize.36_750, stdout.38_751);
  goto <bb 237>;

  <bb 239>:
  # _74 = PHI <-2(235), 0(237)>
  last_sample ={v} {CLOBBER};
  goto <bb 692>;

  <bb 240>:
  # DEBUG __s2_len => 17
  iftmp.79_755 = __builtin_strcmp (_266, "deemphasis_wfm_ff");
  if (iftmp.79_755 == 0)
    goto <bb 241>;
  else
    goto <bb 251>;

  <bb 241>:
  if (argc_261(D) <= 3)
    goto <bb 242>;
  else
    goto <bb 243>;

  <bb 242>:
  # DEBUG why => "need required parameters (sample rate, tau)"
  stderr.0_2273 = stderr;
  fprintf (stderr.0_2273, "csdr: %s\n\n", "need required parameters (sample rate, tau)");
  # DEBUG why => NULL
  goto <bb 250>;

  <bb 243>:
  _757 = initialize_buffers ();
  # DEBUG size => _757
  env_csdr_dynamic_bufsize_on.24_2274 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2274 == 0)
    goto <bb 244>;
  else
    goto <bb 245>;

  <bb 244>:
  _2275 = env_csdr_fixed_bufsize;
  goto <bb 246>;

  <bb 245>:
  _2276 = sendbufsize.part.5 (_757);

  <bb 246>:
  # _2277 = PHI <_2275(244), _2276(245)>
  # DEBUG size => NULL
  if (_2277 == 0)
    goto <bb 250>;
  else
    goto <bb 247>;

  <bb 247>:
  _758 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_758, "%d", &sample_rate);
  _760 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_760, "%g", &tau);
  stderr.58_762 = stderr;
  tau.80_763 = tau;
  _764 = (double) tau.80_763;
  sample_rate.81_765 = sample_rate;
  fprintf (stderr.58_762, "deemphasis_wfm_ff: tau = %g, sample_rate = %d\n", _764, sample_rate.81_765);
  # DEBUG last_output => 0.0

  <bb 248>:
  # last_output_13 = PHI <0.0(247), last_output_781(249)>
  # DEBUG last_output => last_output_13
  stdin.34_767 = stdin;
  _769 = feof (stdin.34_767);
  if (_769 != 0)
    goto <bb 250>;
  else
    goto <bb 249>;

  <bb 249>:
  input_buffer.40_770 = input_buffer;
  the_bufsize.31_771 = the_bufsize;
  the_bufsize.36_772 = (unsigned int) the_bufsize.31_771;
  stdin.34_773 = stdin;
  fread (input_buffer.40_770, 4, the_bufsize.36_772, stdin.34_773);
  input_buffer.40_775 = input_buffer;
  output_buffer.37_776 = output_buffer;
  the_bufsize.31_777 = the_bufsize;
  tau.80_778 = tau;
  sample_rate.81_779 = sample_rate;
  last_output_781 = deemphasis_wfm_ff (input_buffer.40_775, output_buffer.37_776, the_bufsize.31_777, tau.80_778, sample_rate.81_779, last_output_13);
  # DEBUG last_output => last_output_781
  output_buffer.37_782 = output_buffer;
  the_bufsize.31_783 = the_bufsize;
  the_bufsize.36_784 = (unsigned int) the_bufsize.31_783;
  stdout.38_785 = stdout;
  fwrite (output_buffer.37_782, 4, the_bufsize.36_784, stdout.38_785);
  goto <bb 248>;

  <bb 250>:
  # _75 = PHI <-1(242), -2(246), 0(248)>
  sample_rate ={v} {CLOBBER};
  tau ={v} {CLOBBER};
  goto <bb 692>;

  <bb 251>:
  # DEBUG __s2_len => 13
  iftmp.82_790 = __builtin_strcmp (_266, "detect_nan_ff");
  if (iftmp.82_790 == 0)
    goto <bb 252>;
  else
    goto <bb 263>;

  <bb 252>:
  _792 = initialize_buffers ();
  # DEBUG size => _792
  env_csdr_dynamic_bufsize_on.24_2278 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2278 == 0)
    goto <bb 253>;
  else
    goto <bb 254>;

  <bb 253>:
  _2279 = env_csdr_fixed_bufsize;
  goto <bb 255>;

  <bb 254>:
  _2280 = sendbufsize.part.5 (_792);

  <bb 255>:
  # _2281 = PHI <_2279(253), _2280(254)>
  # DEBUG size => NULL
  if (_2281 == 0)
    goto <bb 18>;
  else
    goto <bb 256>;

  <bb 256>:

  <bb 257>:
  stdin.34_793 = stdin;
  _795 = feof (stdin.34_793);
  if (_795 != 0)
    goto <bb 27>;
  else
    goto <bb 258>;

  <bb 258>:
  input_buffer.40_796 = input_buffer;
  the_bufsize.31_797 = the_bufsize;
  the_bufsize.36_798 = (unsigned int) the_bufsize.31_797;
  stdin.34_799 = stdin;
  fread (input_buffer.40_796, 4, the_bufsize.36_798, stdin.34_799);
  # DEBUG nan_detect => 0
  # DEBUG i => 0
  goto <bb 261>;

  <bb 259>:
  input_buffer.40_802 = input_buffer;
  i.83_803 = (unsigned int) i_15;
  _804 = i.83_803 * 4;
  _805 = input_buffer.40_802 + _804;
  _806 = *_805;
  _808 = is_nan (_806);
  if (_808 != 0)
    goto <bb 693>;
  else
    goto <bb 260>;

  <bb 260>:
  i_809 = i_15 + 1;
  # DEBUG i => i_809

  <bb 261>:
  # i_15 = PHI <0(258), i_809(260)>
  # DEBUG i => i_15
  the_bufsize.31_801 = the_bufsize;
  if (i_15 < the_bufsize.31_801)
    goto <bb 259>;
  else
    goto <bb 262>;

  <bb 262>:
  input_buffer.40_812 = input_buffer;
  the_bufsize.31_813 = the_bufsize;
  the_bufsize.36_814 = (unsigned int) the_bufsize.31_813;
  stdout.38_815 = stdout;
  fwrite (input_buffer.40_812, 4, the_bufsize.36_814, stdout.38_815);
  goto <bb 257>;

  <bb 263>:
  # DEBUG __s2_len => 11
  iftmp.84_818 = __builtin_strcmp (_266, "floatdump_f");
  if (iftmp.84_818 == 0)
    goto <bb 264>;
  else
    goto <bb 274>;

  <bb 264>:
  _820 = initialize_buffers ();
  # DEBUG size => _820
  env_csdr_dynamic_bufsize_on.24_2282 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2282 == 0)
    goto <bb 265>;
  else
    goto <bb 266>;

  <bb 265>:
  _2283 = env_csdr_fixed_bufsize;
  goto <bb 267>;

  <bb 266>:
  _2284 = sendbufsize.part.5 (_820);

  <bb 267>:
  # _2285 = PHI <_2283(265), _2284(266)>
  # DEBUG size => NULL
  if (_2285 == 0)
    goto <bb 18>;
  else
    goto <bb 268>;

  <bb 268>:

  <bb 269>:
  stdin.34_821 = stdin;
  _823 = feof (stdin.34_821);
  if (_823 != 0)
    goto <bb 27>;
  else
    goto <bb 270>;

  <bb 270>:
  input_buffer.40_824 = input_buffer;
  the_bufsize.31_825 = the_bufsize;
  the_bufsize.36_826 = (unsigned int) the_bufsize.31_825;
  stdin.34_827 = stdin;
  fread (input_buffer.40_824, 4, the_bufsize.36_826, stdin.34_827);
  # DEBUG i => 0
  goto <bb 272>;

  <bb 271>:
  stderr.58_830 = stderr;
  input_buffer.40_831 = input_buffer;
  i.85_832 = (unsigned int) i_16;
  _833 = i.85_832 * 4;
  _834 = input_buffer.40_831 + _833;
  _835 = *_834;
  _836 = (double) _835;
  fprintf (stderr.58_830, "%g ", _836);
  i_838 = i_16 + 1;
  # DEBUG i => i_838

  <bb 272>:
  # i_16 = PHI <0(270), i_838(271)>
  # DEBUG i => i_16
  the_bufsize.31_829 = the_bufsize;
  if (i_16 < the_bufsize.31_829)
    goto <bb 271>;
  else
    goto <bb 273>;

  <bb 273>:
  goto <bb 269>;

  <bb 274>:
  # DEBUG __s2_len => 17
  iftmp.86_840 = __builtin_strcmp (_266, "deemphasis_nfm_ff");
  if (iftmp.86_840 == 0)
    goto <bb 275>;
  else
    goto <bb 287>;

  <bb 275>:
  if (argc_261(D) == 2)
    goto <bb 276>;
  else
    goto <bb 277>;

  <bb 276>:
  # DEBUG why => "need required parameter (sample rate)"
  stderr.0_2286 = stderr;
  fprintf (stderr.0_2286, "csdr: %s\n\n", "need required parameter (sample rate)");
  # DEBUG why => NULL
  goto <bb 286>;

  <bb 277>:
  _841 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_841, "%d", &sample_rate);
  _844 = initialize_buffers ();
  # DEBUG size => _844
  env_csdr_dynamic_bufsize_on.24_2287 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2287 == 0)
    goto <bb 278>;
  else
    goto <bb 279>;

  <bb 278>:
  _2288 = env_csdr_fixed_bufsize;
  goto <bb 280>;

  <bb 279>:
  _2289 = sendbufsize.part.5 (_844);

  <bb 280>:
  # _2290 = PHI <_2288(278), _2289(279)>
  # DEBUG size => NULL
  if (_2290 == 0)
    goto <bb 286>;
  else
    goto <bb 281>;

  <bb 281>:

  <bb 282>:
  # processed_17 = PHI <0(281), processed_863(285)>
  # DEBUG processed => processed_17
  stdin.34_845 = stdin;
  _847 = feof (stdin.34_845);
  if (_847 != 0)
    goto <bb 286>;
  else
    goto <bb 283>;

  <bb 283>:
  input_buffer.40_848 = input_buffer;
  the_bufsize.31_849 = the_bufsize;
  the_bufsize.87_850 = (sizetype) the_bufsize.31_849;
  processed.88_851 = (sizetype) processed_17;
  _852 = the_bufsize.87_850 - processed.88_851;
  _853 = _852 * 4;
  _854 = input_buffer.40_848 + _853;
  stdin.34_856 = stdin;
  fread (_854, 4, processed.88_851, stdin.34_856);
  input_buffer.40_858 = input_buffer;
  output_buffer.37_859 = output_buffer;
  the_bufsize.31_860 = the_bufsize;
  sample_rate.90_861 = sample_rate;
  processed_863 = deemphasis_nfm_ff (input_buffer.40_858, output_buffer.37_859, the_bufsize.31_860, sample_rate.90_861);
  # DEBUG processed => processed_863
  if (processed_863 == 0)
    goto <bb 284>;
  else
    goto <bb 285>;

  <bb 284>:
  # DEBUG why => "deemphasis_nfm_ff: invalid sample rate (this function works only with specific sample rates)."
  stderr.0_2291 = stderr;
  fprintf (stderr.0_2291, "csdr: %s\n\n", "deemphasis_nfm_ff: invalid sample rate (this function works only with specific sample rates).");
  # DEBUG why => NULL
  goto <bb 286>;

  <bb 285>:
  input_buffer.40_864 = input_buffer;
  processed.91_865 = (unsigned int) processed_863;
  _866 = processed.91_865 * 4;
  _867 = input_buffer.40_864 + _866;
  the_bufsize.31_868 = the_bufsize;
  _869 = the_bufsize.31_868 - processed_863;
  _870 = (unsigned int) _869;
  _871 = _870 * 4;
  memmove (input_buffer.40_864, _867, _871);
  output_buffer.37_873 = output_buffer;
  stdout.38_875 = stdout;
  fwrite (output_buffer.37_873, 4, processed.91_865, stdout.38_875);
  goto <bb 282>;

  <bb 286>:
  # _76 = PHI <-1(276), -2(280), 0(282), -1(284)>
  sample_rate ={v} {CLOBBER};
  goto <bb 692>;

  <bb 287>:
  # DEBUG __s2_len => 10
  iftmp.92_879 = __builtin_strcmp (_266, "amdemod_cf");
  if (iftmp.92_879 == 0)
    goto <bb 288>;
  else
    goto <bb 295>;

  <bb 288>:
  _881 = initialize_buffers ();
  # DEBUG size => _881
  env_csdr_dynamic_bufsize_on.24_2292 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2292 == 0)
    goto <bb 289>;
  else
    goto <bb 290>;

  <bb 289>:
  _2293 = env_csdr_fixed_bufsize;
  goto <bb 291>;

  <bb 290>:
  _2294 = sendbufsize.part.5 (_881);

  <bb 291>:
  # _2295 = PHI <_2293(289), _2294(290)>
  # DEBUG size => NULL
  if (_2295 == 0)
    goto <bb 18>;
  else
    goto <bb 292>;

  <bb 292>:

  <bb 293>:
  stdin.34_882 = stdin;
  _884 = feof (stdin.34_882);
  if (_884 != 0)
    goto <bb 27>;
  else
    goto <bb 294>;

  <bb 294>:
  input_buffer.40_885 = input_buffer;
  the_bufsize.31_886 = the_bufsize;
  the_bufsize.36_887 = (unsigned int) the_bufsize.31_886;
  stdin.34_888 = stdin;
  fread (input_buffer.40_885, 8, the_bufsize.36_887, stdin.34_888);
  input_buffer.40_890 = input_buffer;
  output_buffer.37_891 = output_buffer;
  the_bufsize.31_892 = the_bufsize;
  amdemod_cf (input_buffer.40_890, output_buffer.37_891, the_bufsize.31_892);
  output_buffer.37_894 = output_buffer;
  the_bufsize.31_895 = the_bufsize;
  the_bufsize.36_896 = (unsigned int) the_bufsize.31_895;
  stdout.38_897 = stdout;
  fwrite (output_buffer.37_894, 4, the_bufsize.36_896, stdout.38_897);
  goto <bb 293>;

  <bb 295>:
  # DEBUG __s2_len => 20
  iftmp.93_900 = __builtin_strcmp (_266, "amdemod_estimator_cf");
  if (iftmp.93_900 == 0)
    goto <bb 296>;
  else
    goto <bb 303>;

  <bb 296>:
  _902 = initialize_buffers ();
  # DEBUG size => _902
  env_csdr_dynamic_bufsize_on.24_2296 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2296 == 0)
    goto <bb 297>;
  else
    goto <bb 298>;

  <bb 297>:
  _2297 = env_csdr_fixed_bufsize;
  goto <bb 299>;

  <bb 298>:
  _2298 = sendbufsize.part.5 (_902);

  <bb 299>:
  # _2299 = PHI <_2297(297), _2298(298)>
  # DEBUG size => NULL
  if (_2299 == 0)
    goto <bb 18>;
  else
    goto <bb 300>;

  <bb 300>:

  <bb 301>:
  stdin.34_903 = stdin;
  _905 = feof (stdin.34_903);
  if (_905 != 0)
    goto <bb 27>;
  else
    goto <bb 302>;

  <bb 302>:
  input_buffer.40_906 = input_buffer;
  the_bufsize.31_907 = the_bufsize;
  the_bufsize.36_908 = (unsigned int) the_bufsize.31_907;
  stdin.34_909 = stdin;
  fread (input_buffer.40_906, 8, the_bufsize.36_908, stdin.34_909);
  input_buffer.40_911 = input_buffer;
  output_buffer.37_912 = output_buffer;
  the_bufsize.31_913 = the_bufsize;
  amdemod_estimator_cf (input_buffer.40_911, output_buffer.37_912, the_bufsize.31_913, 0.0, 0.0);
  output_buffer.37_915 = output_buffer;
  the_bufsize.31_916 = the_bufsize;
  the_bufsize.36_917 = (unsigned int) the_bufsize.31_916;
  stdout.38_918 = stdout;
  fwrite (output_buffer.37_915, 4, the_bufsize.36_917, stdout.38_918);
  goto <bb 301>;

  <bb 303>:
  # DEBUG __s2_len => 15
  iftmp.94_921 = __builtin_strcmp (_266, "fir_decimate_cc");
  if (iftmp.94_921 == 0)
    goto <bb 304>;
  else
    goto <bb 320>;

  <bb 304>:
  bigbufs = 1;
  if (argc_261(D) == 2)
    goto <bb 305>;
  else
    goto <bb 306>;

  <bb 305>:
  # DEBUG why => "need required parameter (decimation factor)"
  stderr.0_2300 = stderr;
  fprintf (stderr.0_2300, "csdr: %s\n\n", "need required parameter (decimation factor)");
  # DEBUG why => NULL
  goto <bb 319>;

  <bb 306>:
  _923 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_923, "%d", &factor);
  transition_bw = 5.00000007450580596923828125e-2;
  if (argc_261(D) != 3)
    goto <bb 307>;
  else
    goto <bb 309>;

  <bb 307>:
  _926 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_926, "%g", &transition_bw);
  # DEBUG window => 2
  if (argc_261(D) > 4)
    goto <bb 308>;
  else
    goto <bb 309>;

  <bb 308>:
  _928 = MEM[(char * *)argv_259(D) + 16B];
  window_930 = firdes_get_window_from_string (_928);
  # DEBUG window => window_930
  goto <bb 310>;

  <bb 309>:
  # DEBUG window => 2
  stderr.58_931 = stderr;
  _933 = firdes_get_string_from_window (2);
  fprintf (stderr.58_931, "fir_decimate_cc: window = %s\n", _933);

  <bb 310>:
  # window_18 = PHI <window_930(308), 2(309)>
  # DEBUG window => window_18
  _936 = initialize_buffers ();
  if (_936 == 0)
    goto <bb 319>;
  else
    goto <bb 311>;

  <bb 311>:
  the_bufsize.31_937 = the_bufsize;
  factor.95_938 = factor;
  _939 = the_bufsize.31_937 / factor.95_938;
  # DEBUG size => _939
  env_csdr_dynamic_bufsize_on.24_2301 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2301 == 0)
    goto <bb 313>;
  else
    goto <bb 312>;

  <bb 312>:
  sendbufsize.part.5 (_939);

  <bb 313>:
  # DEBUG size => NULL
  transition_bw.96_940 = transition_bw;
  taps_length_942 = firdes_filter_len (transition_bw.96_940);
  # DEBUG taps_length => taps_length_942
  stderr.58_943 = stderr;
  fprintf (stderr.58_943, "fir_decimate_cc: taps_length = %d\n", taps_length_942);
  # DEBUG padded_taps_length => taps_length_942
  stderr.58_945 = stderr;
  fprintf (stderr.58_945, "taps_length = %d\n", taps_length_942);
  _947 = taps_length_942 + 7;
  _949 = _947 % 8;
  padded_taps_length_950 = _947 - _949;
  # DEBUG padded_taps_length => padded_taps_length_950
  stderr.58_951 = stderr;
  fprintf (stderr.58_951, "padded_taps_length = %d\n", padded_taps_length_950);
  _953 = padded_taps_length_950 + 32;
  _954 = (unsigned int) _953;
  taps_956 = malloc (_954);
  # DEBUG taps => taps_956
  stderr.58_957 = stderr;
  fprintf (stderr.58_957, "taps = %x\n", taps_956);
  taps.97_959 = (unsigned int) taps_956;
  _960 = taps.97_959 + 31;
  _961 = _960 & 4294967264;
  taps_962 = (float *) _961;
  # DEBUG taps => taps_962
  stderr.58_963 = stderr;
  fprintf (stderr.58_963, "taps = %x\n", taps_962);
  # DEBUG i => 0
  goto <bb 315>;

  <bb 314>:
  _966 = i_19 + taps_length_942;
  _967 = (unsigned int) _966;
  _968 = _967 * 4;
  _969 = taps_962 + _968;
  *_969 = 0.0;
  i_971 = i_19 + 1;
  # DEBUG i => i_971

  <bb 315>:
  # i_19 = PHI <0(313), i_971(314)>
  # DEBUG i => i_19
  _965 = padded_taps_length_950 - taps_length_942;
  if (i_19 < _965)
    goto <bb 314>;
  else
    goto <bb 316>;

  <bb 316>:
  factor.95_972 = factor;
  _973 = (float) factor.95_972;
  _974 = 5.0e-1 / _973;
  firdes_lowpass_f (taps_962, taps_length_942, _974, window_18);
  # DEBUG input_skip => 0
  # DEBUG output_size => 0
  input_buffer.40_976 = input_buffer;
  the_bufsize.31_977 = the_bufsize;
  the_bufsize.36_978 = (unsigned int) the_bufsize.31_977;
  stdin.34_979 = stdin;
  fread (input_buffer.40_976, 8, the_bufsize.36_978, stdin.34_979);

  <bb 317>:
  stdin.34_981 = stdin;
  _983 = feof (stdin.34_981);
  if (_983 != 0)
    goto <bb 319>;
  else
    goto <bb 318>;

  <bb 318>:
  input_buffer.40_984 = input_buffer;
  output_buffer.37_985 = output_buffer;
  the_bufsize.31_986 = the_bufsize;
  factor.95_987 = factor;
  output_size_989 = fir_decimate_cc (input_buffer.40_984, output_buffer.37_985, the_bufsize.31_986, factor.95_987, taps_962, padded_taps_length_950);
  # DEBUG output_size => output_size_989
  output_buffer.37_990 = output_buffer;
  output_size.98_991 = (unsigned int) output_size_989;
  stdout.38_992 = stdout;
  fwrite (output_buffer.37_990, 8, output_size.98_991, stdout.38_992);
  stdout.38_994 = stdout;
  fflush (stdout.38_994);
  factor.95_996 = factor;
  input_skip_997 = output_size_989 * factor.95_996;
  # DEBUG input_skip => input_skip_997
  input_buffer.40_998 = input_buffer;
  input_skip.99_1000 = (unsigned int) input_skip_997;
  _1001 = input_skip.99_1000 * 8;
  _1002 = input_buffer.40_998 + _1001;
  the_bufsize.31_1003 = the_bufsize;
  _1004 = the_bufsize.31_1003 - input_skip_997;
  _1005 = (unsigned int) _1004;
  _1006 = _1005 * 8;
  memmove (input_buffer.40_998, _1002, _1006);
  input_buffer.40_1008 = input_buffer;
  the_bufsize.31_1009 = the_bufsize;
  _1010 = the_bufsize.31_1009 - input_skip_997;
  _1011 = (unsigned int) _1010;
  _1012 = _1011 * 8;
  _1013 = input_buffer.40_1008 + _1012;
  stdin.34_1015 = stdin;
  fread (_1013, 8, input_skip.99_1000, stdin.34_1015);
  goto <bb 317>;

  <bb 319>:
  # _77 = PHI <-1(305), -2(310), 0(317)>
  factor ={v} {CLOBBER};
  transition_bw ={v} {CLOBBER};
  goto <bb 692>;

  <bb 320>:
  # DEBUG __s2_len => 16
  iftmp.101_1020 = __builtin_strcmp (_266, "firdes_lowpass_f");
  if (iftmp.101_1020 == 0)
    goto <bb 321>;
  else
    goto <bb 335>;

  <bb 321>:
  if (argc_261(D) <= 3)
    goto <bb 322>;
  else
    goto <bb 323>;

  <bb 322>:
  # DEBUG why => "need required parameters (cutoff_rate, length)"
  stderr.0_2302 = stderr;
  fprintf (stderr.0_2302, "csdr: %s\n\n", "need required parameters (cutoff_rate, length)");
  # DEBUG why => NULL
  goto <bb 334>;

  <bb 323>:
  _1021 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1021, "%g", &cutoff_rate);
  _1023 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1023, "%d", &length);
  length.102_1025 = length;
  length.103_1026 = (unsigned int) length.102_1025;
  _1027 = length.103_1026 & 1;
  if (_1027 == 0)
    goto <bb 324>;
  else
    goto <bb 325>;

  <bb 324>:
  # DEBUG why => "number of symmetric FIR filter taps should be odd"
  stderr.0_2303 = stderr;
  fprintf (stderr.0_2303, "csdr: %s\n\n", "number of symmetric FIR filter taps should be odd");
  # DEBUG why => NULL
  goto <bb 334>;

  <bb 325>:
  # DEBUG window => 2
  if (argc_261(D) != 4)
    goto <bb 326>;
  else
    goto <bb 327>;

  <bb 326>:
  _1028 = MEM[(char * *)argv_259(D) + 16B];
  window_1030 = firdes_get_window_from_string (_1028);
  # DEBUG window => window_1030
  # DEBUG window => window_1030
  if (argc_261(D) > 5)
    goto <bb 328>;
  else
    goto <bb 695>;

  <bb 327>:
  stderr.58_1031 = stderr;
  _1033 = firdes_get_string_from_window (2);
  fprintf (stderr.58_1031, "firdes_lowpass_f: window = %s\n", _1033);
  # DEBUG window => 2
  # DEBUG octave => 0
  length.102_1038 = length;
  length.106_1039 = (unsigned int) length.102_1038;
  _1040 = length.106_1039 * 4;
  taps_1042 = malloc (_1040);
  # DEBUG taps => taps_1042
  cutoff_rate.107_1044 = cutoff_rate;
  firdes_lowpass_f (taps_1042, length.102_1038, cutoff_rate.107_1044, 2);
  goto <bb 329>;

  <bb 328>:
  # DEBUG __s1_len => 8
  _1035 = MEM[(char * *)argv_259(D) + 20B];
  iftmp.105_1036 = __builtin_strcmp ("--octave", _1035);
  if (iftmp.105_1036 == 0)
    goto <bb 694>;
  else
    goto <bb 695>;

  <bb 329>:
  # iftmp.104_2770 = PHI <0(695), 1(694), 0(327)>
  # taps_2782 = PHI <taps_2704(695), taps_2696(694), taps_1042(327)>
  goto <bb 331>;

  <bb 330>:
  i.108_1048 = (unsigned int) i_21;
  _1049 = i.108_1048 * 4;
  _1050 = taps_2782 + _1049;
  _1051 = *_1050;
  _1052 = (double) _1051;
  printf ("%g ", _1052);
  i_1054 = i_21 + 1;
  # DEBUG i => i_1054

  <bb 331>:
  # i_21 = PHI <0(329), i_1054(330)>
  # DEBUG i => i_21
  length.102_1047 = length;
  if (i_21 < length.102_1047)
    goto <bb 330>;
  else
    goto <bb 332>;

  <bb 332>:
  if (iftmp.104_2770 != 0)
    goto <bb 333>;
  else
    goto <bb 334>;

  <bb 333>:
  __builtin_puts (&"];plot(taps);figure(2);freqz(taps);"[0]);
  stdout.38_1056 = stdout;
  fflush (stdout.38_1056);
  stdin.219_1724 = stdin;
  _IO_getc (stdin.219_1724);

  <bb 334>:
  # _78 = PHI <-1(322), -1(324), 0(333), 0(332)>
  cutoff_rate ={v} {CLOBBER};
  length ={v} {CLOBBER};
  goto <bb 692>;

  <bb 335>:
  # DEBUG __s2_len => 17
  iftmp.109_1061 = __builtin_strcmp (_266, "firdes_bandpass_c");
  if (iftmp.109_1061 == 0)
    goto <bb 336>;
  else
    goto <bb 353>;

  <bb 336>:
  if (argc_261(D) <= 4)
    goto <bb 337>;
  else
    goto <bb 338>;

  <bb 337>:
  # DEBUG why => "need required parameters (low_cut, high_cut, length)"
  stderr.0_2304 = stderr;
  fprintf (stderr.0_2304, "csdr: %s\n\n", "need required parameters (low_cut, high_cut, length)");
  # DEBUG why => NULL
  goto <bb 352>;

  <bb 338>:
  _1062 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1062, "%g", &low_cut);
  _1064 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1064, "%g", &high_cut);
  _1066 = MEM[(char * *)argv_259(D) + 16B];
  sscanf (_1066, "%d", &length);
  length.110_1068 = length;
  length.111_1069 = (unsigned int) length.110_1068;
  _1070 = length.111_1069 & 1;
  if (_1070 == 0)
    goto <bb 339>;
  else
    goto <bb 340>;

  <bb 339>:
  # DEBUG why => "number of symmetric FIR filter taps should be odd"
  stderr.0_2305 = stderr;
  fprintf (stderr.0_2305, "csdr: %s\n\n", "number of symmetric FIR filter taps should be odd");
  # DEBUG why => NULL
  goto <bb 352>;

  <bb 340>:
  # DEBUG window => 2
  if (argc_261(D) != 5)
    goto <bb 341>;
  else
    goto <bb 342>;

  <bb 341>:
  _1071 = MEM[(char * *)argv_259(D) + 20B];
  window_1073 = firdes_get_window_from_string (_1071);
  # DEBUG window => window_1073
  # DEBUG window => window_1073
  if (argc_261(D) > 6)
    goto <bb 343>;
  else
    goto <bb 697>;

  <bb 342>:
  stderr.58_1074 = stderr;
  _1076 = firdes_get_string_from_window (2);
  fprintf (stderr.58_1074, "firdes_bandpass_c: window = %s\n", _1076);
  # DEBUG window => 2
  # DEBUG octave => 0
  length.110_1081 = length;
  length.114_1082 = (unsigned int) length.110_1081;
  _1083 = length.114_1082 * 8;
  taps_1085 = malloc (_1083);
  # DEBUG taps => taps_1085
  low_cut.115_1087 = low_cut;
  high_cut.116_1088 = high_cut;
  firdes_bandpass_c (taps_1085, length.110_1081, low_cut.115_1087, high_cut.116_1088, 2);
  goto <bb 344>;

  <bb 343>:
  # DEBUG __s1_len => 8
  _1078 = MEM[(char * *)argv_259(D) + 24B];
  iftmp.113_1079 = __builtin_strcmp ("--octave", _1078);
  if (iftmp.113_1079 == 0)
    goto <bb 696>;
  else
    goto <bb 697>;

  <bb 344>:
  # iftmp.112_2772 = PHI <0(697), 1(696), 0(342)>
  # taps_2785 = PHI <taps_2725(697), taps_2716(696), taps_1085(342)>
  goto <bb 346>;

  <bb 345>:
  i.117_1092 = (unsigned int) i_23;
  _1093 = i.117_1092 * 8;
  _1094 = taps_2785 + _1093;
  _1095 = *_1094;
  _1096 = (double) _1095;
  _1099 = _1093 + 4;
  _1100 = taps_2785 + _1099;
  _1101 = *_1100;
  _1102 = (double) _1101;
  printf ("(%g)+(%g)*i ", _1096, _1102);
  i_1104 = i_23 + 1;
  # DEBUG i => i_1104

  <bb 346>:
  # i_23 = PHI <0(344), i_1104(345)>
  # DEBUG i => i_23
  length.110_1091 = length;
  if (i_23 < length.110_1091)
    goto <bb 345>;
  else
    goto <bb 347>;

  <bb 347>:
  # length.110_2661 = PHI <length.110_1091(346)>
  goto <bb 349>;

  <bb 348>:
  fft_length_1106 = fft_length_24 * 2;
  # DEBUG fft_length => fft_length_1106

  <bb 349>:
  # fft_length_24 = PHI <1024(347), fft_length_1106(348)>
  # DEBUG fft_length => fft_length_24
  if (fft_length_24 < length.110_2661)
    goto <bb 348>;
  else
    goto <bb 350>;

  <bb 350>:
  # fft_length_2664 = PHI <fft_length_24(349)>
  if (iftmp.112_2772 != 0)
    goto <bb 351>;
  else
    goto <bb 352>;

  <bb 351>:
  _1108 = fft_length_2664 - length.110_2661;
  printf ("];figure(\"Position\",[0 0 1000 1000]);fser=fft([taps,zeros(1,%d)]);ampl=abs(fser).^2;halfindex=floor(1+size(ampl)(2)/2);\namplrev=[ampl(halfindex:end),ampl(1:halfindex)];\nsubplot(2,1,1);plot(amplrev);\nsubplot(2,1,2);plot(arg(fser));\n#figure(2);freqz(taps);\n#figur(3);plot3(taps);\n", _1108);
  stdout.38_1110 = stdout;
  fflush (stdout.38_1110);
  stdin.219_2191 = stdin;
  _IO_getc (stdin.219_2191);

  <bb 352>:
  # _79 = PHI <-1(337), -1(339), 0(351), 0(350)>
  low_cut ={v} {CLOBBER};
  high_cut ={v} {CLOBBER};
  length ={v} {CLOBBER};
  goto <bb 692>;

  <bb 353>:
  # DEBUG __s2_len => 6
  iftmp.118_1116 = __builtin_strcmp (_266, "agc_ff");
  if (iftmp.118_1116 == 0)
    goto <bb 354>;
  else
    goto <bb 370>;

  <bb 354>:
  hang_time = 200;
  if (argc_261(D) != 2)
    goto <bb 355>;
  else
    goto <bb 698>;

  <bb 355>:
  _1118 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1118, "%hd", &hang_time);
  reference = 2.0000000298023223876953125e-1;
  if (argc_261(D) > 3)
    goto <bb 356>;
  else
    goto <bb 699>;

  <bb 356>:
  _1121 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1121, "%g", &reference);
  attack_rate = 9.99999977648258209228515625e-3;
  if (argc_261(D) > 4)
    goto <bb 357>;
  else
    goto <bb 700>;

  <bb 357>:
  _1124 = MEM[(char * *)argv_259(D) + 16B];
  sscanf (_1124, "%g", &attack_rate);
  decay_rate = 9.99999974737875163555145263671875e-5;
  if (argc_261(D) > 5)
    goto <bb 358>;
  else
    goto <bb 701>;

  <bb 358>:
  _1127 = MEM[(char * *)argv_259(D) + 20B];
  sscanf (_1127, "%g", &decay_rate);
  max_gain = 6.5536e+4;
  if (argc_261(D) > 6)
    goto <bb 359>;
  else
    goto <bb 702>;

  <bb 359>:
  _1130 = MEM[(char * *)argv_259(D) + 24B];
  sscanf (_1130, "%g", &max_gain);
  attack_wait = 0;
  if (argc_261(D) > 7)
    goto <bb 360>;
  else
    goto <bb 703>;

  <bb 360>:
  _1133 = MEM[(char * *)argv_259(D) + 28B];
  sscanf (_1133, "%hd", &attack_wait);
  filter_alpha = 9.99000012874603271484375e-1;
  if (argc_261(D) > 8)
    goto <bb 361>;
  else
    goto <bb 362>;

  <bb 361>:
  _1136 = MEM[(char * *)argv_259(D) + 32B];
  sscanf (_1136, "%g", &filter_alpha);

  <bb 362>:
  _1139 = initialize_buffers ();
  # DEBUG size => _1139
  env_csdr_dynamic_bufsize_on.24_2306 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2306 == 0)
    goto <bb 363>;
  else
    goto <bb 364>;

  <bb 363>:
  _2307 = env_csdr_fixed_bufsize;
  goto <bb 365>;

  <bb 364>:
  _2308 = sendbufsize.part.5 (_1139);

  <bb 365>:
  # _2309 = PHI <_2307(363), _2308(364)>
  # DEBUG size => NULL
  if (_2309 == 0)
    goto <bb 369>;
  else
    goto <bb 366>;

  <bb 366>:

  <bb 367>:
  # last_gain_25 = PHI <1.0e+0(366), last_gain_1159(368)>
  # DEBUG last_gain => last_gain_25
  stdin.34_1140 = stdin;
  _1142 = feof (stdin.34_1140);
  if (_1142 != 0)
    goto <bb 369>;
  else
    goto <bb 368>;

  <bb 368>:
  input_buffer.40_1143 = input_buffer;
  the_bufsize.31_1144 = the_bufsize;
  the_bufsize.36_1145 = (unsigned int) the_bufsize.31_1144;
  stdin.34_1146 = stdin;
  fread (input_buffer.40_1143, 4, the_bufsize.36_1145, stdin.34_1146);
  input_buffer.40_1148 = input_buffer;
  output_buffer.37_1149 = output_buffer;
  the_bufsize.31_1150 = the_bufsize;
  reference.119_1151 = reference;
  attack_rate.120_1152 = attack_rate;
  decay_rate.121_1153 = decay_rate;
  max_gain.122_1154 = max_gain;
  hang_time.123_1155 = hang_time;
  attack_wait.124_1156 = attack_wait;
  filter_alpha.125_1157 = filter_alpha;
  last_gain_1159 = agc_ff (input_buffer.40_1148, output_buffer.37_1149, the_bufsize.31_1150, reference.119_1151, attack_rate.120_1152, decay_rate.121_1153, max_gain.122_1154, hang_time.123_1155, attack_wait.124_1156, filter_alpha.125_1157, last_gain_25);
  # DEBUG last_gain => last_gain_1159
  output_buffer.37_1160 = output_buffer;
  the_bufsize.31_1161 = the_bufsize;
  the_bufsize.36_1162 = (unsigned int) the_bufsize.31_1161;
  stdout.38_1163 = stdout;
  fwrite (output_buffer.37_1160, 4, the_bufsize.36_1162, stdout.38_1163);
  goto <bb 367>;

  <bb 369>:
  # _80 = PHI <-2(365), 0(367)>
  hang_time ={v} {CLOBBER};
  reference ={v} {CLOBBER};
  attack_rate ={v} {CLOBBER};
  decay_rate ={v} {CLOBBER};
  max_gain ={v} {CLOBBER};
  attack_wait ={v} {CLOBBER};
  filter_alpha ={v} {CLOBBER};
  goto <bb 692>;

  <bb 370>:
  # DEBUG __s2_len => 10
  iftmp.126_1173 = __builtin_strcmp (_266, "fastagc_ff");
  if (iftmp.126_1173 == 0)
    goto <bb 371>;
  else
    goto <bb 379>;

  <bb 371>:
  input.input_size = 1024;
  if (argc_261(D) != 2)
    goto <bb 372>;
  else
    goto <bb 707>;

  <bb 372>:
  _1175 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1175, "%d", &input.input_size);
  getbufsize ();
  _1178 = input.input_size;
  # DEBUG size => _1178
  env_csdr_dynamic_bufsize_on.24_2310 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2310 == 0)
    goto <bb 374>;
  else
    goto <bb 373>;

  <bb 373>:
  # _1192 = PHI <_1178(372), _2517(707)>
  sendbufsize.part.5 (_1192);

  <bb 374>:
  # DEBUG size => NULL
  input.reference = 1.0e+0;
  if (argc_261(D) > 3)
    goto <bb 375>;
  else
    goto <bb 376>;

  <bb 375>:
  _1180 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1180, "%g", &input.reference);

  <bb 376>:
  _1182 = input.input_size;
  _1183 = (unsigned int) _1182;
  _1185 = calloc (_1183, 4);
  input.buffer_1 = _1185;
  _1190 = calloc (_1183, 4);
  input.buffer_2 = _1190;
  _1194 = _1183 * 4;
  _1196 = malloc (_1194);
  input.buffer_input = _1196;
  agc_output_buffer_1202 = malloc (_1194);
  # DEBUG agc_output_buffer => agc_output_buffer_1202

  <bb 377>:
  stdin.34_1203 = stdin;
  _1205 = feof (stdin.34_1203);
  if (_1205 != 0)
    goto <bb 27>;
  else
    goto <bb 378>;

  <bb 378>:
  _1206 = input.buffer_input;
  _1207 = input.input_size;
  _1208 = (unsigned int) _1207;
  stdin.34_1209 = stdin;
  fread (_1206, 4, _1208, stdin.34_1209);
  fastagc_ff (&input, agc_output_buffer_1202);
  _1212 = input.input_size;
  _1213 = (unsigned int) _1212;
  stdout.38_1214 = stdout;
  fwrite (agc_output_buffer_1202, 4, _1213, stdout.38_1214);
  goto <bb 377>;

  <bb 379>:
  # DEBUG __s2_len => 32
  iftmp.127_1216 = __builtin_strcmp (_266, "suboptimal_rational_resampler_ff");
  # DEBUG D#12 => iftmp.127_1216 == 0
  # DEBUG suboptimal => (int) D#12
  if (iftmp.127_1216 == 0)
    goto <bb 381>;
  else
    goto <bb 380>;

  <bb 380>:
  # DEBUG __s2_len => 21
  iftmp.128_1217 = __builtin_strcmp (_266, "rational_resampler_ff");
  if (iftmp.128_1217 == 0)
    goto <bb 381>;
  else
    goto <bb 404>;

  <bb 381>:
  if (argc_261(D) <= 3)
    goto <bb 382>;
  else
    goto <bb 383>;

  <bb 382>:
  # DEBUG why => "need required parameters (interpolation, decimation)"
  stderr.0_2311 = stderr;
  fprintf (stderr.0_2311, "csdr: %s\n\n", "need required parameters (interpolation, decimation)");
  # DEBUG why => NULL
  goto <bb 403>;

  <bb 383>:
  _2112 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_2112, "%d", &interpolation);
  _2114 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_2114, "%d", &decimation);
  transition_bw = 5.00000007450580596923828125e-2;
  if (argc_261(D) != 4)
    goto <bb 384>;
  else
    goto <bb 386>;

  <bb 384>:
  _2117 = MEM[(char * *)argv_259(D) + 16B];
  sscanf (_2117, "%g", &transition_bw);
  # DEBUG window => 2
  if (argc_261(D) > 5)
    goto <bb 385>;
  else
    goto <bb 386>;

  <bb 385>:
  _2119 = MEM[(char * *)argv_259(D) + 20B];
  window_2121 = firdes_get_window_from_string (_2119);
  # DEBUG window => window_2121
  goto <bb 387>;

  <bb 386>:
  # DEBUG window => 2
  stderr.58_2122 = stderr;
  _2124 = firdes_get_string_from_window (2);
  fprintf (stderr.58_2122, "rational_resampler_ff: window = %s\n", _2124);

  <bb 387>:
  # window_26 = PHI <window_2121(385), 2(386)>
  # DEBUG window => window_26
  if (iftmp.127_1216 == 0)
    goto <bb 388>;
  else
    goto <bb 389>;

  <bb 388>:
  stderr.58_2126 = stderr;
  __builtin_fwrite ("note: suboptimal rational resampler chosen.\n", 1, 44, stderr.58_2126);

  <bb 389>:
  _2129 = initialize_buffers ();
  if (_2129 == 0)
    goto <bb 403>;
  else
    goto <bb 390>;

  <bb 390>:
  decimation.129_2130 = decimation;
  if (decimation.129_2130 == 1)
    goto <bb 391>;
  else
    goto <bb 395>;

  <bb 391>:
  interpolation.130_2131 = interpolation;
  if (interpolation.130_2131 == 1)
    goto <bb 392>;
  else
    goto <bb 395>;

  <bb 392>:
  the_bufsize.31_2132 = the_bufsize;
  # DEBUG size => the_bufsize.31_2132
  env_csdr_dynamic_bufsize_on.24_2312 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2312 == 0)
    goto <bb 394>;
  else
    goto <bb 393>;

  <bb 393>:
  sendbufsize.part.5 (the_bufsize.31_2132);

  <bb 394>:
  # DEBUG size => NULL
  the_bufsize.31_2133 = the_bufsize;
  clone_ (the_bufsize.31_2133);

  <bb 395>:
  the_bufsize.31_2135 = the_bufsize;
  interpolation.130_2136 = interpolation;
  _2137 = the_bufsize.31_2135 * interpolation.130_2136;
  resampler_output_buffer_size_2138 = _2137 / decimation.129_2130;
  # DEBUG resampler_output_buffer_size => resampler_output_buffer_size_2138
  # DEBUG size => resampler_output_buffer_size_2138
  env_csdr_dynamic_bufsize_on.24_2313 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2313 == 0)
    goto <bb 397>;
  else
    goto <bb 396>;

  <bb 396>:
  sendbufsize.part.5 (resampler_output_buffer_size_2138);

  <bb 397>:
  # DEBUG size => NULL
  resampler_output_buffer_size.131_2139 = (unsigned int) resampler_output_buffer_size_2138;
  _2140 = resampler_output_buffer_size.131_2139 * 4;
  resampler_output_buffer_2142 = malloc (_2140);
  # DEBUG resampler_output_buffer => resampler_output_buffer_2142
  # DEBUG suboptimal_resampler_temp_buffer => 0B
  transition_bw.135_2143 = transition_bw;
  taps_length_2145 = firdes_filter_len (transition_bw.135_2143);
  # DEBUG taps_length => taps_length_2145
  taps_length.136_2146 = (unsigned int) taps_length_2145;
  _2147 = taps_length.136_2146 * 4;
  taps_2149 = malloc (_2147);
  # DEBUG taps => taps_2149
  interpolation.130_2150 = interpolation;
  decimation.129_2151 = decimation;
  rational_resampler_get_lowpass_f (taps_2149, taps_length_2145, interpolation.130_2150, decimation.129_2151, window_26);

  <bb 398>:
  stdin.34_2153 = stdin;
  _2155 = feof (stdin.34_2153);
  if (_2155 != 0)
    goto <bb 403>;
  else
    goto <bb 399>;

  <bb 399>:
  _2156 = d.input_processed;
  if (_2156 == 0)
    goto <bb 400>;
  else
    goto <bb 401>;

  <bb 400>:
  the_bufsize.31_2157 = the_bufsize;
  d.input_processed = the_bufsize.31_2157;
  goto <bb 402>;

  <bb 401>:
  input_buffer.40_2159 = input_buffer;
  _2160 = (unsigned int) _2156;
  _2161 = _2160 * 4;
  _2162 = input_buffer.40_2159 + _2161;
  the_bufsize.31_2163 = the_bufsize;
  _2164 = the_bufsize.31_2163 - _2156;
  _2165 = (unsigned int) _2164;
  _2166 = _2165 * 4;
  memcpy (input_buffer.40_2159, _2162, _2166);

  <bb 402>:
  input_buffer.40_2168 = input_buffer;
  the_bufsize.31_2169 = the_bufsize;
  _2170 = d.input_processed;
  _2171 = the_bufsize.31_2169 - _2170;
  _2172 = (unsigned int) _2171;
  _2173 = _2172 * 4;
  _2174 = input_buffer.40_2168 + _2173;
  _2175 = (unsigned int) _2170;
  stdin.34_2176 = stdin;
  fread (_2174, 4, _2175, stdin.34_2176);
  input_buffer.40_2178 = input_buffer;
  the_bufsize.31_2179 = the_bufsize;
  interpolation.130_2180 = interpolation;
  decimation.129_2181 = decimation;
  _2182 = d.last_taps_delay;
  d = rational_resampler_ff (input_buffer.40_2178, resampler_output_buffer_2142, the_bufsize.31_2179, interpolation.130_2180, decimation.129_2181, taps_2149, taps_length_2145, _2182);
  _2184 = d.output_size;
  _2185 = (unsigned int) _2184;
  stdout.38_2186 = stdout;
  fwrite (resampler_output_buffer_2142, 4, _2185, stdout.38_2186);
  goto <bb 398>;

  <bb 403>:
  # _81 = PHI <-1(382), -2(389), 0(398)>
  interpolation ={v} {CLOBBER};
  decimation ={v} {CLOBBER};
  transition_bw ={v} {CLOBBER};
  goto <bb 692>;

  <bb 404>:
  # DEBUG __s2_len => 23
  iftmp.137_1218 = __builtin_strcmp (_266, "fractional_decimator_ff");
  if (iftmp.137_1218 == 0)
    goto <bb 405>;
  else
    goto <bb 423>;

  <bb 405>:
  if (argc_261(D) == 2)
    goto <bb 406>;
  else
    goto <bb 407>;

  <bb 406>:
  # DEBUG why => "need required parameters (rate)"
  stderr.0_2314 = stderr;
  fprintf (stderr.0_2314, "csdr: %s\n\n", "need required parameters (rate)");
  # DEBUG why => NULL
  goto <bb 422>;

  <bb 407>:
  _1219 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1219, "%g", &rate);
  transition_bw = 2.999999932944774627685546875e-2;
  if (argc_261(D) != 3)
    goto <bb 408>;
  else
    goto <bb 410>;

  <bb 408>:
  _1222 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1222, "%g", &transition_bw);
  # DEBUG window => 2
  if (argc_261(D) > 4)
    goto <bb 409>;
  else
    goto <bb 410>;

  <bb 409>:
  _1224 = MEM[(char * *)argv_259(D) + 16B];
  window_1226 = firdes_get_window_from_string (_1224);
  # DEBUG window => window_1226
  goto <bb 411>;

  <bb 410>:
  # DEBUG window => 2
  stderr.58_1227 = stderr;
  _1229 = firdes_get_string_from_window (2);
  fprintf (stderr.58_1227, "fractional_decimator_ff: window = %s\n", _1229);

  <bb 411>:
  # window_27 = PHI <window_1226(409), 2(410)>
  # DEBUG window => window_27
  _1232 = initialize_buffers ();
  if (_1232 == 0)
    goto <bb 422>;
  else
    goto <bb 412>;

  <bb 412>:
  the_bufsize.31_1233 = the_bufsize;
  _1234 = (float) the_bufsize.31_1233;
  rate.138_1235 = rate;
  _1236 = _1234 / rate.138_1235;
  _1237 = (int) _1236;
  # DEBUG size => _1237
  env_csdr_dynamic_bufsize_on.24_2315 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2315 == 0)
    goto <bb 414>;
  else
    goto <bb 413>;

  <bb 413>:
  sendbufsize.part.5 (_1237);

  <bb 414>:
  # DEBUG size => NULL
  rate.138_1238 = rate;
  if (rate.138_1238 == 1.0e+0)
    goto <bb 415>;
  else
    goto <bb 416>;

  <bb 415>:
  the_bufsize.31_1239 = the_bufsize;
  clone_ (the_bufsize.31_1239);

  <bb 416>:
  transition_bw.139_1241 = transition_bw;
  taps_length_1243 = firdes_filter_len (transition_bw.139_1241);
  # DEBUG taps_length => taps_length_1243
  stderr.58_1244 = stderr;
  fprintf (stderr.58_1244, "fractional_decimator_ff: taps_length = %d\n", taps_length_1243);
  taps_length.140_1246 = (unsigned int) taps_length_1243;
  _1247 = taps_length.140_1246 * 4;
  taps_1249 = malloc (_1247);
  # DEBUG taps => taps_1249
  rate.138_1250 = rate;
  transition_bw.139_1251 = transition_bw;
  _1252 = rate.138_1250 - transition_bw.139_1251;
  _1253 = (double) _1252;
  _1254 = 2.94999999999999984456877655247808434069156646729e-1 / _1253;
  _1255 = (float) _1254;
  firdes_lowpass_f (taps_1249, taps_length_1243, _1255, window_27);

  <bb 417>:
  stdin.34_1257 = stdin;
  _1259 = feof (stdin.34_1257);
  if (_1259 != 0)
    goto <bb 422>;
  else
    goto <bb 418>;

  <bb 418>:
  _1260 = d.input_processed;
  if (_1260 == 0)
    goto <bb 419>;
  else
    goto <bb 420>;

  <bb 419>:
  the_bufsize.31_1261 = the_bufsize;
  d.input_processed = the_bufsize.31_1261;
  goto <bb 421>;

  <bb 420>:
  input_buffer.40_1263 = input_buffer;
  _1264 = (unsigned int) _1260;
  _1265 = _1264 * 4;
  _1266 = input_buffer.40_1263 + _1265;
  the_bufsize.31_1267 = the_bufsize;
  _1268 = the_bufsize.31_1267 - _1260;
  _1269 = (unsigned int) _1268;
  _1270 = _1269 * 4;
  memcpy (input_buffer.40_1263, _1266, _1270);

  <bb 421>:
  input_buffer.40_1272 = input_buffer;
  the_bufsize.31_1273 = the_bufsize;
  _1274 = d.input_processed;
  _1275 = the_bufsize.31_1273 - _1274;
  _1276 = (unsigned int) _1275;
  _1277 = _1276 * 4;
  _1278 = input_buffer.40_1272 + _1277;
  _1279 = (unsigned int) _1274;
  stdin.34_1280 = stdin;
  fread (_1278, 4, _1279, stdin.34_1280);
  input_buffer.40_1282 = input_buffer;
  output_buffer.37_1283 = output_buffer;
  the_bufsize.31_1284 = the_bufsize;
  rate.138_1285 = rate;
  d = fractional_decimator_ff (input_buffer.40_1282, output_buffer.37_1283, the_bufsize.31_1284, rate.138_1285, taps_1249, taps_length_1243, d);
  output_buffer.37_1287 = output_buffer;
  _1288 = d.output_size;
  _1289 = (unsigned int) _1288;
  stdout.38_1290 = stdout;
  fwrite (output_buffer.37_1287, 4, _1289, stdout.38_1290);
  goto <bb 417>;

  <bb 422>:
  # _82 = PHI <-1(406), -2(411), 0(417)>
  rate ={v} {CLOBBER};
  transition_bw ={v} {CLOBBER};
  goto <bb 692>;

  <bb 423>:
  # DEBUG __s2_len => 6
  iftmp.141_1294 = __builtin_strcmp (_266, "fft_cc");
  if (iftmp.141_1294 == 0)
    goto <bb 424>;
  else
    goto <bb 460>;

  <bb 424>:
  if (argc_261(D) <= 3)
    goto <bb 425>;
  else
    goto <bb 426>;

  <bb 425>:
  # DEBUG why => "need required parameters (fft_size, out_of_every_n_samples)"
  stderr.0_2316 = stderr;
  fprintf (stderr.0_2316, "csdr: %s\n\n", "need required parameters (fft_size, out_of_every_n_samples)");
  # DEBUG why => NULL
  goto <bb 459>;

  <bb 426>:
  _1295 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1295, "%d", &fft_size);
  fft_size.142_1297 = fft_size;
  _1299 = log2n (fft_size.142_1297);
  if (_1299 == -1)
    goto <bb 427>;
  else
    goto <bb 428>;

  <bb 427>:
  # DEBUG why => "fft_size should be power of 2"
  stderr.0_2317 = stderr;
  fprintf (stderr.0_2317, "csdr: %s\n\n", "fft_size should be power of 2");
  # DEBUG why => NULL
  goto <bb 459>;

  <bb 428>:
  _1300 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1300, "%d", &every_n_samples);
  # DEBUG benchmark => 0
  # DEBUG octave => 0
  # DEBUG window => 2
  if (argc_261(D) != 4)
    goto <bb 429>;
  else
    goto <bb 432>;

  <bb 429>:
  _1302 = MEM[(char * *)argv_259(D) + 16B];
  window_1304 = firdes_get_window_from_string (_1302);
  # DEBUG window => window_1304
  # DEBUG window => window_1304
  if (argc_261(D) > 5)
    goto <bb 430>;
  else
    goto <bb 432>;

  <bb 430>:
  # DEBUG __s1_len => 11
  _1305 = MEM[(char * *)argv_259(D) + 20B];
  iftmp.143_1306 = __builtin_strcmp ("--benchmark", _1305);
  _1307 = iftmp.143_1306 == 0;
  _1308 = (int) _1307;
  # DEBUG benchmark => _1308
  # DEBUG __s1_len => 8
  iftmp.144_1309 = __builtin_strcmp ("--octave", _1305);
  _1310 = iftmp.144_1309 == 0;
  _1311 = (int) _1310;
  # DEBUG octave => _1311
  # DEBUG octave => _1311
  # DEBUG benchmark => _1308
  if (argc_261(D) > 6)
    goto <bb 431>;
  else
    goto <bb 432>;

  <bb 431>:
  # DEBUG __s1_len => 11
  _1312 = MEM[(char * *)argv_259(D) + 24B];
  iftmp.145_1313 = __builtin_strcmp ("--benchmark", _1312);
  _1314 = iftmp.145_1313 == 0;
  _369 = _1307 | _1314;
  benchmark_1316 = (int) _369;
  # DEBUG benchmark => benchmark_1316
  # DEBUG __s1_len => 8
  iftmp.146_1317 = __builtin_strcmp ("--octave", _1312);
  _1318 = iftmp.146_1317 == 0;
  _30 = _1310 | _1318;
  octave_1320 = (int) _30;
  # DEBUG octave => octave_1320

  <bb 432>:
  # benchmark_29 = PHI <_1308(430), benchmark_1316(431), 0(429), 0(428)>
  # octave_31 = PHI <_1311(430), octave_1320(431), 0(429), 0(428)>
  # window_2765 = PHI <window_1304(430), window_1304(431), window_1304(429), 2(428)>
  # DEBUG octave => octave_31
  # DEBUG benchmark => benchmark_29
  _1322 = initialize_buffers ();
  if (_1322 == 0)
    goto <bb 459>;
  else
    goto <bb 433>;

  <bb 433>:
  fft_size.142_1323 = fft_size;
  # DEBUG size => fft_size.142_1323
  env_csdr_dynamic_bufsize_on.24_2318 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2318 == 0)
    goto <bb 435>;
  else
    goto <bb 434>;

  <bb 434>:
  sendbufsize.part.5 (fft_size.142_1323);

  <bb 435>:
  # DEBUG size => NULL
  fft_size.142_1324 = fft_size;
  fft_size.147_1325 = (unsigned int) fft_size.142_1324;
  _1326 = fft_size.147_1325 * 8;
  input_1328 = fftwf_malloc (_1326);
  # DEBUG input => input_1328
  fft_size.142_1329 = fft_size;
  fft_size.147_1330 = (unsigned int) fft_size.142_1329;
  _1331 = fft_size.147_1330 * 8;
  windowed_1333 = fftwf_malloc (_1331);
  # DEBUG windowed => windowed_1333
  fft_size.142_1334 = fft_size;
  fft_size.147_1335 = (unsigned int) fft_size.142_1334;
  _1336 = fft_size.147_1335 * 8;
  output_1338 = fftwf_malloc (_1336);
  # DEBUG output => output_1338
  if (benchmark_29 != 0)
    goto <bb 436>;
  else
    goto <bb 704>;

  <bb 436>:
  stderr.58_1339 = stderr;
  __builtin_fwrite ("fft_cc: benchmarking...", 1, 23, stderr.58_1339);
  fft_size.142_2750 = fft_size;
  plan_2752 = make_fft_c2c (fft_size.142_2750, windowed_1333, output_1338, 1, 1);
  # DEBUG plan => plan_2752
  # DEBUG plan => plan_2752
  stderr.58_1344 = stderr;
  __builtin_fwrite (" done\n", 1, 6, stderr.58_1344);

  <bb 437>:
  # plan_2787 = PHI <plan_2756(704), plan_2752(436)>
  if (octave_31 != 0)
    goto <bb 438>;
  else
    goto <bb 439>;

  <bb 438>:
  fft_size.142_1346 = fft_size;
  printf ("setenv(\"GNUTERM\",\"X11 noraise\");y=zeros(1,%d);semilogy(y,\"ydatasource\",\"y\");\n", fft_size.142_1346);

  <bb 439>:
  goto <bb 441>;

  <bb 440>:

  <bb 441>:
  stdin.34_1348 = stdin;
  _1350 = feof (stdin.34_1348);
  if (_1350 != 0)
    goto <bb 459>;
  else
    goto <bb 442>;

  <bb 442>:
  every_n_samples.148_1351 = every_n_samples;
  fft_size.142_1352 = fft_size;
  if (every_n_samples.148_1351 > fft_size.142_1352)
    goto <bb 444>;
  else
    goto <bb 443>;

  <bb 443>:
  goto <bb 448>;

  <bb 444>:
  fft_size.149_1353 = (unsigned int) fft_size.142_1352;
  stdin.34_1354 = stdin;
  fread (input_1328, 8, fft_size.149_1353, stdin.34_1354);
  every_n_samples.148_1356 = every_n_samples;
  fft_size.142_1357 = fft_size;
  seek_remain_1358 = every_n_samples.148_1356 - fft_size.142_1357;
  # DEBUG seek_remain => seek_remain_1358
  goto <bb 446>;

  <bb 445>:
  temp_f.77_1359 = temp_f;
  the_bufsize.31_1360 = the_bufsize;
  _1361 = MIN_EXPR <seek_remain_33, the_bufsize.31_1360>;
  _1362 = (unsigned int) _1361;
  stdin.34_1363 = stdin;
  fread (temp_f.77_1359, 8, _1362, stdin.34_1363);
  the_bufsize.31_1365 = the_bufsize;
  seek_remain_1366 = seek_remain_33 - the_bufsize.31_1365;
  # DEBUG seek_remain => seek_remain_1366

  <bb 446>:
  # seek_remain_33 = PHI <seek_remain_1358(444), seek_remain_1366(445)>
  # DEBUG seek_remain => seek_remain_33
  if (seek_remain_33 > 0)
    goto <bb 445>;
  else
    goto <bb 450>;

  <bb 447>:
  i.150_1368 = (unsigned int) i_34;
  _1369 = i.150_1368 * 8;
  _1370 = input_1328 + _1369;
  _1371 = i_34 + every_n_samples.148_1351;
  _1372 = (unsigned int) _1371;
  _1373 = _1372 * 8;
  _1374 = input_1328 + _1373;
  *_1370 = *_1374;
  i_1376 = i_34 + 1;
  # DEBUG i => i_1376

  <bb 448>:
  # i_34 = PHI <0(443), i_1376(447)>
  # DEBUG i => i_34
  _1367 = fft_size.142_1352 - every_n_samples.148_1351;
  if (i_34 < _1367)
    goto <bb 447>;
  else
    goto <bb 449>;

  <bb 449>:
  fft_size.151_1377 = (sizetype) fft_size.142_1352;
  every_n_samples.152_1378 = (sizetype) every_n_samples.148_1351;
  _1379 = fft_size.151_1377 - every_n_samples.152_1378;
  _1380 = _1379 * 8;
  _1381 = input_1328 + _1380;
  stdin.34_1382 = stdin;
  fread (_1381, 8, every_n_samples.152_1378, stdin.34_1382);

  <bb 450>:
  fft_size.142_1384 = fft_size;
  apply_window_c (input_1328, windowed_1333, fft_size.142_1384, window_2765);
  fft_execute (plan_2787);
  if (octave_31 != 0)
    goto <bb 451>;
  else
    goto <bb 458>;

  <bb 451>:
  printf ("fftdata=[");
  fft_size.142_1392 = fft_size;
  i_1393 = fft_size.142_1392 / 2;
  # DEBUG i => i_1393
  goto <bb 453>;

  <bb 452>:
  i.154_1395 = (unsigned int) i_35;
  _1396 = i.154_1395 * 8;
  _1397 = output_1338 + _1396;
  _1398 = *_1397;
  _1399 = (double) _1398;
  _1400 = _1396 + 4;
  _1401 = output_1338 + _1400;
  _1402 = *_1401;
  _1403 = (double) _1402;
  printf ("(%g)+(%g)*i ", _1399, _1403);
  i_1405 = i_35 + 1;
  # DEBUG i => i_1405

  <bb 453>:
  # i_35 = PHI <i_1393(451), i_1405(452)>
  # DEBUG i => i_35
  fft_size.142_1394 = fft_size;
  if (i_35 < fft_size.142_1394)
    goto <bb 452>;
  else
    goto <bb 454>;

  <bb 454>:
  goto <bb 456>;

  <bb 455>:
  i.155_1408 = (unsigned int) i_36;
  _1409 = i.155_1408 * 8;
  _1410 = output_1338 + _1409;
  _1411 = *_1410;
  _1412 = (double) _1411;
  _1413 = _1409 + 4;
  _1414 = output_1338 + _1413;
  _1415 = *_1414;
  _1416 = (double) _1415;
  printf ("(%g)+(%g)*i ", _1412, _1416);
  i_1418 = i_36 + 1;
  # DEBUG i => i_1418

  <bb 456>:
  # i_36 = PHI <0(454), i_1418(455)>
  # DEBUG i => i_36
  fft_size.142_1406 = fft_size;
  _1407 = fft_size.142_1406 / 2;
  if (i_36 < _1407)
    goto <bb 455>;
  else
    goto <bb 457>;

  <bb 457>:
  __builtin_puts (&"];\ny=abs(fftdata);\nrefreshdata;"[0]);
  goto <bb 440>;

  <bb 458>:
  fft_size.142_1387 = fft_size;
  fft_size.149_1388 = (unsigned int) fft_size.142_1387;
  stdout.38_1389 = stdout;
  fwrite (output_1338, 8, fft_size.149_1388, stdout.38_1389);
  goto <bb 440>;

  <bb 459>:
  # _83 = PHI <-1(425), -1(427), -2(432), 0(441)>
  fft_size ={v} {CLOBBER};
  every_n_samples ={v} {CLOBBER};
  goto <bb 692>;

  <bb 460>:
  # DEBUG __s2_len => 11
  iftmp.156_1422 = __builtin_strcmp (_266, "logpower_cf");
  if (iftmp.156_1422 == 0)
    goto <bb 461>;
  else
    goto <bb 471>;

  <bb 461>:
  add_db = 0.0;
  if (argc_261(D) != 2)
    goto <bb 462>;
  else
    goto <bb 463>;

  <bb 462>:
  _1424 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1424, "%g", &add_db);

  <bb 463>:
  _1427 = initialize_buffers ();
  # DEBUG size => _1427
  env_csdr_dynamic_bufsize_on.24_2320 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2320 == 0)
    goto <bb 464>;
  else
    goto <bb 465>;

  <bb 464>:
  _2321 = env_csdr_fixed_bufsize;
  goto <bb 466>;

  <bb 465>:
  _2322 = sendbufsize.part.5 (_1427);

  <bb 466>:
  # _2323 = PHI <_2321(464), _2322(465)>
  # DEBUG size => NULL
  if (_2323 == 0)
    goto <bb 470>;
  else
    goto <bb 467>;

  <bb 467>:

  <bb 468>:
  stdin.34_1428 = stdin;
  _1430 = feof (stdin.34_1428);
  if (_1430 != 0)
    goto <bb 470>;
  else
    goto <bb 469>;

  <bb 469>:
  input_buffer.40_1431 = input_buffer;
  the_bufsize.31_1432 = the_bufsize;
  the_bufsize.36_1433 = (unsigned int) the_bufsize.31_1432;
  stdin.34_1434 = stdin;
  fread (input_buffer.40_1431, 8, the_bufsize.36_1433, stdin.34_1434);
  input_buffer.40_1436 = input_buffer;
  output_buffer.37_1437 = output_buffer;
  the_bufsize.31_1438 = the_bufsize;
  add_db.157_1439 = add_db;
  logpower_cf (input_buffer.40_1436, output_buffer.37_1437, the_bufsize.31_1438, add_db.157_1439);
  output_buffer.37_1441 = output_buffer;
  the_bufsize.31_1442 = the_bufsize;
  the_bufsize.36_1443 = (unsigned int) the_bufsize.31_1442;
  stdout.38_1444 = stdout;
  fwrite (output_buffer.37_1441, 4, the_bufsize.36_1443, stdout.38_1444);
  goto <bb 468>;

  <bb 470>:
  # _84 = PHI <-2(466), 0(468)>
  add_db ={v} {CLOBBER};
  goto <bb 692>;

  <bb 471>:
  # DEBUG __s2_len => 21
  iftmp.158_1447 = __builtin_strcmp (_266, "fft_exchange_sides_ff");
  if (iftmp.158_1447 == 0)
    goto <bb 472>;
  else
    goto <bb 481>;

  <bb 472>:
  if (argc_261(D) == 2)
    goto <bb 473>;
  else
    goto <bb 474>;

  <bb 473>:
  # DEBUG why => "need required parameters (fft_size)"
  stderr.0_2324 = stderr;
  fprintf (stderr.0_2324, "csdr: %s\n\n", "need required parameters (fft_size)");
  # DEBUG why => NULL
  goto <bb 480>;

  <bb 474>:
  _1448 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1448, "%d", &fft_size);
  _1451 = getbufsize ();
  if (_1451 == 0)
    goto <bb 480>;
  else
    goto <bb 475>;

  <bb 475>:
  fft_size.159_1452 = fft_size;
  # DEBUG size => fft_size.159_1452
  env_csdr_dynamic_bufsize_on.24_2325 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2325 == 0)
    goto <bb 477>;
  else
    goto <bb 476>;

  <bb 476>:
  sendbufsize.part.5 (fft_size.159_1452);

  <bb 477>:
  # DEBUG size => NULL
  fft_size.159_1453 = fft_size;
  fft_size.160_1454 = (unsigned int) fft_size.159_1453;
  _1455 = fft_size.160_1454 * 4;
  _1456 = _1455 >> 1;
  input_buffer_s1_1458 = malloc (_1456);
  # DEBUG input_buffer_s1 => input_buffer_s1_1458
  input_buffer_s2_1460 = malloc (_1456);
  # DEBUG input_buffer_s2 => input_buffer_s2_1460

  <bb 478>:
  stdin.34_1461 = stdin;
  _1463 = feof (stdin.34_1461);
  if (_1463 != 0)
    goto <bb 480>;
  else
    goto <bb 479>;

  <bb 479>:
  fft_size.159_1464 = fft_size;
  _1465 = fft_size.159_1464 / 2;
  _1466 = (unsigned int) _1465;
  stdin.34_1467 = stdin;
  fread (input_buffer_s1_1458, 4, _1466, stdin.34_1467);
  fft_size.159_1469 = fft_size;
  _1470 = fft_size.159_1469 / 2;
  _1471 = (unsigned int) _1470;
  stdin.34_1472 = stdin;
  fread (input_buffer_s2_1460, 4, _1471, stdin.34_1472);
  fft_size.159_1474 = fft_size;
  _1475 = fft_size.159_1474 / 2;
  _1476 = (unsigned int) _1475;
  stdout.38_1477 = stdout;
  fwrite (input_buffer_s2_1460, 4, _1476, stdout.38_1477);
  fft_size.159_1479 = fft_size;
  _1480 = fft_size.159_1479 / 2;
  _1481 = (unsigned int) _1480;
  stdout.38_1482 = stdout;
  fwrite (input_buffer_s1_1458, 4, _1481, stdout.38_1482);
  goto <bb 478>;

  <bb 480>:
  # _85 = PHI <-1(473), -2(474), 0(478)>
  fft_size ={v} {CLOBBER};
  goto <bb 692>;

  <bb 481>:
  # DEBUG __s2_len => 23
  iftmp.161_1485 = __builtin_strcmp (_266, "compress_fft_adpcm_f_u8");
  if (iftmp.161_1485 == 0)
    goto <bb 482>;
  else
    goto <bb 497>;

  <bb 482>:
  if (argc_261(D) == 2)
    goto <bb 483>;
  else
    goto <bb 484>;

  <bb 483>:
  # DEBUG why => "need required parameters (fft_size)"
  stderr.0_2327 = stderr;
  fprintf (stderr.0_2327, "csdr: %s\n\n", "need required parameters (fft_size)");
  # DEBUG why => NULL
  goto <bb 496>;

  <bb 484>:
  _1486 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1486, "%d", &fft_size);
  fft_size.162_1488 = fft_size;
  real_data_size_1489 = fft_size.162_1488 + 10;
  # DEBUG real_data_size => real_data_size_1489
  _1491 = getbufsize ();
  if (_1491 == 0)
    goto <bb 496>;
  else
    goto <bb 485>;

  <bb 485>:
  # DEBUG size => real_data_size_1489
  env_csdr_dynamic_bufsize_on.24_2328 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2328 == 0)
    goto <bb 487>;
  else
    goto <bb 486>;

  <bb 486>:
  sendbufsize.part.5 (real_data_size_1489);

  <bb 487>:
  # DEBUG size => NULL
  real_data_size.163_1492 = (unsigned int) real_data_size_1489;
  _1493 = real_data_size.163_1492 * 4;
  input_buffer_cwa_1495 = malloc (_1493);
  # DEBUG input_buffer_cwa => input_buffer_cwa_1495
  _1496 = real_data_size.163_1492 * 2;
  temp_buffer_cwa_1498 = malloc (_1496);
  # DEBUG temp_buffer_cwa => temp_buffer_cwa_1498
  _1499 = real_data_size_1489 / 2;
  _1500 = (unsigned int) _1499;
  output_buffer_cwa_1502 = malloc (_1500);
  # DEBUG output_buffer_cwa => output_buffer_cwa_1502
  # DEBUG d$previousValue => 0
  d.index = 0;

  <bb 488>:
  stdin.34_1504 = stdin;
  _1506 = feof (stdin.34_1504);
  if (_1506 != 0)
    goto <bb 496>;
  else
    goto <bb 489>;

  <bb 489>:
  _1507 = input_buffer_cwa_1495 + 40;
  fft_size.162_1508 = fft_size;
  fft_size.164_1509 = (unsigned int) fft_size.162_1508;
  stdin.34_1510 = stdin;
  fread (_1507, 4, fft_size.164_1509, stdin.34_1510);
  # DEBUG i => 0
  # DEBUG i => 0

  <bb 490>:
  # i_2767 = PHI <i_1517(491), 0(489)>
  # ivtmp_2639 = PHI <ivtmp_2640(491), 10(489)>
  # DEBUG i => i_2767
  i.165_1512 = (unsigned int) i_2767;
  _1513 = i.165_1512 * 4;
  _1514 = input_buffer_cwa_1495 + _1513;
  _1515 = MEM[(float *)input_buffer_cwa_1495 + 40B];
  *_1514 = _1515;
  i_1517 = i_2767 + 1;
  # DEBUG i => i_1517
  # DEBUG i => i_1517
  ivtmp_2640 = ivtmp_2639 - 1;
  if (ivtmp_2640 != 0)
    goto <bb 491>;
  else
    goto <bb 492>;

  <bb 491>:
  goto <bb 490>;

  <bb 492>:
  goto <bb 494>;

  <bb 493>:
  i.166_1518 = (unsigned int) i_38;
  _1519 = i.166_1518 * 2;
  _1520 = temp_buffer_cwa_1498 + _1519;
  _1521 = i.166_1518 * 4;
  _1522 = input_buffer_cwa_1495 + _1521;
  _1523 = *_1522;
  _1524 = _1523 * 1.0e+2;
  _1525 = (short int) _1524;
  *_1520 = _1525;
  i_1527 = i_38 + 1;
  # DEBUG i => i_1527

  <bb 494>:
  # i_38 = PHI <0(492), i_1527(493)>
  # DEBUG i => i_38
  if (i_38 < real_data_size_1489)
    goto <bb 493>;
  else
    goto <bb 495>;

  <bb 495>:
  MEM[(struct ImaState *)&d + 4B] = 0;
  encode_ima_adpcm_i16_u8 (temp_buffer_cwa_1498, output_buffer_cwa_1502, real_data_size_1489, d);
  stdout.38_1529 = stdout;
  fwrite (output_buffer_cwa_1502, 1, _1500, stdout.38_1529);
  goto <bb 488>;

  <bb 496>:
  # _86 = PHI <-1(483), -2(484), 0(488)>
  fft_size ={v} {CLOBBER};
  d ={v} {CLOBBER};
  # DEBUG D#9 => {CLOBBER}
  # DEBUG d$previousValue => D#9
  goto <bb 692>;

  <bb 497>:
  # DEBUG __s2_len => 13
  iftmp.167_1533 = __builtin_strcmp (_266, "fft_benchmark");
  if (iftmp.167_1533 == 0)
    goto <bb 498>;
  else
    goto <bb 511>;

  <bb 498>:
  if (argc_261(D) <= 3)
    goto <bb 499>;
  else
    goto <bb 500>;

  <bb 499>:
  # DEBUG why => "need required parameters (fft_size, fft_cycles)"
  stderr.0_2330 = stderr;
  fprintf (stderr.0_2330, "csdr: %s\n\n", "need required parameters (fft_size, fft_cycles)");
  # DEBUG why => NULL
  goto <bb 510>;

  <bb 500>:
  _1534 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1534, "%d", &fft_size);
  _1536 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1536, "%d", &fft_cycles);
  if (argc_261(D) != 4)
    goto <bb 501>;
  else
    goto <bb 503>;

  <bb 501>:
  # DEBUG __s2_len => 11
  _1538 = MEM[(char * *)argv_259(D) + 16B];
  iftmp.169_1539 = __builtin_strcmp (_1538, "--benchmark");
  if (iftmp.169_1539 == 0)
    goto <bb 503>;
  else
    goto <bb 502>;

  <bb 502>:

  <bb 503>:
  # iftmp.168_100 = PHI <1(501), 0(502), 0(500)>
  # DEBUG benchmark => iftmp.168_100
  stderr.58_1540 = stderr;
  fprintf (stderr.58_1540, "fft_benchmark: FFT library used: %s\n", "fftw3");
  fft_size.170_1542 = fft_size;
  fft_size.171_1543 = (unsigned int) fft_size.170_1542;
  _1544 = fft_size.171_1543 * 8;
  input_1546 = fftwf_malloc (_1544);
  # DEBUG input => input_1546
  fft_size.170_1547 = fft_size;
  fft_size.171_1548 = (unsigned int) fft_size.170_1547;
  _1549 = fft_size.171_1548 * 8;
  output_1551 = fftwf_malloc (_1549);
  # DEBUG output => output_1551
  _1553 = time (0B);
  _1554 = (unsigned int) _1553;
  srand (_1554);
  # DEBUG i => 0
  goto <bb 505>;

  <bb 504>:
  i.172_1557 = (unsigned int) i_39;
  _1558 = i.172_1557 * 8;
  _1559 = input_1546 + _1558;
  _1561 = rand ();
  _1562 = (float) _1561;
  _1563 = _1562 * 4.656612873077392578125e-10;
  *_1559 = _1563;
  _1565 = _1558 + 4;
  _1566 = input_1546 + _1565;
  _1568 = rand ();
  _1569 = (float) _1568;
  _1570 = _1569 * 4.656612873077392578125e-10;
  *_1566 = _1570;
  i_1572 = i_39 + 1;
  # DEBUG i => i_1572

  <bb 505>:
  # i_39 = PHI <0(503), i_1572(504)>
  # DEBUG i => i_39
  fft_size.170_1556 = fft_size;
  if (i_39 < fft_size.170_1556)
    goto <bb 504>;
  else
    goto <bb 506>;

  <bb 506>:
  stderr.58_1573 = stderr;
  __builtin_fwrite ("fft_benchmark: initializing... ", 1, 31, stderr.58_1573);
  clock_gettime (4, &start_time);
  fft_size.170_1576 = fft_size;
  plan_1578 = make_fft_c2c (fft_size.170_1576, input_1546, output_1551, 1, iftmp.168_100);
  # DEBUG plan => plan_1578
  clock_gettime (4, &end_time);
  stderr.58_1580 = stderr;
  _1581 = end_time.tv_sec;
  _1582 = start_time.tv_sec;
  _1583 = _1581 - _1582;
  _1584 = (double) _1583;
  _1585 = end_time.tv_nsec;
  _1586 = start_time.tv_nsec;
  _1587 = _1585 - _1586;
  _1588 = (double) _1587;
  _1589 = _1588 * 1.00000000000000006228159145777985641889706869279e-9;
  _1590 = _1584 + _1589;
  fprintf (stderr.58_1580, "done in %g seconds.\n", _1590);
  clock_gettime (4, &start_time);
  # DEBUG i => 0
  goto <bb 508>;

  <bb 507>:
  fft_execute (plan_1578);
  i_1595 = i_40 + 1;
  # DEBUG i => i_1595

  <bb 508>:
  # i_40 = PHI <0(506), i_1595(507)>
  # DEBUG i => i_40
  fft_cycles.173_1593 = fft_cycles;
  if (i_40 < fft_cycles.173_1593)
    goto <bb 507>;
  else
    goto <bb 509>;

  <bb 509>:
  clock_gettime (4, &end_time);
  _1597 = end_time.tv_sec;
  _1598 = start_time.tv_sec;
  _1599 = _1597 - _1598;
  _1600 = (double) _1599;
  _1601 = end_time.tv_nsec;
  _1602 = start_time.tv_nsec;
  _1603 = _1601 - _1602;
  _1604 = (double) _1603;
  _1605 = _1604 * 1.00000000000000006228159145777985641889706869279e-9;
  _1606 = _1600 + _1605;
  time_taken_fft_1607 = (float) _1606;
  # DEBUG time_taken_fft => time_taken_fft_1607
  stderr.58_1608 = stderr;
  fft_cycles.173_1609 = fft_cycles;
  fft_size.170_1610 = fft_size;
  _1611 = (double) time_taken_fft_1607;
  _1612 = (float) fft_cycles.173_1609;
  _1613 = time_taken_fft_1607 / _1612;
  _1614 = (double) _1613;
  fprintf (stderr.58_1608, "fft_benchmark: %d transforms of %d processed in %g seconds, %g seconds each.\n", fft_cycles.173_1609, fft_size.170_1610, _1611, _1614);

  <bb 510>:
  # _87 = PHI <-1(499), 0(509)>
  fft_size ={v} {CLOBBER};
  fft_cycles ={v} {CLOBBER};
  start_time ={v} {CLOBBER};
  end_time ={v} {CLOBBER};
  goto <bb 692>;

  <bb 511>:
  # DEBUG __s2_len => 19
  iftmp.174_1620 = __builtin_strcmp (_266, "bandpass_fir_fft_cc");
  if (iftmp.174_1620 == 0)
    goto <bb 512>;
  else
    goto <bb 547>;

  <bb 512>:
  # DEBUG window => 2
  fd_1622 = init_fifo (argc_261(D), argv_259(D));
  # DEBUG fd => fd_1622
  if (fd_1622 != 0)
    goto <bb 513>;
  else
    goto <bb 518>;

  <bb 513>:
  goto <bb 515>;

  <bb 514>:
  usleep (10000);

  <bb 515>:
  _1624 = read_fifo_ctl (fd_1622, "%g %g\n", &low_cut, &high_cut);
  if (_1624 == 0)
    goto <bb 514>;
  else
    goto <bb 516>;

  <bb 516>:
  if (argc_261(D) <= 4)
    goto <bb 517>;
  else
    goto <bb 521>;

  <bb 517>:
  # DEBUG why => "need more required parameters (transition_bw)"
  stderr.0_2331 = stderr;
  fprintf (stderr.0_2331, "csdr: %s\n\n", "need more required parameters (transition_bw)");
  # DEBUG why => NULL
  goto <bb 546>;

  <bb 518>:
  if (argc_261(D) <= 4)
    goto <bb 519>;
  else
    goto <bb 520>;

  <bb 519>:
  # DEBUG why => "need required parameters (low_cut, high_cut, transition_bw)"
  stderr.0_2332 = stderr;
  fprintf (stderr.0_2332, "csdr: %s\n\n", "need required parameters (low_cut, high_cut, transition_bw)");
  # DEBUG why => NULL
  goto <bb 546>;

  <bb 520>:
  _1626 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1626, "%g", &low_cut);
  _1628 = MEM[(char * *)argv_259(D) + 12B];
  sscanf (_1628, "%g", &high_cut);

  <bb 521>:
  _1630 = MEM[(char * *)argv_259(D) + 16B];
  sscanf (_1630, "%g", &transition_bw);
  if (argc_261(D) > 5)
    goto <bb 522>;
  else
    goto <bb 523>;

  <bb 522>:
  _1632 = MEM[(char * *)argv_259(D) + 20B];
  window_1634 = firdes_get_window_from_string (_1632);
  # DEBUG window => window_1634
  goto <bb 524>;

  <bb 523>:
  stderr.58_1635 = stderr;
  _1637 = firdes_get_string_from_window (2);
  fprintf (stderr.58_1635, "bandpass_fir_fft_cc: window = %s\n", _1637);

  <bb 524>:
  # window_41 = PHI <window_1634(522), 2(523)>
  # DEBUG window => window_41
  transition_bw.175_1639 = transition_bw;
  taps_length_1641 = firdes_filter_len (transition_bw.175_1639);
  # DEBUG taps_length => taps_length_1641
  fft_size_1643 = next_pow2 (taps_length_1641);
  # DEBUG fft_size => fft_size_1643
  _1644 = fft_size_1643 - taps_length_1641;
  if (_1644 <= 199)
    goto <bb 525>;
  else
    goto <bb 526>;

  <bb 525>:
  fft_size_1645 = fft_size_1643 << 1;
  # DEBUG fft_size => fft_size_1645

  <bb 526>:
  # fft_size_42 = PHI <fft_size_1643(524), fft_size_1645(525)>
  # DEBUG fft_size => fft_size_42
  _1646 = fft_size_42 - taps_length_1641;
  input_size_1647 = _1646 + 1;
  # DEBUG input_size => input_size_1647
  overlap_length_1648 = taps_length_1641 + -1;
  # DEBUG overlap_length => overlap_length_1648
  stderr.58_1649 = stderr;
  fprintf (stderr.58_1649, "bandpass_fir_fft_cc: (fft_size = %d) = (taps_length = %d) + (input_size = %d) - 1\n(overlap_length = %d) = taps_length - 1\n", fft_size_42, taps_length_1641, input_size_1647, overlap_length_1648);
  if (fft_size_42 <= 2)
    goto <bb 527>;
  else
    goto <bb 528>;

  <bb 527>:
  # DEBUG why => "FFT size error."
  stderr.0_2333 = stderr;
  fprintf (stderr.0_2333, "csdr: %s\n\n", "FFT size error.");
  # DEBUG why => NULL
  goto <bb 546>;

  <bb 528>:
  _1652 = getbufsize ();
  # DEBUG size => _1652
  env_csdr_dynamic_bufsize_on.24_2334 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2334 == 0)
    goto <bb 529>;
  else
    goto <bb 530>;

  <bb 529>:
  _2335 = env_csdr_fixed_bufsize;
  goto <bb 531>;

  <bb 530>:
  _2336 = sendbufsize.part.5 (_1652);

  <bb 531>:
  # _2337 = PHI <_2335(529), _2336(530)>
  # DEBUG size => NULL
  if (_2337 == 0)
    goto <bb 546>;
  else
    goto <bb 532>;

  <bb 532>:
  fft_size.176_1653 = (unsigned int) fft_size_42;
  taps_1655 = calloc (8, fft_size.176_1653);
  # DEBUG taps => taps_1655
  _1656 = fft_size.176_1653 * 8;
  taps_fft_1658 = malloc (_1656);
  # DEBUG taps_fft => taps_fft_1658
  plan_taps_1660 = make_fft_c2c (fft_size_42, taps_1655, taps_fft_1658, 1, 0);
  # DEBUG plan_taps => plan_taps_1660
  input_1662 = fftwf_malloc (_1656);
  # DEBUG input => input_1662
  input_fourier_1664 = fftwf_malloc (_1656);
  # DEBUG input_fourier => input_fourier_1664
  plan_forward_1666 = make_fft_c2c (fft_size_42, input_1662, input_fourier_1664, 1, 1);
  # DEBUG plan_forward => plan_forward_1666
  output_fourier_1668 = fftwf_malloc (_1656);
  # DEBUG output_fourier => output_fourier_1668
  output_1_1670 = fftwf_malloc (_1656);
  # DEBUG output_1 => output_1_1670
  output_2_1672 = fftwf_malloc (_1656);
  # DEBUG output_2 => output_2_1672
  plan_inverse_1_1674 = make_fft_c2c (fft_size_42, output_fourier_1668, output_1_1670, 0, 1);
  # DEBUG plan_inverse_1 => plan_inverse_1_1674
  plan_inverse_2_1676 = make_fft_c2c (fft_size_42, output_fourier_1668, output_2_1672, 0, 1);
  # DEBUG plan_inverse_2 => plan_inverse_2_1676
  # DEBUG i => 0
  # DEBUG i => 0
  _1677 = plan_inverse_2_1676->output;

  <bb 533>:
  # i_2768 = PHI <i_1685(534), 0(532)>
  # DEBUG i => i_2768
  i.178_1678 = (unsigned int) i_2768;
  _1679 = i.178_1678 * 8;
  _1680 = _1677 + _1679;
  _1681 = _1679 + 4;
  _1682 = _1677 + _1681;
  *_1682 = 0.0;
  *_1680 = 0.0;
  i_1685 = i_2768 + 1;
  # DEBUG i => i_1685
  # DEBUG i => i_1685
  if (fft_size_42 > i_1685)
    goto <bb 534>;
  else
    goto <bb 535>;

  <bb 534>:
  goto <bb 533>;

  <bb 535>:
  goto <bb 537>;

  <bb 536>:
  i.179_1686 = (unsigned int) i_44;
  _1687 = i.179_1686 * 8;
  _1688 = input_1662 + _1687;
  _1689 = _1687 + 4;
  _1690 = input_1662 + _1689;
  *_1690 = 0.0;
  *_1688 = 0.0;
  i_1693 = i_44 + 1;
  # DEBUG i => i_1693

  <bb 537>:
  # i_44 = PHI <input_size_1647(535), i_1693(536)>
  # DEBUG i => i_44
  if (fft_size_42 > i_44)
    goto <bb 536>;
  else
    goto <bb 538>;

  <bb 538>:
  input_size.182_1707 = (unsigned int) input_size_1647;
  _1711 = input_size.182_1707 * 8;

  <bb 539>:
  stderr.58_1694 = stderr;
  low_cut.180_1695 = low_cut;
  _1696 = (double) low_cut.180_1695;
  high_cut.181_1697 = high_cut;
  _1698 = (double) high_cut.181_1697;
  fprintf (stderr.58_1694, "bandpass_fir_fft_cc: filter initialized, low_cut = %g, high_cut = %g\n", _1696, _1698);
  low_cut.180_1700 = low_cut;
  high_cut.181_1701 = high_cut;
  firdes_bandpass_c (taps_1655, taps_length_1641, low_cut.180_1700, high_cut.181_1701, window_41);
  fft_execute (plan_taps_1660);
  # DEBUG odd => 0

  <bb 540>:
  # odd_45 = PHI <0(539), _2527(545)>
  # DEBUG odd => odd_45
  stdin.34_1704 = stdin;
  _1706 = feof (stdin.34_1704);
  if (_1706 != 0)
    goto <bb 546>;
  else
    goto <bb 541>;

  <bb 541>:
  stdin.34_1708 = stdin;
  fread (input_1662, 8, input_size.182_1707, stdin.34_1708);
  if (odd_45 != 0)
    goto <bb 542>;
  else
    goto <bb 543>;

  <bb 542>:

  <bb 543>:
  # iftmp.184_102 = PHI <plan_inverse_1_1674(542), plan_inverse_2_1676(541)>
  # iftmp.183_2773 = PHI <plan_inverse_2_1676(542), plan_inverse_1_1674(541)>
  # DEBUG plan_contains_last_overlap => iftmp.184_102
  _1710 = iftmp.184_102->output;
  last_overlap_1712 = _1710 + _1711;
  # DEBUG last_overlap => last_overlap_1712
  apply_fir_fft_cc (plan_forward_1666, iftmp.183_2773, taps_fft_1658, last_overlap_1712, overlap_length_1648);
  _1714 = iftmp.183_2773->output;
  stdout.38_1715 = stdout;
  fwrite (_1714, 8, input_size.182_1707, stdout.38_1715);
  # DEBUG returned => NULL
  _1718 = read_fifo_ctl (fd_1622, "%g %g\n", &low_cut, &high_cut);
  if (_1718 != 0)
    goto <bb 544>;
  else
    goto <bb 545>;

  <bb 544>:
  goto <bb 539>;

  <bb 545>:
  _2683 = odd_45 ^ 1;
  _2527 = _2683 & 1;
  # DEBUG odd => _2527
  goto <bb 540>;

  <bb 546>:
  # _88 = PHI <-1(517), -1(519), -1(527), -2(531), 0(540)>
  low_cut ={v} {CLOBBER};
  high_cut ={v} {CLOBBER};
  transition_bw ={v} {CLOBBER};
  goto <bb 692>;

  <bb 547>:
  # DEBUG __s2_len => 23
  iftmp.186_1725 = __builtin_strcmp (_266, "encode_ima_adpcm_i16_u8");
  if (iftmp.186_1725 == 0)
    goto <bb 548>;
  else
    goto <bb 556>;

  <bb 548>:
  _1727 = initialize_buffers ();
  _1728 = _1727 / 2;
  # DEBUG size => _1728
  env_csdr_dynamic_bufsize_on.24_2338 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2338 == 0)
    goto <bb 549>;
  else
    goto <bb 550>;

  <bb 549>:
  _2339 = env_csdr_fixed_bufsize;
  goto <bb 551>;

  <bb 550>:
  _2340 = sendbufsize.part.5 (_1728);

  <bb 551>:
  # _2341 = PHI <_2339(549), _2340(550)>
  # DEBUG size => NULL
  if (_2341 == 0)
    goto <bb 555>;
  else
    goto <bb 552>;

  <bb 552>:
  # DEBUG d$previousValue => 0
  d.index = 0;

  <bb 553>:
  # d$previousValue_2110 = PHI <0(552), d$4_2758(554)>
  # DEBUG d$previousValue => d$previousValue_2110
  stdin.34_1730 = stdin;
  _1732 = feof (stdin.34_1730);
  if (_1732 != 0)
    goto <bb 555>;
  else
    goto <bb 554>;

  <bb 554>:
  buffer_i16.42_1733 = buffer_i16;
  the_bufsize.31_1734 = the_bufsize;
  the_bufsize.36_1735 = (unsigned int) the_bufsize.31_1734;
  stdin.34_1736 = stdin;
  fread (buffer_i16.42_1733, 2, the_bufsize.36_1735, stdin.34_1736);
  buffer_i16.42_1738 = buffer_i16;
  buffer_u8.35_1739 = buffer_u8;
  the_bufsize.31_1740 = the_bufsize;
  # DEBUG d$4 => d$previousValue_2110
  MEM[(struct ImaState *)&d + 4B] = d$previousValue_2110;
  d = encode_ima_adpcm_i16_u8 (buffer_i16.42_1738, buffer_u8.35_1739, the_bufsize.31_1740, d); [return slot optimization]
  d$4_2758 = MEM[(struct ImaState *)&d + 4B];
  # DEBUG d$4 => d$4_2758
  # DEBUG d$previousValue => d$4_2758
  buffer_u8.35_1742 = buffer_u8;
  the_bufsize.31_1743 = the_bufsize;
  _1744 = the_bufsize.31_1743 / 2;
  _1745 = (unsigned int) _1744;
  stdout.38_1746 = stdout;
  fwrite (buffer_u8.35_1742, 1, _1745, stdout.38_1746);
  goto <bb 553>;

  <bb 555>:
  # _89 = PHI <-2(551), 0(553)>
  d ={v} {CLOBBER};
  # DEBUG D#19 => {CLOBBER}
  # DEBUG d$4 => D#19
  # DEBUG D#10 => {CLOBBER}
  # DEBUG d$previousValue => D#10
  goto <bb 692>;

  <bb 556>:
  # DEBUG __s2_len => 23
  iftmp.187_1749 = __builtin_strcmp (_266, "decode_ima_adpcm_u8_i16");
  if (iftmp.187_1749 == 0)
    goto <bb 557>;
  else
    goto <bb 565>;

  <bb 557>:
  # DEBUG d$previousValue => 0
  d.index = 0;
  _1752 = initialize_buffers ();
  _1753 = _1752 * 2;
  # DEBUG size => _1753
  env_csdr_dynamic_bufsize_on.24_2342 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2342 == 0)
    goto <bb 558>;
  else
    goto <bb 559>;

  <bb 558>:
  _2343 = env_csdr_fixed_bufsize;
  goto <bb 560>;

  <bb 559>:
  _2344 = sendbufsize.part.5 (_1753);

  <bb 560>:
  # _2345 = PHI <_2343(558), _2344(559)>
  # DEBUG size => NULL
  if (_2345 == 0)
    goto <bb 564>;
  else
    goto <bb 561>;

  <bb 561>:

  <bb 562>:
  # d$previousValue_2079 = PHI <0(561), d$4_1097(563)>
  # DEBUG d$previousValue => d$previousValue_2079
  stdin.34_1754 = stdin;
  _1756 = feof (stdin.34_1754);
  if (_1756 != 0)
    goto <bb 564>;
  else
    goto <bb 563>;

  <bb 563>:
  buffer_u8.35_1757 = buffer_u8;
  the_bufsize.31_1758 = the_bufsize;
  the_bufsize.36_1759 = (unsigned int) the_bufsize.31_1758;
  stdin.34_1760 = stdin;
  fread (buffer_u8.35_1757, 1, the_bufsize.36_1759, stdin.34_1760);
  buffer_u8.35_1762 = buffer_u8;
  buffer_i16.42_1763 = buffer_i16;
  the_bufsize.31_1764 = the_bufsize;
  # DEBUG d$4 => d$previousValue_2079
  MEM[(struct ImaState *)&d + 4B] = d$previousValue_2079;
  d = decode_ima_adpcm_u8_i16 (buffer_u8.35_1762, buffer_i16.42_1763, the_bufsize.31_1764, d); [return slot optimization]
  d$4_1097 = MEM[(struct ImaState *)&d + 4B];
  # DEBUG d$4 => d$4_1097
  # DEBUG d$previousValue => d$4_1097
  buffer_i16.42_1766 = buffer_i16;
  the_bufsize.31_1767 = the_bufsize;
  _1768 = the_bufsize.31_1767 * 2;
  _1769 = (unsigned int) _1768;
  stdout.38_1770 = stdout;
  fwrite (buffer_i16.42_1766, 2, _1769, stdout.38_1770);
  goto <bb 562>;

  <bb 564>:
  # _90 = PHI <-2(560), 0(562)>
  d ={v} {CLOBBER};
  # DEBUG D#20 => {CLOBBER}
  # DEBUG d$4 => D#20
  # DEBUG D#11 => {CLOBBER}
  # DEBUG d$previousValue => D#11
  goto <bb 692>;

  <bb 565>:
  # DEBUG __s2_len => 11
  iftmp.188_1773 = __builtin_strcmp (_266, "flowcontrol");
  if (iftmp.188_1773 == 0)
    goto <bb 566>;
  else
    goto <bb 611>;

  <bb 566>:
  if (argc_261(D) <= 3)
    goto <bb 567>;
  else
    goto <bb 568>;

  <bb 567>:
  # DEBUG why => "need required parameters (data_rate, reads_per_seconds)"
  stderr.0_2346 = stderr;
  fprintf (stderr.0_2346, "csdr: %s\n\n", "need required parameters (data_rate, reads_per_seconds)");
  # DEBUG why => NULL
  goto <bb 610>;

  <bb 568>:
  _1774 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1774, "%d", &data_rate);
  reads_per_second = 0;
  # DEBUG __s2_len => 4
  _1777 = MEM[(char * *)argv_259(D) + 12B];
  iftmp.189_1778 = __builtin_strcmp (_1777, "auto");
  if (iftmp.189_1778 != 0)
    goto <bb 569>;
  else
    goto <bb 570>;

  <bb 569>:
  sscanf (_1777, "%d", &reads_per_second);

  <bb 570>:
  prebuffer = 2.0e+0;
  if (argc_261(D) != 4)
    goto <bb 571>;
  else
    goto <bb 705>;

  <bb 571>:
  _1782 = MEM[(char * *)argv_259(D) + 16B];
  sscanf (_1782, "%g", &prebuffer);
  thrust = 10;
  if (argc_261(D) > 5)
    goto <bb 572>;
  else
    goto <bb 573>;

  <bb 572>:
  _1786 = MEM[(char * *)argv_259(D) + 20B];
  sscanf (_1786, "%d", &thrust);

  <bb 573>:
  got_bufsize_1789 = getbufsize ();
  # DEBUG got_bufsize => got_bufsize_1789
  if (got_bufsize_1789 == 0)
    goto <bb 610>;
  else
    goto <bb 574>;

  <bb 574>:
  reads_per_second.190_1790 = reads_per_second;
  if (reads_per_second.190_1790 != 0)
    goto <bb 575>;
  else
    goto <bb 576>;

  <bb 575>:
  data_rate.191_1791 = data_rate;
  _1792 = (double) data_rate.191_1791;
  _1793 = (double) reads_per_second.190_1790;
  _1794 = _1792 / _1793;
  flowcontrol_readsize_1795 = __builtin_lceil (_1794);
  # DEBUG flowcontrol_readsize => flowcontrol_readsize_1795
  goto <bb 577>;

  <bb 576>:
  # DEBUG flowcontrol_readsize => got_bufsize_1789
  data_rate.191_1796 = data_rate;
  reads_per_second.192_1797 = data_rate.191_1796 / got_bufsize_1789;
  reads_per_second = reads_per_second.192_1797;

  <bb 577>:
  # flowcontrol_readsize_46 = PHI <flowcontrol_readsize_1795(575), got_bufsize_1789(576)>
  # DEBUG flowcontrol_readsize => flowcontrol_readsize_46
  _1799 = (double) flowcontrol_readsize_46;
  reads_per_second.190_1800 = reads_per_second;
  _1801 = (float) reads_per_second.190_1800;
  prebuffer.193_1802 = prebuffer;
  _1803 = _1801 * prebuffer.193_1802;
  _103 = __builtin_floorf (_1803);
  _1804 = (double) _103;
  _1805 = _1799 * _1804;
  flowcontrol_bufsize_1806 = (int) _1805;
  # DEBUG flowcontrol_bufsize => flowcontrol_bufsize_1806
  # DEBUG flowcontrol_bufindex => 0
  flowcontrol_bufsize.194_1807 = (unsigned int) flowcontrol_bufsize_1806;
  flowcontrol_buffer_1809 = malloc (flowcontrol_bufsize.194_1807);
  # DEBUG flowcontrol_buffer => flowcontrol_buffer_1809
  _1810 = (double) reads_per_second.190_1800;
  _1811 = 1.0e+6 / _1810;
  flowcontrol_sleep_1812 = __builtin_lfloor (_1811);
  # DEBUG flowcontrol_sleep => flowcontrol_sleep_1812
  _1814 = fcntl (0, 3, 0);
  _1815 = _1814 | 2048;
  fcntl (0, 4, _1815);
  # DEBUG size => flowcontrol_readsize_46
  env_csdr_dynamic_bufsize_on.24_2347 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2347 == 0)
    goto <bb 579>;
  else
    goto <bb 578>;

  <bb 578>:
  sendbufsize.part.5 (flowcontrol_readsize_46);

  <bb 579>:
  # DEBUG size => NULL
  stdout.38_1817 = stdout;
  fflush (stdout.38_1817);
  # DEBUG flowcontrol_is_buffering => 1
  # DEBUG all_bytes_written => 0
  # DEBUG test => 0
  stderr.58_1819 = stderr;
  fprintf (stderr.58_1819, "flowcontrol: flowcontrol_readsize = %d, flowcontrol_bufsize = %d, flowcontrol_sleep = %d\n", flowcontrol_readsize_46, flowcontrol_bufsize_1806, flowcontrol_sleep_1812);
  goto <bb 581>;

  <bb 580>:
  # flowcontrol_bufindex_97 = PHI <flowcontrol_bufindex_48(587), flowcontrol_bufindex_50(609)>
  # flowcontrol_is_buffering_43 = PHI <1(587), flowcontrol_is_buffering_52(609)>
  # all_bytes_written_2763 = PHI <all_bytes_written_53(587), all_bytes_written_56(609)>

  <bb 581>:
  # flowcontrol_bufindex_47 = PHI <flowcontrol_bufindex_97(580), 0(579)>
  # flowcontrol_is_buffering_51 = PHI <flowcontrol_is_buffering_43(580), 1(579)>
  # all_bytes_written_53 = PHI <all_bytes_written_2763(580), 0(579)>
  # DEBUG all_bytes_written => all_bytes_written_53
  # DEBUG flowcontrol_is_buffering => flowcontrol_is_buffering_51
  # DEBUG flowcontrol_bufindex => flowcontrol_bufindex_47
  stdin.34_1821 = stdin;
  _1823 = feof (stdin.34_1821);
  if (_1823 != 0)
    goto <bb 610>;
  else
    goto <bb 582>;

  <bb 582>:
  stderr.58_1824 = stderr;
  __builtin_fputc (114, stderr.58_1824);
  flowcontrol_bufindex.195_1826 = (sizetype) flowcontrol_bufindex_47;
  _1827 = flowcontrol_buffer_1809 + flowcontrol_bufindex.195_1826;
  _1828 = flowcontrol_bufsize_1806 - flowcontrol_bufindex_47;
  _1829 = (unsigned int) _1828;
  read_return_1831 = read (0, _1827, _1829);
  # DEBUG read_return => read_return_1831
  stderr.58_1832 = stderr;
  __builtin_fputc (116, stderr.58_1832);
  if (read_return_1831 > 0)
    goto <bb 583>;
  else
    goto <bb 584>;

  <bb 583>:
  flowcontrol_bufindex_1834 = flowcontrol_bufindex_47 + read_return_1831;
  # DEBUG flowcontrol_bufindex => flowcontrol_bufindex_1834

  <bb 584>:
  # flowcontrol_bufindex_48 = PHI <flowcontrol_bufindex_47(582), flowcontrol_bufindex_1834(583)>
  # DEBUG flowcontrol_bufindex => flowcontrol_bufindex_48
  if (flowcontrol_is_buffering_51 != 0)
    goto <bb 585>;
  else
    goto <bb 588>;

  <bb 585>:
  stderr.58_1835 = stderr;
  fprintf (stderr.58_1835, "flowcontrol: buffering, flowcontrol_bufindex = %d\n", flowcontrol_bufindex_48);
  if (flowcontrol_bufindex_48 == flowcontrol_bufsize_1806)
    goto <bb 586>;
  else
    goto <bb 587>;

  <bb 586>:
  # DEBUG flowcontrol_is_buffering => 0
  clock_gettime (4, &start_time);
  goto <bb 609>;

  <bb 587>:
  if (read_return_1831 <= 0)
    goto <bb 580>;
  else
    goto <bb 609>;

  <bb 588>:
  clock_gettime (4, &end_time);
  # DEBUG thrust_added => 0
  _1844 = end_time.tv_sec;
  _1845 = start_time.tv_sec;
  _1846 = _1844 - _1845;
  _1847 = (double) _1846;
  _1848 = end_time.tv_nsec;
  _1849 = start_time.tv_nsec;
  _1850 = _1848 - _1849;
  _1851 = (double) _1850;
  _1852 = _1851 * 1.00000000000000006228159145777985641889706869279e-9;
  _1853 = _1847 + _1852;
  reciptmp_2637 = 1.0e+0 / _1853;
  data_rate.191_1855 = data_rate;
  _1856 = (double) data_rate.191_1855;
  thrust_lsm.276_2598 = thrust;
  goto <bb 590>;

  <bb 589>:
  thrust.198_1857 = thrust_lsm.276_2600 + 1;
  # DEBUG thrust_added => NULL

  <bb 590>:
  # thrust_lsm.276_2600 = PHI <thrust_lsm.276_2598(588), thrust.198_1857(589)>
  # thrust_lsm.277_2599 = PHI <0(588), 1(589)>
  # DEBUG thrust_added => NULL
  _1840 = flowcontrol_readsize_46 * thrust_lsm.276_2600;
  _1841 = (long long unsigned int) _1840;
  _1842 = all_bytes_written_53 + _1841;
  _1843 = (double) _1842;
  _1854 = reciptmp_2637 * _1843;
  if (_1854 < _1856)
    goto <bb 589>;
  else
    goto <bb 591>;

  <bb 591>:
  # _2660 = PHI <_1844(590)>
  # _2659 = PHI <_1852(590)>
  # data_rate.191_2658 = PHI <data_rate.191_1855(590)>
  # thrust_lsm.277_2563 = PHI <thrust_lsm.277_2599(590)>
  # thrust_lsm.276_2562 = PHI <thrust_lsm.276_2600(590)>
  if (thrust_lsm.277_2563 != 0)
    goto <bb 592>;
  else
    goto <bb 593>;

  <bb 592>:
  thrust = thrust_lsm.276_2562;

  <bb 593>:
  start_time_tv_sec_lsm.274_2569 = start_time.tv_sec;
  goto <bb 595>;

  <bb 594>:
  all_bytes_written_1864 = all_bytes_written_54 - _1859;
  # DEBUG all_bytes_written => all_bytes_written_1864
  _1865 = start_time_tv_sec_lsm.274_2602 + 1;

  <bb 595>:
  # all_bytes_written_54 = PHI <all_bytes_written_53(593), all_bytes_written_1864(594)>
  # start_time_tv_sec_lsm.274_2602 = PHI <start_time_tv_sec_lsm.274_2569(593), _1865(594)>
  # start_time_tv_sec_lsm.275_2601 = PHI <0(593), 1(594)>
  # DEBUG all_bytes_written => all_bytes_written_54
  _1859 = (long long unsigned int) data_rate.191_2658;
  if (all_bytes_written_54 > _1859)
    goto <bb 599>;
  else
    goto <bb 596>;

  <bb 596>:
  # all_bytes_written_2663 = PHI <all_bytes_written_54(595)>
  # start_time_tv_sec_lsm.275_2561 = PHI <start_time_tv_sec_lsm.275_2601(595)>
  # start_time_tv_sec_lsm.274_2559 = PHI <start_time_tv_sec_lsm.274_2602(595)>
  if (start_time_tv_sec_lsm.275_2561 != 0)
    goto <bb 597>;
  else
    goto <bb 598>;

  <bb 597>:
  start_time.tv_sec = start_time_tv_sec_lsm.274_2559;

  <bb 598>:
  goto <bb 603>;

  <bb 599>:
  _1861 = _2660 - start_time_tv_sec_lsm.274_2602;
  _1862 = (double) _1861;
  _1863 = _2659 + _1862;
  if (_1863 > 1.0e+0)
    goto <bb 594>;
  else
    goto <bb 600>;

  <bb 600>:
  # all_bytes_written_2662 = PHI <all_bytes_written_54(599)>
  # start_time_tv_sec_lsm.275_2560 = PHI <start_time_tv_sec_lsm.275_2601(599)>
  # start_time_tv_sec_lsm.274_2558 = PHI <start_time_tv_sec_lsm.274_2602(599)>
  if (start_time_tv_sec_lsm.275_2560 != 0)
    goto <bb 601>;
  else
    goto <bb 602>;

  <bb 601>:
  start_time.tv_sec = start_time_tv_sec_lsm.274_2558;

  <bb 602>:

  <bb 603>:
  # all_bytes_written_2638 = PHI <all_bytes_written_2662(602), all_bytes_written_2663(598)>

  <bb 604>:
  # flowcontrol_bufindex_49 = PHI <flowcontrol_bufindex_48(603), _1872(608)>
  # all_bytes_written_55 = PHI <all_bytes_written_2638(603), all_bytes_written_1876(608)>
  # DEBUG all_bytes_written => all_bytes_written_55
  # DEBUG flowcontrol_bufindex => flowcontrol_bufindex_49
  flowcontrol_readsize.200_1867 = (unsigned int) flowcontrol_readsize_46;
  write (1, flowcontrol_buffer_1809, flowcontrol_readsize.200_1867);
  stdout.38_1869 = stdout;
  fflush (stdout.38_1869);
  _1871 = flowcontrol_buffer_1809 + flowcontrol_readsize.200_1867;
  _1872 = flowcontrol_bufindex_49 - flowcontrol_readsize_46;
  _1873 = (unsigned int) _1872;
  memmove (flowcontrol_buffer_1809, _1871, _1873);
  # DEBUG flowcontrol_bufindex => _1872
  _1875 = (long long unsigned int) flowcontrol_readsize_46;
  all_bytes_written_1876 = all_bytes_written_55 + _1875;
  # DEBUG all_bytes_written => all_bytes_written_1876
  thrust.196_1877 = thrust;
  if (thrust.196_1877 != 0)
    goto <bb 606>;
  else
    goto <bb 605>;

  <bb 605>:
  # _2645 = PHI <_1872(604)>
  # all_bytes_written_2643 = PHI <all_bytes_written_1876(604)>
  goto <bb 609>;

  <bb 606>:
  thrust.203_1878 = thrust.196_1877 + -1;
  thrust = thrust.203_1878;
  if (flowcontrol_readsize_46 <= _1872)
    goto <bb 608>;
  else
    goto <bb 607>;

  <bb 607>:
  # _2644 = PHI <_1872(606)>
  # all_bytes_written_2642 = PHI <all_bytes_written_1876(606)>
  goto <bb 609>;

  <bb 608>:
  goto <bb 604>;

  <bb 609>:
  # flowcontrol_bufindex_50 = PHI <flowcontrol_bufindex_48(587), _2645(605), flowcontrol_bufsize_1806(586), _2644(607)>
  # flowcontrol_is_buffering_52 = PHI <1(587), 0(605), 0(586), 0(607)>
  # all_bytes_written_56 = PHI <all_bytes_written_53(587), all_bytes_written_2643(605), all_bytes_written_53(586), all_bytes_written_2642(607)>
  # DEBUG all_bytes_written => all_bytes_written_56
  # DEBUG flowcontrol_is_buffering => flowcontrol_is_buffering_52
  # DEBUG flowcontrol_bufindex => flowcontrol_bufindex_50
  flowcontrol_sleep.204_1880 = (unsigned int) flowcontrol_sleep_1812;
  usleep (flowcontrol_sleep.204_1880);
  goto <bb 580>;

  <bb 610>:
  # _91 = PHI <-1(567), -2(573), 0(581)>
  data_rate ={v} {CLOBBER};
  reads_per_second ={v} {CLOBBER};
  prebuffer ={v} {CLOBBER};
  thrust ={v} {CLOBBER};
  start_time ={v} {CLOBBER};
  end_time ={v} {CLOBBER};
  goto <bb 692>;

  <bb 611>:
  # DEBUG __s2_len => 7
  iftmp.205_1889 = __builtin_strcmp (_266, "through");
  if (iftmp.205_1889 == 0)
    goto <bb 612>;
  else
    goto <bb 624>;

  <bb 612>:
  _1891 = initialize_buffers ();
  # DEBUG size => _1891
  env_csdr_dynamic_bufsize_on.24_2349 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2349 == 0)
    goto <bb 613>;
  else
    goto <bb 614>;

  <bb 613>:
  _2350 = env_csdr_fixed_bufsize;
  goto <bb 615>;

  <bb 614>:
  _2351 = sendbufsize.part.5 (_1891);

  <bb 615>:
  # _2352 = PHI <_2350(613), _2351(614)>
  # DEBUG size => NULL
  if (_2352 == 0)
    goto <bb 623>;
  else
    goto <bb 616>;

  <bb 616>:
  # DEBUG time_now_sec => 0
  # DEBUG buffer_count => 0
  the_bufsize.31_1892 = the_bufsize;
  the_bufsize.133_1893 = (unsigned int) the_bufsize.31_1892;
  _1894 = the_bufsize.133_1893 * 4;
  through_buffer_1896 = malloc (_1894);
  # DEBUG through_buffer => through_buffer_1896

  <bb 617>:
  # time_now_sec_58 = PHI <0(616), time_now_sec_59(622)>
  # buffer_count_60 = PHI <0(616), buffer_count_1932(622)>
  # DEBUG buffer_count => buffer_count_60
  # DEBUG time_now_sec => time_now_sec_58
  stdin.34_1897 = stdin;
  _1899 = feof (stdin.34_1897);
  if (_1899 != 0)
    goto <bb 623>;
  else
    goto <bb 618>;

  <bb 618>:
  the_bufsize.31_1900 = the_bufsize;
  the_bufsize.36_1901 = (unsigned int) the_bufsize.31_1900;
  stdin.34_1902 = stdin;
  fread (through_buffer_1896, 4, the_bufsize.36_1901, stdin.34_1902);
  if (time_now_sec_58 == 0)
    goto <bb 619>;
  else
    goto <bb 620>;

  <bb 619>:
  # DEBUG time_now_sec => 1
  clock_gettime (4, &start_time);
  goto <bb 622>;

  <bb 620>:
  clock_gettime (4, &end_time);
  _1906 = (float) time_now_sec_58;
  _1907 = end_time.tv_sec;
  _1908 = start_time.tv_sec;
  _1909 = _1907 - _1908;
  _1910 = (double) _1909;
  _1911 = end_time.tv_nsec;
  _1912 = start_time.tv_nsec;
  _1913 = _1911 - _1912;
  _1914 = (double) _1913;
  _1915 = _1914 * 1.00000000000000006228159145777985641889706869279e-9;
  _1916 = _1910 + _1915;
  timetaken_1917 = (float) _1916;
  # DEBUG timetaken => timetaken_1917
  if (_1906 < timetaken_1917)
    goto <bb 621>;
  else
    goto <bb 622>;

  <bb 621>:
  stderr.58_1918 = stderr;
  _1919 = (float) buffer_count_60;
  the_bufsize.31_1920 = the_bufsize;
  _1921 = (float) the_bufsize.31_1920;
  _28 = _1921 * 4.0e+0;
  _1923 = _28 * _1919;
  _1924 = _1923 / timetaken_1917;
  _99 = __builtin_floorf (_1924);
  _1925 = (long unsigned int) _99;
  fprintf (stderr.58_1918, "through: %lu bytes/s %d\n", _1925, buffer_count_60);
  time_now_sec_1927 = __builtin_lceilf (timetaken_1917);
  # DEBUG time_now_sec => NULL

  <bb 622>:
  # time_now_sec_59 = PHI <1(619), time_now_sec_58(620), time_now_sec_1927(621)>
  # DEBUG time_now_sec => time_now_sec_59
  the_bufsize.31_1928 = the_bufsize;
  the_bufsize.36_1929 = (unsigned int) the_bufsize.31_1928;
  stdout.38_1930 = stdout;
  fwrite (through_buffer_1896, 4, the_bufsize.36_1929, stdout.38_1930);
  buffer_count_1932 = buffer_count_60 + 1;
  # DEBUG buffer_count => buffer_count_1932
  goto <bb 617>;

  <bb 623>:
  # _92 = PHI <-2(615), 0(617)>
  start_time ={v} {CLOBBER};
  end_time ={v} {CLOBBER};
  goto <bb 692>;

  <bb 624>:
  # DEBUG __s2_len => 6
  iftmp.206_1935 = __builtin_strcmp (_266, "dsb_fc");
  if (iftmp.206_1935 == 0)
    goto <bb 625>;
  else
    goto <bb 638>;

  <bb 625>:
  q_value = 0.0;
  if (argc_261(D) != 2)
    goto <bb 626>;
  else
    goto <bb 627>;

  <bb 626>:
  _1938 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1938, "%g", &q_value);

  <bb 627>:
  _1941 = initialize_buffers ();
  # DEBUG size => _1941
  env_csdr_dynamic_bufsize_on.24_2353 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2353 == 0)
    goto <bb 628>;
  else
    goto <bb 629>;

  <bb 628>:
  _2354 = env_csdr_fixed_bufsize;
  goto <bb 630>;

  <bb 629>:
  _2355 = sendbufsize.part.5 (_1941);

  <bb 630>:
  # _2356 = PHI <_2354(628), _2355(629)>
  # DEBUG size => NULL
  if (_2356 == 0)
    goto <bb 637>;
  else
    goto <bb 631>;

  <bb 631>:

  <bb 632>:
  stdin.34_1942 = stdin;
  _1944 = feof (stdin.34_1942);
  if (_1944 != 0)
    goto <bb 637>;
  else
    goto <bb 633>;

  <bb 633>:
  input_buffer.40_1945 = input_buffer;
  the_bufsize.31_1946 = the_bufsize;
  the_bufsize.36_1947 = (unsigned int) the_bufsize.31_1946;
  stdin.34_1948 = stdin;
  fread (input_buffer.40_1945, 4, the_bufsize.36_1947, stdin.34_1948);
  # DEBUG i => 0
  the_bufsize.31_1950 = the_bufsize;
  output_buffer.37_1951 = output_buffer;
  input_buffer.40_1955 = input_buffer;
  goto <bb 635>;

  <bb 634>:
  i.207_1952 = (unsigned int) i_61;
  _1953 = i.207_1952 * 8;
  _1954 = output_buffer.37_1951 + _1953;
  _1956 = i.207_1952 * 4;
  _1957 = input_buffer.40_1955 + _1956;
  _1958 = *_1957;
  *_1954 = _1958;
  _1960 = _1953 + 4;
  _1961 = output_buffer.37_1951 + _1960;
  q_value.208_1962 = q_value;
  *_1961 = q_value.208_1962;
  i_1964 = i_61 + 1;
  # DEBUG i => i_1964

  <bb 635>:
  # i_61 = PHI <0(633), i_1964(634)>
  # DEBUG i => i_61
  if (i_61 < the_bufsize.31_1950)
    goto <bb 634>;
  else
    goto <bb 636>;

  <bb 636>:
  output_buffer.37_1965 = output_buffer;
  the_bufsize.36_1966 = (unsigned int) the_bufsize.31_1950;
  stdout.38_1967 = stdout;
  fwrite (output_buffer.37_1965, 8, the_bufsize.36_1966, stdout.38_1967);
  goto <bb 632>;

  <bb 637>:
  # _93 = PHI <-2(630), 0(632)>
  q_value ={v} {CLOBBER};
  goto <bb 692>;

  <bb 638>:
  # DEBUG __s2_len => 18
  iftmp.209_1971 = __builtin_strcmp (_266, "convert_f_samplerf");
  if (iftmp.209_1971 == 0)
    goto <bb 639>;
  else
    goto <bb 652>;

  <bb 639>:
  if (argc_261(D) == 2)
    goto <bb 640>;
  else
    goto <bb 641>;

  <bb 640>:
  # DEBUG why => "need required parameter (wait_for_this_sample)"
  stderr.0_2357 = stderr;
  fprintf (stderr.0_2357, "csdr: %s\n\n", "need required parameter (wait_for_this_sample)");
  # DEBUG why => NULL
  goto <bb 651>;

  <bb 641>:
  _1973 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_1973, "%u", &wait_for_this_sample);
  _1976 = initialize_buffers ();
  # DEBUG size => _1976
  env_csdr_dynamic_bufsize_on.24_2358 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2358 == 0)
    goto <bb 642>;
  else
    goto <bb 643>;

  <bb 642>:
  _2359 = env_csdr_fixed_bufsize;
  goto <bb 644>;

  <bb 643>:
  _2360 = sendbufsize.part.5 (_1976);

  <bb 644>:
  # _2361 = PHI <_2359(642), _2360(643)>
  # DEBUG size => NULL
  if (_2361 == 0)
    goto <bb 651>;
  else
    goto <bb 645>;

  <bb 645>:
  the_bufsize.31_1977 = the_bufsize;
  _1978 = the_bufsize.31_1977 * 16;
  _1979 = (unsigned int) _1978;
  samplerf_buf_1981 = malloc (_1979);
  # DEBUG samplerf_buf => samplerf_buf_1981

  <bb 646>:
  stdin.34_1982 = stdin;
  _1984 = feof (stdin.34_1982);
  if (_1984 != 0)
    goto <bb 651>;
  else
    goto <bb 647>;

  <bb 647>:
  input_buffer.40_1985 = input_buffer;
  the_bufsize.31_1986 = the_bufsize;
  the_bufsize.36_1987 = (unsigned int) the_bufsize.31_1986;
  stdin.34_1988 = stdin;
  fread (input_buffer.40_1985, 4, the_bufsize.36_1987, stdin.34_1988);
  # DEBUG i => 0
  the_bufsize.31_1990 = the_bufsize;
  input_buffer.40_1994 = input_buffer;
  wait_for_this_sample.211_2003 = wait_for_this_sample;
  goto <bb 649>;

  <bb 648>:
  _1991 = i_62 * 16;
  _1992 = (sizetype) _1991;
  _1993 = samplerf_buf_1981 + _1992;
  i.210_1995 = (unsigned int) i_62;
  _1996 = i.210_1995 * 4;
  _1997 = input_buffer.40_1994 + _1996;
  _1998 = *_1997;
  _1999 = (double) _1998;
  MEM[(double *)_1993] = _1999;
  _2001 = _1992 + 8;
  _2002 = samplerf_buf_1981 + _2001;
  MEM[(unsigned int *)_2002] = wait_for_this_sample.211_2003;
  _2005 = _1992 + 12;
  _2006 = samplerf_buf_1981 + _2005;
  MEM[(unsigned int *)_2006] = 0;
  i_2008 = i_62 + 1;
  # DEBUG i => i_2008

  <bb 649>:
  # i_62 = PHI <0(647), i_2008(648)>
  # DEBUG i => i_62
  if (i_62 < the_bufsize.31_1990)
    goto <bb 648>;
  else
    goto <bb 650>;

  <bb 650>:
  the_bufsize.36_2009 = (unsigned int) the_bufsize.31_1990;
  stdout.38_2010 = stdout;
  fwrite (samplerf_buf_1981, 16, the_bufsize.36_2009, stdout.38_2010);
  goto <bb 646>;

  <bb 651>:
  # _94 = PHI <-1(640), -2(644), 0(646)>
  wait_for_this_sample ={v} {CLOBBER};
  goto <bb 692>;

  <bb 652>:
  # DEBUG __s2_len => 15
  iftmp.212_2013 = __builtin_strcmp (_266, "add_dcoffset_cc");
  if (iftmp.212_2013 == 0)
    goto <bb 653>;
  else
    goto <bb 660>;

  <bb 653>:
  _2015 = initialize_buffers ();
  # DEBUG size => _2015
  env_csdr_dynamic_bufsize_on.24_2362 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2362 == 0)
    goto <bb 654>;
  else
    goto <bb 655>;

  <bb 654>:
  _2363 = env_csdr_fixed_bufsize;
  goto <bb 656>;

  <bb 655>:
  _2364 = sendbufsize.part.5 (_2015);

  <bb 656>:
  # _2365 = PHI <_2363(654), _2364(655)>
  # DEBUG size => NULL
  if (_2365 == 0)
    goto <bb 18>;
  else
    goto <bb 657>;

  <bb 657>:

  <bb 658>:
  stdin.34_2016 = stdin;
  _2018 = feof (stdin.34_2016);
  if (_2018 != 0)
    goto <bb 27>;
  else
    goto <bb 659>;

  <bb 659>:
  input_buffer.40_2019 = input_buffer;
  the_bufsize.31_2020 = the_bufsize;
  the_bufsize.36_2021 = (unsigned int) the_bufsize.31_2020;
  stdin.34_2022 = stdin;
  fread (input_buffer.40_2019, 8, the_bufsize.36_2021, stdin.34_2022);
  input_buffer.40_2024 = input_buffer;
  output_buffer.37_2025 = output_buffer;
  the_bufsize.31_2026 = the_bufsize;
  add_dcoffset_cc (input_buffer.40_2024, output_buffer.37_2025, the_bufsize.31_2026);
  output_buffer.37_2028 = output_buffer;
  the_bufsize.31_2029 = the_bufsize;
  the_bufsize.36_2030 = (unsigned int) the_bufsize.31_2029;
  stdout.38_2031 = stdout;
  fwrite (output_buffer.37_2028, 8, the_bufsize.36_2030, stdout.38_2031);
  goto <bb 658>;

  <bb 660>:
  # DEBUG __s2_len => 8
  iftmp.213_2033 = __builtin_strcmp (_266, "fmmod_fc");
  if (iftmp.213_2033 == 0)
    goto <bb 661>;
  else
    goto <bb 668>;

  <bb 661>:
  _2035 = initialize_buffers ();
  # DEBUG size => _2035
  env_csdr_dynamic_bufsize_on.24_2366 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2366 == 0)
    goto <bb 662>;
  else
    goto <bb 663>;

  <bb 662>:
  _2367 = env_csdr_fixed_bufsize;
  goto <bb 664>;

  <bb 663>:
  _2368 = sendbufsize.part.5 (_2035);

  <bb 664>:
  # _2369 = PHI <_2367(662), _2368(663)>
  # DEBUG size => NULL
  if (_2369 == 0)
    goto <bb 18>;
  else
    goto <bb 665>;

  <bb 665>:

  <bb 666>:
  # last_phase_63 = PHI <0.0(665), last_phase_2048(667)>
  # DEBUG last_phase => last_phase_63
  stdin.34_2036 = stdin;
  _2038 = feof (stdin.34_2036);
  if (_2038 != 0)
    goto <bb 27>;
  else
    goto <bb 667>;

  <bb 667>:
  input_buffer.40_2039 = input_buffer;
  the_bufsize.31_2040 = the_bufsize;
  the_bufsize.36_2041 = (unsigned int) the_bufsize.31_2040;
  stdin.34_2042 = stdin;
  fread (input_buffer.40_2039, 4, the_bufsize.36_2041, stdin.34_2042);
  input_buffer.40_2044 = input_buffer;
  output_buffer.37_2045 = output_buffer;
  the_bufsize.31_2046 = the_bufsize;
  last_phase_2048 = fmmod_fc (input_buffer.40_2044, output_buffer.37_2045, the_bufsize.31_2046, last_phase_63);
  # DEBUG last_phase => last_phase_2048
  output_buffer.37_2049 = output_buffer;
  the_bufsize.31_2050 = the_bufsize;
  the_bufsize.36_2051 = (unsigned int) the_bufsize.31_2050;
  stdout.38_2052 = stdout;
  fwrite (output_buffer.37_2049, 8, the_bufsize.36_2051, stdout.38_2052);
  goto <bb 666>;

  <bb 668>:
  # DEBUG __s2_len => 18
  iftmp.214_2055 = __builtin_strcmp (_266, "fixed_amplitude_cc");
  if (iftmp.214_2055 == 0)
    goto <bb 669>;
  else
    goto <bb 679>;

  <bb 669>:
  if (argc_261(D) == 2)
    goto <bb 670>;
  else
    goto <bb 671>;

  <bb 670>:
  # DEBUG why => "need required parameter (new_amplitude)"
  stderr.0_2370 = stderr;
  fprintf (stderr.0_2370, "csdr: %s\n\n", "need required parameter (new_amplitude)");
  # DEBUG why => NULL
  goto <bb 678>;

  <bb 671>:
  _2056 = MEM[(char * *)argv_259(D) + 8B];
  sscanf (_2056, "%g", &new_amplitude);
  _2059 = initialize_buffers ();
  # DEBUG size => _2059
  env_csdr_dynamic_bufsize_on.24_2371 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2371 == 0)
    goto <bb 672>;
  else
    goto <bb 673>;

  <bb 672>:
  _2372 = env_csdr_fixed_bufsize;
  goto <bb 674>;

  <bb 673>:
  _2373 = sendbufsize.part.5 (_2059);

  <bb 674>:
  # _2374 = PHI <_2372(672), _2373(673)>
  # DEBUG size => NULL
  if (_2374 == 0)
    goto <bb 678>;
  else
    goto <bb 675>;

  <bb 675>:

  <bb 676>:
  stdin.34_2060 = stdin;
  _2062 = feof (stdin.34_2060);
  if (_2062 != 0)
    goto <bb 678>;
  else
    goto <bb 677>;

  <bb 677>:
  input_buffer.40_2063 = input_buffer;
  the_bufsize.31_2064 = the_bufsize;
  the_bufsize.36_2065 = (unsigned int) the_bufsize.31_2064;
  stdin.34_2066 = stdin;
  fread (input_buffer.40_2063, 8, the_bufsize.36_2065, stdin.34_2066);
  input_buffer.40_2068 = input_buffer;
  output_buffer.37_2069 = output_buffer;
  the_bufsize.31_2070 = the_bufsize;
  new_amplitude.215_2071 = new_amplitude;
  fixed_amplitude_cc (input_buffer.40_2068, output_buffer.37_2069, the_bufsize.31_2070, new_amplitude.215_2071);
  output_buffer.37_2073 = output_buffer;
  the_bufsize.31_2074 = the_bufsize;
  the_bufsize.36_2075 = (unsigned int) the_bufsize.31_2074;
  stdout.38_2076 = stdout;
  fwrite (output_buffer.37_2073, 8, the_bufsize.36_2075, stdout.38_2076);
  goto <bb 676>;

  <bb 678>:
  # _95 = PHI <-1(670), -2(674), 0(676)>
  new_amplitude ={v} {CLOBBER};
  goto <bb 692>;

  <bb 679>:
  # DEBUG __s2_len => 15
  iftmp.216_2080 = __builtin_strcmp (_266, "mono2stereo_i16");
  if (iftmp.216_2080 == 0)
    goto <bb 680>;
  else
    goto <bb 690>;

  <bb 680>:
  _2082 = initialize_buffers ();
  # DEBUG size => _2082
  env_csdr_dynamic_bufsize_on.24_2375 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2375 == 0)
    goto <bb 681>;
  else
    goto <bb 682>;

  <bb 681>:
  _2376 = env_csdr_fixed_bufsize;
  goto <bb 683>;

  <bb 682>:
  _2377 = sendbufsize.part.5 (_2082);

  <bb 683>:
  # _2378 = PHI <_2376(681), _2377(682)>
  # DEBUG size => NULL
  if (_2378 == 0)
    goto <bb 18>;
  else
    goto <bb 684>;

  <bb 684>:

  <bb 685>:
  stdin.34_2083 = stdin;
  _2085 = feof (stdin.34_2083);
  if (_2085 != 0)
    goto <bb 27>;
  else
    goto <bb 686>;

  <bb 686>:
  input_buffer.40_2086 = input_buffer;
  the_bufsize.31_2087 = the_bufsize;
  the_bufsize.36_2088 = (unsigned int) the_bufsize.31_2087;
  stdin.34_2089 = stdin;
  fread (input_buffer.40_2086, 2, the_bufsize.36_2088, stdin.34_2089);
  # DEBUG i => 0
  the_bufsize.31_2091 = the_bufsize;
  output_buffer.37_2092 = output_buffer;
  input_buffer.40_2096 = input_buffer;
  goto <bb 688>;

  <bb 687>:
  i.217_2093 = (unsigned int) i_64;
  _2094 = i.217_2093 * 4;
  _2095 = output_buffer.37_2092 + _2094;
  _2097 = i.217_2093 * 2;
  _2098 = input_buffer.40_2096 + _2097;
  _2099 = *_2098;
  *_2095 = _2099;
  _2101 = _2094 + 2;
  _2102 = output_buffer.37_2092 + _2101;
  _2103 = *_2098;
  *_2102 = _2103;
  i_2105 = i_64 + 1;
  # DEBUG i => i_2105

  <bb 688>:
  # i_64 = PHI <0(686), i_2105(687)>
  # DEBUG i => i_64
  if (i_64 < the_bufsize.31_2091)
    goto <bb 687>;
  else
    goto <bb 689>;

  <bb 689>:
  output_buffer.37_2106 = output_buffer;
  the_bufsize.36_2107 = (unsigned int) the_bufsize.31_2091;
  stdout.38_2108 = stdout;
  fwrite (output_buffer.37_2106, 4, the_bufsize.36_2107, stdout.38_2108);
  goto <bb 685>;

  <bb 690>:
  # DEBUG __s2_len => 4
  iftmp.218_2111 = __builtin_strcmp (_266, "none");
  if (iftmp.218_2111 == 0)
    goto <bb 27>;
  else
    goto <bb 691>;

  <bb 691>:
  # DEBUG why => "function name given in argument 1 does not exist. Possible causes:\n- You mistyped the commandline.\n- You need to update csdr to a newer version (if available)."
  stderr.0_2379 = stderr;
  fprintf (stderr.0_2379, "csdr: %s\n\n", "function name given in argument 1 does not exist. Possible causes:\n- You mistyped the commandline.\n- You need to update csdr to a newer version (if available).");
  # DEBUG why => NULL

  <bb 692>:
  # _96 = PHI <-1(3), _76(286), -1(7), -1(9), -2(18), -1(691), 0(27), _93(637), _88(546), _79(352), _87(510), _89(555), _86(496), _95(678), _85(480), _92(623), _84(470), _65(95), _66(106), _67(122), _68(135), _69(150), _70(164), _71(190), _72(195), _90(564), _83(459), 0(211), _78(334), _82(422), _81(403), _73(230), _74(239), _75(250), _91(610), _77(319), _94(651), _80(369)>
  return _96;

  <bb 693>:
  # DEBUG nan_detect => 1
  # DEBUG nan_detect => 1
  stderr.58_810 = stderr;
  __builtin_fwrite ("detect_nan_f: NaN detected!\n", 1, 28, stderr.58_810);
  goto <bb 262>;

  <bb 694>:
  # DEBUG octave => 1
  length.102_2692 = length;
  length.106_2693 = (unsigned int) length.102_2692;
  _2694 = length.106_2693 * 4;
  taps_2696 = malloc (_2694);
  # DEBUG taps => taps_2696
  cutoff_rate.107_2697 = cutoff_rate;
  firdes_lowpass_f (taps_2696, length.102_2692, cutoff_rate.107_2697, window_1030);
  # DEBUG octave => 1
  # DEBUG taps => taps_2696
  printf ("taps=[");
  goto <bb 329>;

  <bb 695>:
  # DEBUG octave => 0
  length.102_2700 = length;
  length.106_2701 = (unsigned int) length.102_2700;
  _2702 = length.106_2701 * 4;
  taps_2704 = malloc (_2702);
  # DEBUG taps => taps_2704
  cutoff_rate.107_2705 = cutoff_rate;
  firdes_lowpass_f (taps_2704, length.102_2700, cutoff_rate.107_2705, window_1030);
  goto <bb 329>;

  <bb 696>:
  # DEBUG octave => 1
  length.110_2712 = length;
  length.114_2713 = (unsigned int) length.110_2712;
  _2714 = length.114_2713 * 8;
  taps_2716 = malloc (_2714);
  # DEBUG taps => taps_2716
  low_cut.115_2717 = low_cut;
  high_cut.116_2718 = high_cut;
  firdes_bandpass_c (taps_2716, length.110_2712, low_cut.115_2717, high_cut.116_2718, window_1073);
  # DEBUG octave => 1
  # DEBUG taps => taps_2716
  printf ("taps=[");
  goto <bb 344>;

  <bb 697>:
  # DEBUG octave => 0
  length.110_2721 = length;
  length.114_2722 = (unsigned int) length.110_2721;
  _2723 = length.114_2722 * 8;
  taps_2725 = malloc (_2723);
  # DEBUG taps => taps_2725
  low_cut.115_2726 = low_cut;
  high_cut.116_2727 = high_cut;
  firdes_bandpass_c (taps_2725, length.110_2721, low_cut.115_2726, high_cut.116_2727, window_1073);
  goto <bb 344>;

  <bb 698>:
  reference = 2.0000000298023223876953125e-1;

  <bb 699>:
  attack_rate = 9.99999977648258209228515625e-3;

  <bb 700>:
  decay_rate = 9.99999974737875163555145263671875e-5;

  <bb 701>:
  max_gain = 6.5536e+4;

  <bb 702>:
  attack_wait = 0;

  <bb 703>:
  filter_alpha = 9.99000012874603271484375e-1;
  goto <bb 362>;

  <bb 704>:
  fft_size.142_2754 = fft_size;
  plan_2756 = make_fft_c2c (fft_size.142_2754, windowed_1333, output_1338, 1, 0);
  # DEBUG plan => plan_2756
  goto <bb 437>;

  <bb 705>:
  thrust = 10;
  goto <bb 573>;

  <bb 706>:
  # DEBUG size => NULL
  input.reference = 1.0e+0;
  goto <bb 376>;

  <bb 707>:
  getbufsize ();
  _2517 = input.input_size;
  # DEBUG size => _2517
  env_csdr_dynamic_bufsize_on.24_2427 = env_csdr_dynamic_bufsize_on;
  if (env_csdr_dynamic_bufsize_on.24_2427 == 0)
    goto <bb 706>;
  else
    goto <bb 373>;

}


