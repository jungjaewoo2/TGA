#! /bin/bash
#! /bin/ksh
#
# ap --- user script to send data to autoplot daemon
#
usage="usage:  ap [-n] [-k] [-r] [-d N] [-w window_name] [file...]"
gopts='knrd:w:'
#
#   -n	    don't clear the existing data
#   -k	    kill the autoplot daemon, remove the pipe
#   -r	    refresh the window
#   -d N    debug level N (default 0)
#   -w name specify the name of the window
#
# Ken Poulton  HPL
# @(#) $Header: ap,v 4.17 2005/02/01 12:58:03 poulton Exp $
# $Source: /mnt/jr.usr.share/local/src/cmd/autoplot/RCS/ap,v $

clear="clear"
kill=0
cmd=""
debug=""
given_name=""

set -f
set -- `getopt "$gopts" "$@"`; ret=$?
set +f
if [ $ret != 0 ] ; then
    echo "$usage" 1>&2; exit 2
fi
while [ $# -gt 0 ] ; do
    case $1 in
	-n )	clear=""; shift ;;
	-r )	cmd="plot"; shift ;;
	-k )	kill=1; shift ;;
	-d )	debug="-d $2"; shift 2 ;;
	-w )	given_name=$2; shift 2 ;;
	#-p )	parallel=1; shift ;;	    # flag w/o argument
	#-n )	name=$2; shift 2 ;; 	    # flag w/ argument
	-- )	shift; break ;;
	#### These cases should never be executed:
	-* )	echo "$0: script error: option '$1' not handled" 1>&2; exit 2;;
	* )	echo "$0: getopts error parsing option '$1'" 1>&2; exit 2;;
    esac
done

# Now only filenames are left:
files=$*

if [ ! -f /tmp/hersh.oc ] ; then
    cp /home/pi/bin/hersh.oc /tmp/hersh.oc
fi

#autoplot=autoplot.xlib	# while under development
autoplot=autoplot

if [ -z "$given_name" ] ; then given_name=$(basename $0) ; fi

displayhost=${DISPLAY%%[.:]*}
if [ "$displayhost" = `hostname` ] ; then
    window="$given_name"
else
    window="`hostname|sed 's/[.].*//'`.$given_name"
fi

case `uname` in
    HP-UX )     mknod=/sbin/mknod ;;
    Linux )     mknod=/bin/mknod ;;
esac

function psgrep
{
    (
    export COLUMNS=200	    # this is needed on Linux 
    ps -ef | sed 's/$/ /' | grep "$autoplot *$displayarg -[X] $window "
    )
}

if [ "$DISPLAY" = "" ] ; then	
    echo 'ap: $DISPLAY is not set' 1>&2
    exit 2
elif [ "$DISPLAY" = `hostname`:0.0 ] ; then
    displayarg=""
else
    displayarg="-D $DISPLAY"
fi

pipedir=/var/spool/sockets/autoplot 	# HP-UX
#pipedir=$HOME/.autoplot		# does not work over NFS
pipedir2=/tmp/autoplot			# Linux
if [ ! -d $pipedir ] && [ -w `dirname $pipedir` ] ; then
    echo "ap: creating $pipedir" 1>&2
    mkdir $pipedir
    chmod 777 $pipedir
fi
if [ ! -w $pipedir ] ; then
    pipedir=$pipedir2
    #echo "ap: $pipedir does not exist or is unwriteable.  See your sysad." 1>&2
    #echo "    Will use $pipedir for now." 1>&2
    mkdir -p $pipedir
    chmod 777 $pipedir
fi
if [ ! -d $pipedir ] ; then
    echo "ap: no pipe directory $pipedir" 1>&2
    exit 2
fi
pipe=$pipedir/$window.$DISPLAY

if [ $kill = 1 ] ; then
    if [ ! -p $pipe ] ; then
	rm -f $pipe
    fi
    psgrep | awk '{print "kill " $2}' | sh
    ps=`psgrep`
    if [ "$ps" != "" ] ; then
	echo "Process still alive:\n$ps"
    fi
    exit 0
fi
if [ ! -p $pipe ] ; then
    echo "ap: creating $pipe" 1>&2
    $mknod $pipe p
    chmod 666 $pipe
fi

if psgrep >/dev/null ; then
    true    # already running
else
    if tty | grep not.a.tty >/dev/null ; then
	# redirection to a file is necessary to make this work with ON/remsh/rsh
	tmp=/tmp/autoplot.$window
	echo "ap: starting autoplot daemon; stderr to /nfs/`hostname`$tmp" 1>&2
	$autoplot $displayarg -X $window $debug <$pipe >$tmp 2>&1 & 
    else
	echo "ap: starting autoplot daemon" 1>&2
	($autoplot $displayarg -X $window $debug <$pipe ; 
	if [ $? != 0 ] ; then echo "autoplot exit code $?"; fi ) &
    fi
fi


if [ "$cmd" != "" ] ; then
    echo "$cmd" >$pipe 
else
    {
    echo "$clear"
    cat $files
    echo "plot"
    } >$pipe 
fi

