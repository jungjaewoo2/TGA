      SUBROUTINE DENSLV(DETS,FX,DF,FPAR,IERROR,IPC,IPAR,
     1 IWORK,LIW,JOB,NVAR,RWORK,LRW,X,Y)
C
C***********************************************************************
C
C  DENSLV SOLVES THE NVAR*NVAR LINEAR SYSTEM
C
C               (  DF(X)  )
C  (1)          (         ) * Y   = Y
C               (  E(IPC) )
C
C  WHERE DF(X) IS THE JACOBIAN OF THE GIVEN FUNCTION FX AT X, AND
C  E(IPC) IS THE IP-TH NATURAL BASIS VECTOR; THAT IS, THE LAST ROW
C  CONSISTS OF ALL ZEROS EXCEPT FOR A 1 IN COLUMN IPC.
C
C  THE MATRIX IS STORED IN DENSE FORM IN THE ONE-DIMENSIONAL ARRAY
C  RWORK(LRBEG)-RWORK(LRLST) WHERE LRLST=LRBEG+NVAR*NVAR - 1 AND
C  LRBEG IS STORED IN IWORK(15). A DATA ERROR IS CAUSED IF LRLST.GT.LRW
C
C  THE ROUTINE STORES THE PIVOT ARRAY IN IWORK(IWORK(13))) THROUGH
C  IWORK(LILST) WHERE LILST=IWORK(13)+NVAR - 1.
C  THE ROUTINE RETURNS WITH A DATA ERROR IF LILST.GT.LIW.
C
C  SINCE THE MATRIX OF THE SYSTEM (1) IS STORED IN DENSE FORM THE USER
C  PROGRAM DF MAY HAVE THE FORM
C
C         SUBROUTINE DF(NVAR,FPAR,IPAR,X,A,IERR)
C         DIMENSION A(NVAR,NVAR), X(NVAR), FPAR(*),IPAR(*)
C         .....
C         A(I,J)=DF(I)/DX(J) , I=1,...,NVAR-1,J=1,...,NVAR
C         .....
C
C  WHERE DF(I)/DX(J) DENOTES THE DERIVATIVE OF THE I-TH COMPONENT
C  OF THE FUNCTION FX WITH RESPECT TO THE J-TH VARIABLE.  THE USER
C  NEED NOT SUPPLY THE LAST ROW OF THE MATRIX OF THE SYSTEM (1).
C
C  THE LINPACK SUBROUTINES DGEFA, DGEDI, AND DGESL ARE USED.
C
C  LIST OF VARIABLES
C
C  DETS    THE SIGN OF THE DETERMINANT OF THE MATRIX IN (1).
C  FX      AN EXTERNAL ROUTINE, THE NAME OF THE USER SUPPLIED
C          SUBROUTINE WHICH COMPUTES THE NVAR-1 DIMENSIONAL
C          FUNCTION.
C
C  DF      AN EXTERNAL ROUTINE, THE NAME OF THE USER SUPPLIED
C          SUBROUTINE WHICH COMPUTES THE JACOBIAN OF THE FUNCTION.
C  FPAR    A REAL ARRAY FOR THE TRANSMISSION OF PARAMETERS TO
C          DENSLV AND DF.
C  IERROR  ERROR FLAG
C         = 0   NORMAL RETURN
C         = 1   DATA OR STORAGE ERROR
C         = 2   ERROR IN DERIVATIVE ROUTINE DF
C         = 3   NUMERICALLY SINGULAR MATRIX DETECTED.
C  IPC     THE LOCATION OF THE 1 IN THE LAST ROW OF THE MATRIX
C  IPAR    AN INTEGER ARRAY FOR TRANSMISSION OF PARAMETERS TO DENSLV
C          AND DF.
C  IWORK   INTEGER WORK ARRAY USED TO STORE THE PIVOT ARRAY
C          (SEE ABOVE)
C  LIW     DIMENSION OF IWORK IN THE CALLING PROGRAM
C  JOB     WORK REQUEST SWITCH
C          = 0   DECOMPOSE THE MATRIX, SOLVE THE SYSTEM, AND
C          COMPUTE THE SIGN OF THE DETERMINANT.
C          = 1   SOLVE THE SYSTEM, ASSUMING THAT THE MATRIX HAS
C          BEEN PREVIOUSLY DECOMPOSED.
C          2 = Factor system, compute determinant.
C          3 = Check jacobian matrix.  Call user jacobian routine,
C          multiply by -1.0, add finite difference jacobian,
C          print largest entry.
C
C  NVAR    THE DIMENSION OF THE SYSTEM.
C  RWORK   REAL WORK ARRAY USED TO STORE THE MATRIX (SEE ABOVE).
C  LRW     THE DIMENSION OF RWORK IN THE CALLING PROGRAM.
C  X       A REAL VECTOR OF LENGTH NVAR, THE POINT AT WHICH THE
C          JACOBIAN IS TO BE EVALUATED.
C  Y       A REAL VECTOR OF LENGTH NVAR. ON INPUT Y CONTAINS THE
C          RIGHT HAND SIDE OF THE LINEAR SYSTEM (1), ON RETURN
C          WITH IERROR = 0 THE SOLUTION OF THE SYSTEM IS GIVEN IN Y.
C
      DOUBLE PRECISION ONE
      DOUBLE PRECISION ZERO
C
      PARAMETER (ONE=1.0)
      PARAMETER (ZERO=0.0)
C
      EXTERNAL  DENJAC
      EXTERNAL  DF
      EXTERNAL  FX
      EXTERNAL  IDAMAX
      EXTERNAL  DGEDI
      EXTERNAL  DGEFA
      EXTERNAL  DGESL
      EXTERNAL  DSCAL
C
      INTRINSIC MOD
      INTRINSIC SQRT
C
      INTEGER   LIW
      INTEGER   LRW
      INTEGER   NVAR
C
      DOUBLE PRECISION DET(2)
      DOUBLE PRECISION DETS
      DOUBLE PRECISION EPS
      DOUBLE PRECISION FPAR(*)
      INTEGER   I
      INTEGER   IERROR
      INTEGER   IPAR(*)
      INTEGER   IPC
      INTEGER   IDAMAX
      INTEGER   IWORK(LIW)
      INTEGER   J
      INTEGER   JAC
      INTEGER   JACK
      INTEGER   JOB
      INTEGER   JOB2
      INTEGER   K
      INTEGER   LDF
      INTEGER   LFXM
      INTEGER   LFXP
      INTEGER   LILST
      INTEGER   LOUNIT
      INTEGER   LPIV
      INTEGER   LRLST
      INTEGER   NDIM
      DOUBLE PRECISION RWORK(LRW)
      DOUBLE PRECISION SKALE
      DOUBLE PRECISION X(NVAR)
      DOUBLE PRECISION Y(NVAR)
C
C  CHECK INPUT VALUES OF NVAR, AND IPC.
C  DEPENDING ON VALUE OF JOB, EITHER SET UP
C  AUGMENTED JACOBIAN, DECOMPOSE INTO L-U FACTORS, AND GET DETERMINANT,
C  OR USE CURRENT FACTORED JACOBIAN WITH NEW RIGHT HAND SIDE.
C
      LOUNIT=IWORK(8)
      IERROR=0
      LPIV=IWORK(13)
      LDF=IWORK(15)
      LILST=LPIV+NVAR-1
      JAC=IWORK(9)
      IF(JAC.NE.0.AND.JOB.EQ.3)THEN
        IERROR=4
        WRITE(LOUNIT,*)'DENSLV - Error!  Jacobian check requested'
        WRITE(LOUNIT,*)'         but no user Jacobian routine.'
        RETURN
        ENDIF
      IF(JAC.EQ.0.AND.JOB.NE.3)THEN
        LRLST=LDF-1+NVAR*NVAR
      ELSE
        LFXP=LDF+NVAR*NVAR
        LFXM=LFXP+NVAR
        LRLST=LDF-1+NVAR*NVAR+2*NVAR
        ENDIF
      IF((LILST.GT.LIW).OR.(LRLST.GT.LRW))THEN
        IERROR=1
        WRITE(LOUNIT,1040)LILST,LIW
        WRITE(LOUNIT,1050)LRLST,LRW
        RETURN
        ENDIF
      IF(JOB.EQ.1)GO TO 10
C
C  IF JOB IS 0 OR 2, THEN WE MUST EVALUATE THE JACOBIAN, USING THE USER
C  ROUTINE OR FINITE DIFFERENCES, AND THEN FACTOR IT AND GET THE
C  SIGN OF THE DETERMINANT.
C
      NDIM=NVAR*NVAR
      DO 5 I=1,NDIM
        RWORK(LDF+I-1)=ZERO
5       CONTINUE
      IF(JAC.EQ.0)THEN
        CALL DF(NVAR,FPAR,IPAR,X,RWORK(LDF),IERROR)
        IWORK(19)=IWORK(19)+1
        RWORK(LDF+IPC*NVAR-1)=ONE
        ENDIF
      IF(JOB.EQ.3)THEN
        SKALE=-ONE
        CALL DSCAL(NDIM,SKALE,RWORK(LDF),1)
        ENDIF
      IF(JAC.EQ.1.OR.JAC.EQ.2.OR.JOB.EQ.3)THEN
        JACK=JAC
        IF(JOB.EQ.3)JACK=2
        EPS=SQRT(SQRT(RWORK(8)))
        CALL DENJAC(EPS,FPAR,RWORK(LDF),FX,IERROR,IPAR,IPC,IWORK,
     *  JACK,LIW,LOUNIT,NVAR,X,RWORK(LFXP),RWORK(LFXM))
        ENDIF
      IF(IERROR.NE.0)RETURN
C
C  If JOB=3, print out largest entry of matrix.
C
      IF(JOB.EQ.3)THEN
        K=IDAMAX(NDIM,RWORK(LDF),1)
        I=MOD(K-1,NVAR)+1
        J=(K-I)/NVAR+1
        WRITE(LOUNIT,1070)RWORK(LDF+K-1),I,J
        IF(IWORK(1).EQ.(-2))THEN
          WRITE(LOUNIT,*)' '
          WRITE(LOUNIT,*)'DENSLV - Entire difference matrix:'
          WRITE(LOUNIT,*)' '
          DO 99 I=1,NVAR
            DO 98 J=1,NVAR
              K=LDF+(J-1)*NVAR+I-1
              WRITE(LOUNIT,1080)RWORK(K),I,J
98            CONTINUE
            WRITE(LOUNIT,*)' '
99          CONTINUE
          ENDIF
        RETURN
        ENDIF
C
C  DECOMPOSE MATRIX
C  LINPACK:
      CALL DGEFA(RWORK(LDF),NVAR,NVAR,IWORK(LPIV),IERROR)
      IWORK(20)=IWORK(20)+1
      IF(IERROR.NE.0)THEN
        WRITE(LOUNIT,1492)IERROR
        IERROR=3
        RETURN
        ENDIF
C
C  COMPUTE DETERMINANT
C
      JOB2=10
      CALL DGEDI(RWORK(LDF),NVAR,NVAR,IWORK(LPIV),DET,Y,JOB2)
C
C  RECORD THE SIGN OF THE DETERMINANT
C
      DETS=ZERO
      IF(DET(1).GT.ZERO)THEN
        DETS=ONE
      ELSEIF(DET(1).LT.ZERO)THEN
        DETS=-ONE
        ENDIF
      IF(JOB.EQ.2)RETURN
C
C  USING L-U FACTORED MATRIX, SOLVE SYSTEM USING FORWARD-BACKWARD
C  ELIMINATION, AND OVERWRITE RIGHT HAND SIDE WITH SOLUTION
C
10    CONTINUE
      CALL DGESL(RWORK(LDF),NVAR,NVAR,IWORK(LPIV),Y,0)
      IWORK(21)=IWORK(21)+1
      RETURN
1040  FORMAT(' DENSLV - Need LIW=',I6,', have LIW=',I6)
1050  FORMAT(' DENSLV - Need LRW=',I6,', have LRW=',I6)
1070  FORMAT(' DENSLV - Maximum difference between user and estimated'/
     *       '          jacobian is ',G14.6,' row ',I6,' column ',I6)
1080  FORMAT(1X,G14.6,' =FP(I,J)-DELF(I,J), I, J=',2I6)
1492  FORMAT(' DENSLV - Zero pivot, DGEFA returns INFO=',I6)
      END
